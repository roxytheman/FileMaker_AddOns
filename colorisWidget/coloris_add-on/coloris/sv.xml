
<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.007A96493F965EA69299287CFD436B46</StringID>
	<SourceText><CR/>CUSTOM FUNCTION: BaseConvert ( string ; baseFrom ; baseTo )<CR/>//written by Debi Fuchs of Aptworks Consulting, debi@aptworks.com<CR/>//bug fix by Rico Meier, MeiSol AG<CR/><CR/>Convert a number (up to 10 billion) from one base to another.<CR/><CR/>EXAMPLES:<CR/><CR/>   BaseConvert( &quot;F1&quot;; 16; 2 ) // --&gt; &quot;11110001&quot;<CR/>   BaseConvert( -5; 10; 2 ) // --&gt; &quot;-101&quot;<CR/>   BaseConvert( 255; 10; 16 ) // --&gt; &quot;FF&quot;<CR/>   BaseConvert( &quot;-101&quot; ; 2; 10 ) // --&gt; &quot;-5&quot;<CR/>   BaseConvert( -101 ; 2; 10 ) // --&gt; -5<CR/>   BaseConvert( &quot;FF&quot;; 16; 10 ) // --&gt; &quot;255&quot;<CR/>   BaseConvert( &quot;-101&quot; ; 16; 2 ) // --&gt; &quot;-100000001&quot;<CR/>   BaseConvert( &quot;-101&quot; ; 2; 16 ) // --&gt; &quot;-5&quot;<CR/>   BaseConvert( &quot;FF&quot;; 16; 2 ) // --&gt; &quot;11111111&quot;<CR/><CR/>IMPLEMENTATION: See comments. No helper functions are required. Limit is set at 10^10 so that the math does not break down, as log calculations on large numbers can be incorrect.<CR/><CR/>LAST MODIFIED: 14-AUG-2008 by Debi Fuchs of Aptworks Consulting<CR/></SourceText>
	<TargetText><CR/>CUSTOM FUNCTION: BaseConvert ( string ; baseFrom ; baseTo )<CR/>//written by Debi Fuchs of Aptworks Consulting, debi@aptworks.com<CR/>//bug fix by Rico Meier, MeiSol AG<CR/><CR/>Convert a number (up to 10 billion) from one base to another.<CR/><CR/>EXAMPLES:<CR/><CR/>   BaseConvert( &quot;F1&quot;; 16; 2 ) // --&gt; &quot;11110001&quot;<CR/>   BaseConvert( -5; 10; 2 ) // --&gt; &quot;-101&quot;<CR/>   BaseConvert( 255; 10; 16 ) // --&gt; &quot;FF&quot;<CR/>   BaseConvert( &quot;-101&quot; ; 2; 10 ) // --&gt; &quot;-5&quot;<CR/>   BaseConvert( -101 ; 2; 10 ) // --&gt; -5<CR/>   BaseConvert( &quot;FF&quot;; 16; 10 ) // --&gt; &quot;255&quot;<CR/>   BaseConvert( &quot;-101&quot; ; 16; 2 ) // --&gt; &quot;-100000001&quot;<CR/>   BaseConvert( &quot;-101&quot; ; 2; 16 ) // --&gt; &quot;-5&quot;<CR/>   BaseConvert( &quot;FF&quot;; 16; 2 ) // --&gt; &quot;11111111&quot;<CR/><CR/>IMPLEMENTATION: See comments. No helper functions are required. Limit is set at 10^10 so that the math does not break down, as log calculations on large numbers can be incorrect.<CR/><CR/>LAST MODIFIED: 14-AUG-2008 by Debi Fuchs of Aptworks Consulting<CR/></TargetText>
	<Comment>com.fmi.calculation.text._CR/_CUSTOM FUNCTION: BaseConvert ( string ; baseFrom ; baseTo )_CR/_//written by Debi Fuchs of Aptworks Consulting, debi@aptworks.com_CR/_//bug fix by Rico Meier, MeiSol AG_CR/__CR/_Convert a number (up to 10 billion) from one base to another._CR/__CR/_EXAMPLES:_CR/__CR/_   BaseConvert( &quot;F1&quot;; 16; 2 ) // --&gt; &quot;11110001&quot;_CR/_   BaseConvert( -5; 10; 2 ) // --&gt; &quot;-101&quot;_CR/_   BaseConvert( 255; 10; 16 ) // --&gt; &quot;FF&quot;_CR/_   BaseConvert( &quot;-101&quot; ; 2; 10 ) // --&gt; &quot;-5&quot;_CR/_   BaseConvert( -101 ; 2; 10 ) // --&gt; -5_CR/_   BaseConvert( &quot;FF&quot;; 16; 10 ) // --&gt; &quot;255&quot;_CR/_   BaseConvert( &quot;-101&quot; ; 16; 2 ) // --&gt; &quot;-100000001&quot;_CR/_   BaseConvert( &quot;-101&quot; ; 2; 16 ) // --&gt; &quot;-5&quot;_CR/_   BaseConvert( &quot;FF&quot;; 16; 2 ) // --&gt; &quot;11111111&quot;_CR/__CR/_IMPLEMENTATION: See comments. No helper functions are required. Limit is set at 10^10 so that the math does not break down, as log calculations on large numbers can be incorrect._CR/__CR/_LAST MODIFIED: 14-AUG-2008 by Debi Fuchs of Aptworks Consulting_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.0228D01358DB9D9F469745853AB13299</StringID>
	<SourceText> Return a null value if the string is null;<CR/></SourceText>
	<TargetText> Return a null value if the string is null;<CR/></TargetText>
	<Comment>com.fmi.calculation.text. Return a null value if the string is null;_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.02E0549A0E83A075818E2E431E836B17</StringID>
	<SourceText> Dependency : BaseConvert Custom Function by Debi Fuchs - Aptworks Consulting | https://www.briandunning.com/cf/901<CR/></SourceText>
	<TargetText> Dependency : BaseConvert Custom Function by Debi Fuchs - Aptworks Consulting | https://www.briandunning.com/cf/901<CR/></TargetText>
	<Comment>com.fmi.calculation.text. Dependency : BaseConvert Custom Function by Debi Fuchs - Aptworks Consulting | https://www.briandunning.com/cf/901_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.04AA4B14C533E7E34838EECCFA669C2A</StringID>
	<SourceText> Use example : coloris ( &quot;#C9C9C9&quot; ; &quot;&apos;#ffddce&apos;, &apos;#ffc2a8&apos;, &apos;#ffa783&apos;, &apos;#ff8b60&apos;&quot; ; &quot;myScript&quot; )<CR/></SourceText>
	<TargetText> Use example : coloris ( &quot;#C9C9C9&quot; ; &quot;&apos;#ffddce&apos;, &apos;#ffc2a8&apos;, &apos;#ffa783&apos;, &apos;#ff8b60&apos;&quot; ; &quot;myScript&quot; )<CR/></TargetText>
	<Comment>com.fmi.calculation.text. Use example : coloris ( &quot;#C9C9C9&quot; ; &quot;&apos;#ffddce&apos;, &apos;#ffc2a8&apos;, &apos;#ffa783&apos;, &apos;#ff8b60&apos;&quot; ; &quot;myScript&quot; )_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.06146AB95620ED0F2126673EB0FB340C</StringID>
	<SourceText> notation, so we can&apos;t use each character of digit as a number).<CR/></SourceText>
	<TargetText> notation, so we can&apos;t use each character of digit as a number).<CR/></TargetText>
	<Comment>com.fmi.calculation.text. notation, so we can&apos;t use each character of digit as a number)._CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.06B4801F99E5B0C1C5F83C121B1B1341</StringID>
	<SourceText>b</SourceText>
	<TargetText>b</TargetText>
	<Comment>com.fmi.calculation.text.b</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.06F2491CA953B6FA05CDCBF366D5D445</StringID>
	<SourceText> Input tint percentage for the returned colour chroma ( 0 - 100 )<CR/></SourceText>
	<TargetText> Input tint percentage for the returned colour chroma ( 0 - 100 )<CR/></TargetText>
	<Comment>com.fmi.calculation.text. Input tint percentage for the returned colour chroma ( 0 - 100 )_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.073B6D5F174E77A8533FE766D43445CB</StringID>
	<SourceText> *3<CR/></SourceText>
	<TargetText> *3<CR/></TargetText>
	<Comment>com.fmi.calculation.text. *3_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.07FD5E6C393867FFF90CAA276570B241</StringID>
	<SourceText> the first character, multiply it by a power of baseFrom, and add the result<CR/></SourceText>
	<TargetText> the first character, multiply it by a power of baseFrom, and add the result<CR/></TargetText>
	<Comment>com.fmi.calculation.text. the first character, multiply it by a power of baseFrom, and add the result_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.0822917CB259589232A763CACFE5270F</StringID>
	<SourceText> Swatches are declared as an array of hex colour codes prefixed with a # in single quotes, separated with a comma. You can declare a series of preset swatches that will appear under the main picker in three rows of 6 swatches (a total of 18).<CR/></SourceText>
	<TargetText> Swatches are declared as an array of hex colour codes prefixed with a # in single quotes, separated with a comma. You can declare a series of preset swatches that will appear under the main picker in three rows of 6 swatches (a total of 18).<CR/></TargetText>
	<Comment>com.fmi.calculation.text. Swatches are declared as an array of hex colour codes prefixed with a # in single quotes, separated with a comma. You can declare a series of preset swatches that will appear under the main picker in three rows of 6 swatches (a total of 18)._CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.0AB1B71D360A07494DCAD2AA70877CA8</StringID>
	<SourceText> with 1) any subequent zeros, and 2) the result of recursing<CR/></SourceText>
	<TargetText> with 1) any subequent zeros, and 2) the result of recursing<CR/></TargetText>
	<Comment>com.fmi.calculation.text. with 1) any subequent zeros, and 2) the result of recursing_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.0B056717A685BD46038285B5B53B2E3A</StringID>
	<SourceText> the first digit of the new string; Then append it together<CR/></SourceText>
	<TargetText> the first digit of the new string; Then append it together<CR/></TargetText>
	<Comment>com.fmi.calculation.text. the first digit of the new string; Then append it together_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.0DD88742AA6E84211B04D35DD5AE3ABB</StringID>
	<SourceText> ],<CR/><TAB/>  defaultColor: &apos;</SourceText>
	<TargetText> ],<CR/><TAB/>  defaultColor: &apos;</TargetText>
	<Comment>com.fmi.calculation.text. ],_CR/__TAB/_  defaultColor: &apos;</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.0E49F2A6271154572D3DF2B5C5E98514</StringID>
	<SourceText>0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ</SourceText>
	<TargetText>0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ</TargetText>
	<Comment>com.fmi.calculation.text.0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.0E950BD4DF2C2E4EF1953BCC6662B1F5</StringID>
	<SourceText> Return either the base10Int from above (if base10), use it to calculate<CR/></SourceText>
	<TargetText> Return either the base10Int from above (if base10), use it to calculate<CR/></TargetText>
	<Comment>com.fmi.calculation.text. Return either the base10Int from above (if base10), use it to calculate_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.10B6872B31C7ADDF21F605193E6FDD3D</StringID>
	<SourceText> Clamp values to ensure they stay within RGB range<CR/></SourceText>
	<TargetText> Clamp values to ensure they stay within RGB range<CR/></TargetText>
	<Comment>com.fmi.calculation.text. Clamp values to ensure they stay within RGB range_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.11858688A382F5A96861ADFECBFC6280</StringID>
	<SourceText> Returns a 0 for dark and 1 for bright<CR/></SourceText>
	<TargetText> Returns a 0 for dark and 1 for bright<CR/></TargetText>
	<Comment>com.fmi.calculation.text. Returns a 0 for dark and 1 for bright_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.142987D645B90AB7FD36F2997CB7BA7F</StringID>
	<SourceText>coloris.isVar</SourceText>
	<TargetText>coloris.isVar</TargetText>
	<Comment>com.fmi.calculation.text.coloris.isVar</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.15E276FA83EC751B3D7C66A42A522313</StringID>
	<SourceText>&apos;#923296&apos;,&apos;#F0419F&apos;,&apos;#D82E42&apos;,&apos;#F08128&apos;,&apos;#F9C933&apos;,&apos;#68BE48&apos;, <CR/><TAB/></SourceText>
	<TargetText>&apos;#923296&apos;,&apos;#F0419F&apos;,&apos;#D82E42&apos;,&apos;#F08128&apos;,&apos;#F9C933&apos;,&apos;#68BE48&apos;, <CR/><TAB/></TargetText>
	<Comment>com.fmi.calculation.text.&apos;#923296&apos;,&apos;#F0419F&apos;,&apos;#D82E42&apos;,&apos;#F08128&apos;,&apos;#F9C933&apos;,&apos;#68BE48&apos;, _CR/__TAB/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.16874EB027D63C689FF95B9A1749B886</StringID>
	<SourceText> Based on https://github.com/mdbassit/Coloris<CR/></SourceText>
	<TargetText> Based on https://github.com/mdbassit/Coloris<CR/></TargetText>
	<Comment>com.fmi.calculation.text. Based on https://github.com/mdbassit/Coloris_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.1815E2938B86A053315BC34E9E19CCFC</StringID>
	<SourceText> Parameters : color ; tint ; output<CR/></SourceText>
	<TargetText> Parameters : color ; tint ; output<CR/></TargetText>
	<Comment>com.fmi.calculation.text. Parameters : color ; tint ; output_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.1997E92D51423E2B581D99AABE45588D</StringID>
	<SourceText>&apos;,<CR/><TAB/>  onChange: function onChange(color) {<CR/><TAB/><TAB/>  console.log(color);<CR/><TAB/><TAB/>  FileMaker.PerformScriptWithOption(&apos;</SourceText>
	<TargetText>&apos;,<CR/><TAB/>  onChange: function onChange(color) {<CR/><TAB/><TAB/>  console.log(color);<CR/><TAB/><TAB/>  FileMaker.PerformScriptWithOption(&apos;</TargetText>
	<Comment>com.fmi.calculation.text.&apos;,_CR/__TAB/_  onChange: function onChange(color) {_CR/__TAB/__TAB/_  console.log(color);_CR/__TAB/__TAB/_  FileMaker.PerformScriptWithOption(&apos;</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.19E9B241AE6E00C558801104FC01DB53</StringID>
	<SourceText>E</SourceText>
	<TargetText>E</TargetText>
	<Comment>com.fmi.calculation.text.E</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.1B759226EB6991D1214E639EA673D087</StringID>
	<SourceText>?</SourceText>
	<TargetText>?</TargetText>
	<Comment>com.fmi.calculation.text.?</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.1D109EB939AA51E01A32514598010B85</StringID>
	<SourceText> Return the base10Int from above if the target base is 10.<CR/></SourceText>
	<TargetText> Return the base10Int from above if the target base is 10.<CR/></TargetText>
	<Comment>com.fmi.calculation.text. Return the base10Int from above if the target base is 10._CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.21CDFC9EA84D0C5B380B52B942309989</StringID>
	<SourceText> )</SourceText>
	<TargetText> )</TargetText>
	<Comment>com.fmi.calculation.text. )</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.2201D9E73D631475C9B3BBB91B06C7B1</StringID>
	<SourceText> TargetScript is the script set to run and receive the picked colour. The colour can be picked by the scriptParameter and processed as needed.<CR/></SourceText>
	<TargetText> TargetScript is the script set to run and receive the picked colour. The colour can be picked by the scriptParameter and processed as needed.<CR/></TargetText>
	<Comment>com.fmi.calculation.text. TargetScript is the script set to run and receive the picked colour. The colour can be picked by the scriptParameter and processed as needed._CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.237D17526608C5AC4967DBFFAA2937E7</StringID>
	<SourceText> GitHub : https://github.com/roxytheman/fmCustomFunctions/blob/6ccc948c5a8e22dc2347501e6cbfdd66eb674507/functions/colorTint.fmfn<CR/></SourceText>
	<TargetText> GitHub : https://github.com/roxytheman/fmCustomFunctions/blob/6ccc948c5a8e22dc2347501e6cbfdd66eb674507/functions/colorTint.fmfn<CR/></TargetText>
	<Comment>com.fmi.calculation.text. GitHub : https://github.com/roxytheman/fmCustomFunctions/blob/6ccc948c5a8e22dc2347501e6cbfdd66eb674507/functions/colorTint.fmfn_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.23C755A5FEAF1C679D94D52C45E198DD</StringID>
	<SourceText>C</SourceText>
	<TargetText>C</TargetText>
	<Comment>com.fmi.calculation.text.C</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.24666CFC65C326B32EC00321A6EBD005</StringID>
	<SourceText> BD Link : https://www.briandunning.com/cf/2781<CR/></SourceText>
	<TargetText> BD Link : https://www.briandunning.com/cf/2781<CR/></TargetText>
	<Comment>com.fmi.calculation.text. BD Link : https://www.briandunning.com/cf/2781_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.24A7C6D8D47B62406FFA3A5D72489221</StringID>
	<SourceText> GitHub : https://github.com/roxytheman/fmCustomFunctions/blob/00f40c04c1567a5d05f79ce246c92d25200cf7e7/functions/colorContrast<CR/></SourceText>
	<TargetText> GitHub : https://github.com/roxytheman/fmCustomFunctions/blob/00f40c04c1567a5d05f79ce246c92d25200cf7e7/functions/colorContrast<CR/></TargetText>
	<Comment>com.fmi.calculation.text. GitHub : https://github.com/roxytheman/fmCustomFunctions/blob/00f40c04c1567a5d05f79ce246c92d25200cf7e7/functions/colorContrast_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.25A96E906A13BFC6F36D32EFB7A7C1F2</StringID>
	<SourceText> Return a 0 value if  the string represents 0;<CR/></SourceText>
	<TargetText> Return a 0 value if  the string represents 0;<CR/></TargetText>
	<Comment>com.fmi.calculation.text. Return a 0 value if  the string represents 0;_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.28F8169ED373E8209B80169D1387B9E0</StringID>
	<SourceText> target script to send selected colour to<CR/></SourceText>
	<TargetText> target script to send selected colour to<CR/></TargetText>
	<Comment>com.fmi.calculation.text. target script to send selected colour to_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.293226EB62EDA3AADEEA21AF61E450F1</StringID>
	<SourceText> BD Link : https://www.briandunning.com/cf/2782<CR/></SourceText>
	<TargetText> BD Link : https://www.briandunning.com/cf/2782<CR/></TargetText>
	<Comment>com.fmi.calculation.text. BD Link : https://www.briandunning.com/cf/2782_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.2A8AC8A06BC451972C7A176472820F70</StringID>
	<SourceText> are too large to deal with reliably.<CR/></SourceText>
	<TargetText> are too large to deal with reliably.<CR/></TargetText>
	<Comment>com.fmi.calculation.text. are too large to deal with reliably._CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.2B4B914F4072CFB4FFDE52474381F818</StringID>
	<SourceText> If the string is not a number then calculate the number representing<CR/></SourceText>
	<TargetText> If the string is not a number then calculate the number representing<CR/></TargetText>
	<Comment>com.fmi.calculation.text. If the string is not a number then calculate the number representing_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.2BCF565443EC017EDFB24B0B6F39F20C</StringID>
	<SourceText>(function (window, document, Math, undefined) { var ctx = document.createElement(&apos;canvas&apos;).getContext(&apos;2d&apos;); var currentColor = { r: 0, g: 0, b: 0, h: 0, s: 0, v: 0, a: 1 }; var container, picker, colorArea, colorAreaDims, colorMarker, colorPreview, colorValue, clearButton, closeButton, hueSlider, hueMarker, alphaSlider, alphaMarker, currentEl, currentFormat, oldColor, keyboardNav;  var settings = { el: &apos;[data-coloris]&apos;, parent: &apos;body&apos;, theme: &apos;default&apos;, themeMode: &apos;light&apos;, rtl: false, wrap: true, margin: 2, format: &apos;hex&apos;, formatToggle: false, swatches: [], swatchesOnly: false, alpha: true, forceAlpha: false, focusInput: true, selectInput: false, inline: false, defaultColor: &apos;#000000&apos;, clearButton: false, clearLabel: &apos;Clear&apos;, closeButton: false, closeLabel: &apos;Close&apos;, onChange: function onChange() {return undefined;}, a11y: { open: &apos;Open color picker&apos;, close: &apos;Close color picker&apos;, clear: &apos;Clear the selected color&apos;, marker: &apos;Saturation: {s}. Brightness: {v}.&apos;, hueSlider: &apos;Hue slider&apos;, alphaSlider: &apos;Opacity slider&apos;, input: &apos;Color value field&apos;, format: &apos;Color format&apos;, swatch: &apos;Color swatch&apos;, instruction: &apos;Saturation and brightness selector. Use up, down, left and right arrow keys to select.&apos; } };   var instances = {}; var currentInstanceId = &apos;&apos;; var defaultInstance = {}; var hasInstance = false;  function configure(options) { if (typeof options !== &apos;object&apos;) { return; } for (var key in options) { switch (key) { case &apos;el&apos;: bindFields(options.el); if (options.wrap !== false) { wrapFields(options.el); } break; case &apos;parent&apos;: container = document.querySelector(options.parent); if (container) { container.appendChild(picker); settings.parent = options.parent;  if (container === document.body) { container = undefined; } } break; case &apos;themeMode&apos;: settings.themeMode = options.themeMode; if (options.themeMode === &apos;auto&apos; &amp;&amp; window.matchMedia &amp;&amp; window.matchMedia(&apos;(prefers-color-scheme: dark)&apos;).matches) { settings.themeMode = &apos;dark&apos;; }  case &apos;theme&apos;: if (options.theme) { settings.theme = options.theme; }  picker.className = \&quot;clr-picker clr-\&quot; + settings.theme + \&quot; clr-\&quot; + settings.themeMode;  if (settings.inline) { updatePickerPosition(); } break; case &apos;rtl&apos;: settings.rtl = !!options.rtl; document.querySelectorAll(&apos;.clr-field&apos;).forEach(function (field) {return field.classList.toggle(&apos;clr-rtl&apos;, settings.rtl);}); break; case &apos;margin&apos;: options.margin *= 1; settings.margin = !isNaN(options.margin) ? options.margin : settings.margin; break; case &apos;wrap&apos;: if (options.el &amp;&amp; options.wrap) { wrapFields(options.el); } break; case &apos;formatToggle&apos;: settings.formatToggle = !!options.formatToggle; getEl(&apos;clr-format&apos;).style.display = settings.formatToggle ? &apos;block&apos; : &apos;none&apos;; if (settings.formatToggle) { settings.format = &apos;auto&apos;; } break; case &apos;swatches&apos;: if (Array.isArray(options.swatches)) {(function () { var swatches = []; options.swatches.forEach(function (swatch, i) { swatches.push(\&quot;&lt;button type=\\\&quot;button\\\&quot; id=\\\&quot;clr-swatch-\&quot; + i + \&quot;\\\&quot; aria-labelledby=\\\&quot;clr-swatch-label clr-swatch-\&quot; + i + \&quot;\\\&quot; style=\\\&quot;color: \&quot; + swatch + \&quot;;\\\&quot;&gt;\&quot; + swatch + \&quot;&lt;/button&gt;\&quot;); }); getEl(&apos;clr-swatches&apos;).innerHTML = swatches.length ? \&quot;&lt;div&gt;\&quot; + swatches.join(&apos;&apos;) + \&quot;&lt;/div&gt;\&quot; : &apos;&apos;; settings.swatches = options.swatches.slice();})(); } break; case &apos;swatchesOnly&apos;: settings.swatchesOnly = !!options.swatchesOnly; picker.setAttribute(&apos;data-minimal&apos;, settings.swatchesOnly); break; case &apos;alpha&apos;: settings.alpha = !!options.alpha; picker.setAttribute(&apos;data-alpha&apos;, settings.alpha); break; case &apos;inline&apos;: settings.inline = !!options.inline; picker.setAttribute(&apos;data-inline&apos;, settings.inline); if (settings.inline) { var defaultColor = options.defaultColor || settings.defaultColor; currentFormat = getColorFormatFromStr(defaultColor); updatePickerPosition(); setColorFromStr(defaultColor); } break; case &apos;clearButton&apos;:  if (typeof options.clearButton === &apos;object&apos;) { if (options.clearButton.label) { settings.clearLabel = options.clearButton.label; clearButton.innerHTML = settings.clearLabel; } options.clearButton = options.clearButton.show; } settings.clearButton = !!options.clearButton; clearButton.style.display = settings.clearButton ? &apos;block&apos; : &apos;none&apos;; break; case &apos;clearLabel&apos;: settings.clearLabel = options.clearLabel; clearButton.innerHTML = settings.clearLabel; break; case &apos;closeButton&apos;: settings.closeButton = !!options.closeButton; if (settings.closeButton) { picker.insertBefore(closeButton, colorPreview); } else { colorPreview.appendChild(closeButton); } break; case &apos;closeLabel&apos;: settings.closeLabel = options.closeLabel; closeButton.innerHTML = settings.closeLabel; break; case &apos;a11y&apos;: var labels = options.a11y; var update = false; if (typeof labels === &apos;object&apos;) { for (var label in labels) { if (labels[label] &amp;&amp; settings.a11y[label]) { settings.a11y[label] = labels[label]; update = true; } } } if (update) { var openLabel = getEl(&apos;clr-open-label&apos;); var swatchLabel = getEl(&apos;clr-swatch-label&apos;); openLabel.innerHTML = settings.a11y.open; swatchLabel.innerHTML = settings.a11y.swatch; closeButton.setAttribute(&apos;aria-label&apos;, settings.a11y.close); clearButton.setAttribute(&apos;aria-label&apos;, settings.a11y.clear); hueSlider.setAttribute(&apos;aria-label&apos;, settings.a11y.hueSlider); alphaSlider.setAttribute(&apos;aria-label&apos;, settings.a11y.alphaSlider); colorValue.setAttribute(&apos;aria-label&apos;, settings.a11y.input); colorArea.setAttribute(&apos;aria-label&apos;, settings.a11y.instruction); } break; default: settings[key] = options[key];} } }  function setVirtualInstance(selector, options) { if (typeof selector === &apos;string&apos; &amp;&amp; typeof options === &apos;object&apos;) { instances[selector] = options; hasInstance = true; } }  function removeVirtualInstance(selector) { delete instances[selector]; if (Object.keys(instances).length === 0) { hasInstance = false; if (selector === currentInstanceId) { resetVirtualInstance(); } } }  function attachVirtualInstance(element) { if (hasInstance) {  var unsupportedOptions = [&apos;el&apos;, &apos;wrap&apos;, &apos;rtl&apos;, &apos;inline&apos;, &apos;defaultColor&apos;, &apos;a11y&apos;];var _loop = function _loop( selector) { var options = instances[selector];  if (element.matches(selector)) { currentInstanceId = selector; defaultInstance = {};  unsupportedOptions.forEach(function (option) {return delete options[option];});  for (var option in options) { defaultInstance[option] = Array.isArray(settings[option]) ? settings[option].slice() : settings[option]; }  configure(options); return \&quot;break\&quot;; }};for (var selector in instances) {var _ret = _loop(selector);if (_ret === \&quot;break\&quot;) break; } } } /** * Revert any per-instance options that were previously applied. */ function resetVirtualInstance() { if (Object.keys(defaultInstance).length &gt; 0) { configure(defaultInstance); currentInstanceId = &apos;&apos;; defaultInstance = {}; } } /** * Bind the color picker to input fields that match the selector. * @param {string} selector One or more selectors pointing to input fields. */ function bindFields(selector) { /* Show the color picker on click on the input fields that match the selector */ addListener(document, &apos;click&apos;, selector, function (event) { /* Skip if inline mode is in use */ if (settings.inline) { return; } /* Apply any per-instance options first */ attachVirtualInstance(event.target); currentEl = event.target; oldColor = currentEl.value; currentFormat = getColorFormatFromStr(oldColor); picker.classList.add(&apos;clr-open&apos;); updatePickerPosition(); setColorFromStr(oldColor); if (settings.focusInput || settings.selectInput) { colorValue.focus({ preventScroll: true }); } if (settings.selectInput) { colorValue.select(); } /* Always focus the first element when using keyboard navigation */ if (keyboardNav || settings.swatchesOnly) { getFocusableElements().shift().focus(); } /* Trigger an \&quot;open\&quot; event */ currentEl.dispatchEvent(new Event(&apos;open&apos;, { bubbles: true })); }); /* Update the color preview of the input fields that match the selector */ addListener(document, &apos;input&apos;, selector, function (event) { var parent = event.target.parentNode; /* Only update the preview if the field has been previously wrapped */ if (parent.classList.contains(&apos;clr-field&apos;)) { parent.style.color = event.target.value; } }); } /** * Update the color picker&apos;s position and the color gradient&apos;s offset */ function updatePickerPosition() { var parent = container; var scrollY = window.scrollY; var pickerWidth = picker.offsetWidth; var pickerHeight = picker.offsetHeight; var reposition = { left: false, top: false }; var parentStyle, parentMarginTop, parentBorderTop; var offset = { x: 0, y: 0 }; if (parent) { parentStyle = window.getComputedStyle(parent); parentMarginTop = parseFloat(parentStyle.marginTop); parentBorderTop = parseFloat(parentStyle.borderTopWidth); offset = parent.getBoundingClientRect(); offset.y += parentBorderTop + scrollY; } if (!settings.inline) { var coords = currentEl.getBoundingClientRect(); var left = coords.x; var top = scrollY + coords.y + coords.height + settings.margin; /* If the color picker is inside a custom container */ /* set the position relative to it */ if (parent) { left -= offset.x; top -= offset.y; if (left + pickerWidth &gt; parent.clientWidth) { left += coords.width - pickerWidth; reposition.left = true; } if (top + pickerHeight &gt; parent.clientHeight - parentMarginTop) { if (pickerHeight + settings.margin &lt;= coords.top - (offset.y - scrollY)) { top -= coords.height + pickerHeight + settings.margin * 2; reposition.top = true; } } top += parent.scrollTop; /* Otherwise set the position relative to the whole document */ } else { if (left + pickerWidth &gt; document.documentElement.clientWidth) { left += coords.width - pickerWidth; reposition.left = true; } if (top + pickerHeight - scrollY &gt; document.documentElement.clientHeight) { if (pickerHeight + settings.margin &lt;= coords.top) { top = scrollY + coords.y - pickerHeight - settings.margin; reposition.top = true; } } } picker.classList.toggle(&apos;clr-left&apos;, reposition.left); picker.classList.toggle(&apos;clr-top&apos;, reposition.top); picker.style.left = left + \&quot;px\&quot;; picker.style.top = top + \&quot;px\&quot;; offset.x += picker.offsetLeft; offset.y += picker.offsetTop; } colorAreaDims = { width: colorArea.offsetWidth, height: colorArea.offsetHeight, x: colorArea.offsetLeft + offset.x, y: colorArea.offsetTop + offset.y }; } /** * Wrap the linked input fields in a div that adds a color preview. * @param {string} selector One or more selectors pointing to input fields. */ function wrapFields(selector) { document.querySelectorAll(selector).forEach(function (field) { var parentNode = field.parentNode; if (!parentNode.classList.contains(&apos;clr-field&apos;)) { var wrapper = document.createElement(&apos;div&apos;); var classes = &apos;clr-field&apos;; if (settings.rtl || field.classList.contains(&apos;clr-rtl&apos;)) { classes += &apos; clr-rtl&apos;; } wrapper.innerHTML = \&quot;&lt;button type=\\\&quot;button\\\&quot; aria-labelledby=\\\&quot;clr-open-label\\\&quot;&gt;&lt;/button&gt;\&quot;; parentNode.insertBefore(wrapper, field); wrapper.setAttribute(&apos;class&apos;, classes); wrapper.style.color = field.value; wrapper.appendChild(field); } }); } /** * Close the color picker. * @param {boolean} [revert] If true, revert the color to the original value. */ function closePicker(revert) { if (currentEl &amp;&amp; !settings.inline) { var prevEl = currentEl; /* Revert the color to the original value if needed */ if (revert) { /* This will prevent the \&quot;change\&quot; event on the colorValue input to execute its handler */ currentEl = undefined; if (oldColor !== prevEl.value) { prevEl.value = oldColor; /* Trigger an \&quot;input\&quot; event to force update the thumbnail next to the input field */ prevEl.dispatchEvent(new Event(&apos;input&apos;, { bubbles: true })); } } /* Trigger a \&quot;change\&quot; event if needed */ setTimeout(function () {/* Add this to the end of the event loop */ if (oldColor !== prevEl.value) { prevEl.dispatchEvent(new Event(&apos;change&apos;, { bubbles: true })); } }); /* Hide the picker dialog */ picker.classList.remove(&apos;clr-open&apos;); /* Reset any previously set per-instance options */ if (hasInstance) { resetVirtualInstance(); } /* Trigger a \&quot;close\&quot; event */ prevEl.dispatchEvent(new Event(&apos;close&apos;, { bubbles: true })); if (settings.focusInput) { prevEl.focus({ preventScroll: true }); } /* This essentially marks the picker as closed */ currentEl = undefined; } } /** * Set the active color from a string. * @param {string} str String representing a color. */ function setColorFromStr(str) { var rgba = strToRGBA(str); var hsva = RGBAtoHSVA(rgba); updateMarkerA11yLabel(hsva.s, hsva.v); updateColor(rgba, hsva); /* Update the UI */ hueSlider.value = hsva.h; picker.style.color = \&quot;hsl(\&quot; + hsva.h + \&quot;, 100%, 50%)\&quot;; hueMarker.style.left = hsva.h / 360 * 100 + \&quot;%\&quot;; colorMarker.style.left = colorAreaDims.width * hsva.s / 100 + \&quot;px\&quot;; colorMarker.style.top = colorAreaDims.height - colorAreaDims.height * hsva.v / 100 + \&quot;px\&quot;; alphaSlider.value = hsva.a * 100; alphaMarker.style.left = hsva.a * 100 + \&quot;%\&quot;; } /** * Guess the color format from a string. * @param {string} str String representing a color. * @return {string} The color format. */ function getColorFormatFromStr(str) { var format = str.substring(0, 3).toLowerCase(); if (format === &apos;rgb&apos; || format === &apos;hsl&apos;) { return format; } return &apos;hex&apos;; } /** * Copy the active color to the linked input field. * @param {number} [color] Color value to override the active color. */ function pickColor(color) { color = color !== undefined ? color : colorValue.value; if (currentEl) { currentEl.value = color; currentEl.dispatchEvent(new Event(&apos;input&apos;, { bubbles: true })); } if (settings.onChange) { settings.onChange.call(window, color, currentEl); } document.dispatchEvent(new CustomEvent(&apos;coloris:pick&apos;, { detail: { color: color, currentEl: currentEl } })); } /** * Set the active color based on a specific point in the color gradient. * @param {number} x Left position. * @param {number} y Top position. */ function setColorAtPosition(x, y) { var hsva = { h: hueSlider.value * 1, s: x / colorAreaDims.width * 100, v: 100 - y / colorAreaDims.height * 100, a: alphaSlider.value / 100 }; var rgba = HSVAtoRGBA(hsva); updateMarkerA11yLabel(hsva.s, hsva.v); updateColor(rgba, hsva); pickColor(); } /** * Update the color marker&apos;s accessibility label. * @param {number} saturation * @param {number} value */ function updateMarkerA11yLabel(saturation, value) { var label = settings.a11y.marker; saturation = saturation.toFixed(1) * 1; value = value.toFixed(1) * 1; label = label.replace(&apos;{s}&apos;, saturation); label = label.replace(&apos;{v}&apos;, value); colorMarker.setAttribute(&apos;aria-label&apos;, label); }   function getPointerPosition(event) { return { pageX: event.changedTouches ? event.changedTouches[0].pageX : event.pageX, pageY: event.changedTouches ? event.changedTouches[0].pageY : event.pageY }; }  function moveMarker(event) { var pointer = getPointerPosition(event); var x = pointer.pageX - colorAreaDims.x; var y = pointer.pageY - colorAreaDims.y; if (container) { y += container.scrollTop; } setMarkerPosition(x, y);  event.preventDefault(); event.stopPropagation(); }  function moveMarkerOnKeydown(offsetX, offsetY) { var x = colorMarker.style.left.replace(&apos;px&apos;, &apos;&apos;) * 1 + offsetX; var y = colorMarker.style.top.replace(&apos;px&apos;, &apos;&apos;) * 1 + offsetY; setMarkerPosition(x, y); }  function setMarkerPosition(x, y) {  x = x &lt; 0 ? 0 : x &gt; colorAreaDims.width ? colorAreaDims.width : x; y = y &lt; 0 ? 0 : y &gt; colorAreaDims.height ? colorAreaDims.height : y;  colorMarker.style.left = x + \&quot;px\&quot;; colorMarker.style.top = y + \&quot;px\&quot;;  setColorAtPosition(x, y);  colorMarker.focus(); }  function updateColor(rgba, hsva) {if (rgba === void 0) {rgba = {};}if (hsva === void 0) {hsva = {};} var format = settings.format; for (var key in rgba) { currentColor[key] = rgba[key]; } for (var _key in hsva) { currentColor[_key] = hsva[_key]; } var hex = RGBAToHex(currentColor); var opaqueHex = hex.substring(0, 7); colorMarker.style.color = opaqueHex; alphaMarker.parentNode.style.color = opaqueHex; alphaMarker.style.color = hex; colorPreview.style.color = hex; /* Force repaint the color and alpha gradients as a workaround for a Google Chrome bug */ colorArea.style.display = &apos;none&apos;; colorArea.offsetHeight; colorArea.style.display = &apos;&apos;; alphaMarker.nextElementSibling.style.display = &apos;none&apos;; alphaMarker.nextElementSibling.offsetHeight; alphaMarker.nextElementSibling.style.display = &apos;&apos;; if (format === &apos;mixed&apos;) { format = currentColor.a === 1 ? &apos;hex&apos; : &apos;rgb&apos;; } else if (format === &apos;auto&apos;) { format = currentFormat; } switch (format) { case &apos;hex&apos;: colorValue.value = hex; break; case &apos;rgb&apos;: colorValue.value = RGBAToStr(currentColor); break; case &apos;hsl&apos;: colorValue.value = HSLAToStr(HSVAtoHSLA(currentColor)); break;}  /* Select the current format in the format switcher */ document.querySelector(\&quot;.clr-format [value=\\\&quot;\&quot; + format + \&quot;\\\&quot;]\&quot;).checked = true; } /** * Set the hue when its slider is moved. */ function setHue() { var hue = hueSlider.value * 1; var x = colorMarker.style.left.replace(&apos;px&apos;, &apos;&apos;) * 1; var y = colorMarker.style.top.replace(&apos;px&apos;, &apos;&apos;) * 1; picker.style.color = \&quot;hsl(\&quot; + hue + \&quot;, 100%, 50%)\&quot;; hueMarker.style.left = hue / 360 * 100 + \&quot;%\&quot;; setColorAtPosition(x, y); } /** * Set the alpha when its slider is moved. */ function setAlpha() { var alpha = alphaSlider.value / 100; alphaMarker.style.left = alpha * 100 + \&quot;%\&quot;; updateColor({ a: alpha }); pickColor(); } /** * Convert HSVA to RGBA. * @param {object} hsva Hue, saturation, value and alpha values. * @return {object} Red, green, blue and alpha values. */ function HSVAtoRGBA(hsva) { var saturation = hsva.s / 100; var value = hsva.v / 100; var chroma = saturation * value; var hueBy60 = hsva.h / 60; var x = chroma * (1 - Math.abs(hueBy60 % 2 - 1)); var m = value - chroma; chroma = chroma + m; x = x + m; var index = Math.floor(hueBy60) % 6; var red = [chroma, x, m, m, x, chroma][index]; var green = [x, chroma, chroma, x, m, m][index]; var blue = [m, m, x, chroma, chroma, x][index]; return { r: Math.round(red * 255), g: Math.round(green * 255), b: Math.round(blue * 255), a: hsva.a }; } /** * Convert HSVA to HSLA. * @param {object} hsva Hue, saturation, value and alpha values. * @return {object} Hue, saturation, lightness and alpha values. */ function HSVAtoHSLA(hsva) { var value = hsva.v / 100; var lightness = value * (1 - hsva.s / 100 / 2); var saturation; if (lightness &gt; 0 &amp;&amp; lightness &lt; 1) { saturation = Math.round((value - lightness) / Math.min(lightness, 1 - lightness) * 100); } return { h: hsva.h, s: saturation || 0, l: Math.round(lightness * 100), a: hsva.a }; } /** * Convert RGBA to HSVA. * @param {object} rgba Red, green, blue and alpha values. * @return {object} Hue, saturation, value and alpha values. */ function RGBAtoHSVA(rgba) { var red = rgba.r / 255; var green = rgba.g / 255; var blue = rgba.b / 255; var xmax = Math.max(red, green, blue); var xmin = Math.min(red, green, blue); var chroma = xmax - xmin; var value = xmax; var hue = 0; var saturation = 0; if (chroma) { if (xmax === red) {hue = (green - blue) / chroma;} if (xmax === green) {hue = 2 + (blue - red) / chroma;} if (xmax === blue) {hue = 4 + (red - green) / chroma;} if (xmax) {saturation = chroma / xmax;} } hue = Math.floor(hue * 60); return { h: hue &lt; 0 ? hue + 360 : hue, s: Math.round(saturation * 100), v: Math.round(value * 100), a: rgba.a }; } /** * Parse a string to RGBA. * @param {string} str String representing a color. * @return {object} Red, green, blue and alpha values. */ function strToRGBA(str) { var regex = /^((rgba)|rgb)[\D]+([\d.]+)[\D]+([\d.]+)[\D]+([\d.]+)[\D]*?([\d.]+|$)/i; var match, rgba; /* Default to black for invalid color strings */ ctx.fillStyle = &apos;#000&apos;; /* Use canvas to convert the string to a valid color string */ ctx.fillStyle = str; match = regex.exec(ctx.fillStyle); if (match) { rgba = { r: match[3] * 1, g: match[4] * 1, b: match[5] * 1, a: match[6] * 1 };  /* Workaround to mitigate a Chromium bug where the alpha value is rounded incorrectly */ rgba.a = +rgba.a.toFixed(2); } else { match = ctx.fillStyle.replace(&apos;#&apos;, &apos;&apos;).match(/.{2}/g).map(function (h) {return parseInt(h, 16);}); rgba = { r: match[0], g: match[1], b: match[2], a: 1 }; } return rgba; } /** * Convert RGBA to Hex. * @param {object} rgba Red, green, blue and alpha values. * @return {string} Hex color string. */ function RGBAToHex(rgba) { var R = rgba.r.toString(16); var G = rgba.g.toString(16); var B = rgba.b.toString(16); var A = &apos;&apos;; if (rgba.r &lt; 16) { R = &apos;0&apos; + R; } if (rgba.g &lt; 16) { G = &apos;0&apos; + G; } if (rgba.b &lt; 16) { B = &apos;0&apos; + B; } if (settings.alpha &amp;&amp; (rgba.a &lt; 1 || settings.forceAlpha)) { var alpha = rgba.a * 255 | 0; A = alpha.toString(16); if (alpha &lt; 16) { A = &apos;0&apos; + A; } } return &apos;#&apos; + R + G + B + A; } /** * Convert RGBA values to a CSS rgb/rgba string. * @param {object} rgba Red, green, blue and alpha values. * @return {string} CSS color string. */ function RGBAToStr(rgba) { if (!settings.alpha || rgba.a === 1 &amp;&amp; !settings.forceAlpha) { return \&quot;rgb(\&quot; + rgba.r + \&quot;, \&quot; + rgba.g + \&quot;, \&quot; + rgba.b + \&quot;)\&quot;; } else { return \&quot;rgba(\&quot; + rgba.r + \&quot;, \&quot; + rgba.g + \&quot;, \&quot; + rgba.b + \&quot;, \&quot; + rgba.a + \&quot;)\&quot;; } } /** * Convert HSLA values to a CSS hsl/hsla string. * @param {object} hsla Hue, saturation, lightness and alpha values. * @return {string} CSS color string. */ function HSLAToStr(hsla) { if (!settings.alpha || hsla.a === 1 &amp;&amp; !settings.forceAlpha) { return \&quot;hsl(\&quot; + hsla.h + \&quot;, \&quot; + hsla.s + \&quot;%, \&quot; + hsla.l + \&quot;%)\&quot;; } else { return \&quot;hsla(\&quot; + hsla.h + \&quot;, \&quot; + hsla.s + \&quot;%, \&quot; + hsla.l + \&quot;%, \&quot; + hsla.a + \&quot;)\&quot;; } } /** * Init the color picker. */ function init() { /* Render the UI */ container = undefined; picker = document.createElement(&apos;div&apos;); picker.setAttribute(&apos;id&apos;, &apos;clr-picker&apos;); picker.className = &apos;clr-picker&apos;; picker.innerHTML = \&quot;&lt;input id=\\\&quot;clr-color-value\\\&quot; name=\\\&quot;clr-color-value\\\&quot; class=\\\&quot;clr-color\\\&quot; type=\\\&quot;text\\\&quot; value=\\\&quot;\\\&quot; spellcheck=\\\&quot;false\\\&quot; aria-label=\\\&quot;\&quot; + settings.a11y.input + \&quot;\\\&quot;&gt;\&quot; + (\&quot;&lt;div id=\\\&quot;clr-color-area\\\&quot; class=\\\&quot;clr-gradient\\\&quot; role=\\\&quot;application\\\&quot; aria-label=\\\&quot;\&quot; + settings.a11y.instruction + \&quot;\\\&quot;&gt;\&quot;) + &apos;&lt;div id=\&quot;clr-color-marker\&quot; class=\&quot;clr-marker\&quot; tabindex=\&quot;0\&quot;&gt;&lt;/div&gt;&apos; + &apos;&lt;/div&gt;&apos; + &apos;&lt;div class=\&quot;clr-hue\&quot;&gt;&apos; + (\&quot;&lt;input id=\\\&quot;clr-hue-slider\\\&quot; name=\\\&quot;clr-hue-slider\\\&quot; type=\\\&quot;range\\\&quot; min=\\\&quot;0\\\&quot; max=\\\&quot;360\\\&quot; step=\\\&quot;1\\\&quot; aria-label=\\\&quot;\&quot; + settings.a11y.hueSlider + \&quot;\\\&quot;&gt;\&quot;) + &apos;&lt;div id=\&quot;clr-hue-marker\&quot;&gt;&lt;/div&gt;&apos; + &apos;&lt;/div&gt;&apos; + &apos;&lt;div class=\&quot;clr-alpha\&quot;&gt;&apos; + (\&quot;&lt;input id=\\\&quot;clr-alpha-slider\\\&quot; name=\\\&quot;clr-alpha-slider\\\&quot; type=\\\&quot;range\\\&quot; min=\\\&quot;0\\\&quot; max=\\\&quot;100\\\&quot; step=\\\&quot;1\\\&quot; aria-label=\\\&quot;\&quot; + settings.a11y.alphaSlider + \&quot;\\\&quot;&gt;\&quot;) + &apos;&lt;div id=\&quot;clr-alpha-marker\&quot;&gt;&lt;/div&gt;&apos; + &apos;&lt;span&gt;&lt;/span&gt;&apos; + &apos;&lt;/div&gt;&apos; + &apos;&lt;div id=\&quot;clr-format\&quot; class=\&quot;clr-format\&quot;&gt;&apos; + &apos;&lt;fieldset class=\&quot;clr-segmented\&quot;&gt;&apos; + (\&quot;&lt;legend&gt;\&quot; + settings.a11y.format + \&quot;&lt;/legend&gt;\&quot;) + &apos;&lt;input id=\&quot;clr-f1\&quot; type=\&quot;radio\&quot; name=\&quot;clr-format\&quot; value=\&quot;hex\&quot;&gt;&apos; + &apos;&lt;label for=\&quot;clr-f1\&quot;&gt;Hex&lt;/label&gt;&apos; + &apos;&lt;input id=\&quot;clr-f2\&quot; type=\&quot;radio\&quot; name=\&quot;clr-format\&quot; value=\&quot;rgb\&quot;&gt;&apos; + &apos;&lt;label for=\&quot;clr-f2\&quot;&gt;RGB&lt;/label&gt;&apos; + &apos;&lt;input id=\&quot;clr-f3\&quot; type=\&quot;radio\&quot; name=\&quot;clr-format\&quot; value=\&quot;hsl\&quot;&gt;&apos; + &apos;&lt;label for=\&quot;clr-f3\&quot;&gt;HSL&lt;/label&gt;&apos; + &apos;&lt;span&gt;&lt;/span&gt;&apos; + &apos;&lt;/fieldset&gt;&apos; + &apos;&lt;/div&gt;&apos; + &apos;&lt;div id=\&quot;clr-swatches\&quot; class=\&quot;clr-swatches\&quot;&gt;&lt;/div&gt;&apos; + (\&quot;&lt;button type=\\\&quot;button\\\&quot; id=\\\&quot;clr-clear\\\&quot; class=\\\&quot;clr-clear\\\&quot; aria-label=\\\&quot;\&quot; + settings.a11y.clear + \&quot;\\\&quot;&gt;\&quot; + settings.clearLabel + \&quot;&lt;/button&gt;\&quot;) + &apos;&lt;div id=\&quot;clr-color-preview\&quot; class=\&quot;clr-preview\&quot;&gt;&apos; + (\&quot;&lt;button type=\\\&quot;button\\\&quot; id=\\\&quot;clr-close\\\&quot; class=\\\&quot;clr-close\\\&quot; aria-label=\\\&quot;\&quot; + settings.a11y.close + \&quot;\\\&quot;&gt;\&quot; + settings.closeLabel + \&quot;&lt;/button&gt;\&quot;) + &apos;&lt;/div&gt;&apos; + (\&quot;&lt;span id=\\\&quot;clr-open-label\\\&quot; hidden&gt;\&quot; + settings.a11y.open + \&quot;&lt;/span&gt;\&quot;) + (\&quot;&lt;span id=\\\&quot;clr-swatch-label\\\&quot; hidden&gt;\&quot; + settings.a11y.swatch + \&quot;&lt;/span&gt;\&quot;); /* Append the color picker to the DOM */ document.body.appendChild(picker); /* Reference the UI elements */ colorArea = getEl(&apos;clr-color-area&apos;); colorMarker = getEl(&apos;clr-color-marker&apos;); clearButton = getEl(&apos;clr-clear&apos;); closeButton = getEl(&apos;clr-close&apos;); colorPreview = getEl(&apos;clr-color-preview&apos;); colorValue = getEl(&apos;clr-color-value&apos;); hueSlider = getEl(&apos;clr-hue-slider&apos;); hueMarker = getEl(&apos;clr-hue-marker&apos;); alphaSlider = getEl(&apos;clr-alpha-slider&apos;); alphaMarker = getEl(&apos;clr-alpha-marker&apos;); /* Bind the picker to the default selector */ bindFields(settings.el); wrapFields(settings.el); addListener(picker, &apos;mousedown&apos;, function (event) { picker.classList.remove(&apos;clr-keyboard-nav&apos;); event.stopPropagation(); }); addListener(colorArea, &apos;mousedown&apos;, function (event) { addListener(document, &apos;mousemove&apos;, moveMarker); }); addListener(colorArea, &apos;touchstart&apos;, function (event) { document.addEventListener(&apos;touchmove&apos;, moveMarker, { passive: false }); }); addListener(colorMarker, &apos;mousedown&apos;, function (event) { addListener(document, &apos;mousemove&apos;, moveMarker); }); addListener(colorMarker, &apos;touchstart&apos;, function (event) { document.addEventListener(&apos;touchmove&apos;, moveMarker, { passive: false }); }); addListener(colorValue, &apos;change&apos;, function (event) { if (currentEl || settings.inline) { setColorFromStr(colorValue.value); pickColor(); } }); addListener(clearButton, &apos;click&apos;, function (event) { pickColor(&apos;&apos;); closePicker(); }); addListener(closeButton, &apos;click&apos;, function (event) { pickColor(); closePicker(); }); addListener(document, &apos;click&apos;, &apos;.clr-format input&apos;, function (event) { currentFormat = event.target.value; updateColor(); pickColor(); }); addListener(picker, &apos;click&apos;, &apos;.clr-swatches button&apos;, function (event) { setColorFromStr(event.target.textContent); pickColor(); if (settings.swatchesOnly) { closePicker(); } }); addListener(document, &apos;mouseup&apos;, function (event) { document.removeEventListener(&apos;mousemove&apos;, moveMarker); }); addListener(document, &apos;touchend&apos;, function (event) { document.removeEventListener(&apos;touchmove&apos;, moveMarker); }); addListener(document, &apos;mousedown&apos;, function (event) { keyboardNav = false; picker.classList.remove(&apos;clr-keyboard-nav&apos;); closePicker(); }); addListener(document, &apos;keydown&apos;, function (event) { var key = event.key; var target = event.target; var shiftKey = event.shiftKey; var navKeys = [&apos;Tab&apos;, &apos;ArrowUp&apos;, &apos;ArrowDown&apos;, &apos;ArrowLeft&apos;, &apos;ArrowRight&apos;]; if (key === &apos;Escape&apos;) { closePicker(true); /* Display focus rings when using the keyboard */ } else if (navKeys.includes(key)) { keyboardNav = true; picker.classList.add(&apos;clr-keyboard-nav&apos;); } /* Trap the focus within the color picker while it&apos;s open */ if (key === &apos;Tab&apos; &amp;&amp; target.matches(&apos;.clr-picker *&apos;)) { var focusables = getFocusableElements(); var firstFocusable = focusables.shift(); var lastFocusable = focusables.pop(); if (shiftKey &amp;&amp; target === firstFocusable) { lastFocusable.focus(); event.preventDefault(); } else if (!shiftKey &amp;&amp; target === lastFocusable) { firstFocusable.focus(); event.preventDefault(); } } }); addListener(document, &apos;click&apos;, &apos;.clr-field button&apos;, function (event) {  if (hasInstance) { resetVirtualInstance(); }  event.target.nextElementSibling.dispatchEvent(new Event(&apos;click&apos;, { bubbles: true })); }); addListener(colorMarker, &apos;keydown&apos;, function (event) { var movements = { ArrowUp: [0, -1], ArrowDown: [0, 1], ArrowLeft: [-1, 0], ArrowRight: [1, 0] };  if (Object.keys(movements).includes(event.key)) { moveMarkerOnKeydown.apply(void 0, movements[event.key]); event.preventDefault(); } }); addListener(colorArea, &apos;click&apos;, moveMarker); addListener(hueSlider, &apos;input&apos;, setHue); addListener(alphaSlider, &apos;input&apos;, setAlpha); }  function getFocusableElements() { var controls = Array.from(picker.querySelectorAll(&apos;input, button&apos;)); var focusables = controls.filter(function (node) {return !!node.offsetWidth;}); return focusables; }  function getEl(id) { return document.getElementById(id); }  function addListener(context, type, selector, fn) { var matches = Element.prototype.matches || Element.prototype.msMatchesSelector;  if (typeof selector === &apos;string&apos;) { context.addEventListener(type, function (event) { if (matches.call(event.target, selector)) { fn.call(event.target, event); } });   } else { fn = selector; context.addEventListener(type, fn); } }  function DOMReady(fn, args) { args = args !== undefined ? args : []; if (document.readyState !== &apos;loading&apos;) { fn.apply(void 0, args); } else { document.addEventListener(&apos;DOMContentLoaded&apos;, function () { fn.apply(void 0, args); }); } }  if (NodeList !== undefined &amp;&amp; NodeList.prototype &amp;&amp; !NodeList.prototype.forEach) { NodeList.prototype.forEach = Array.prototype.forEach; }  window.Coloris = function () { var methods = { set: configure, wrap: wrapFields, close: closePicker, setInstance: setVirtualInstance, removeInstance: removeVirtualInstance, updatePosition: updatePickerPosition };  function Coloris(options) { DOMReady(function () { if (options) { if (typeof options === &apos;string&apos;) { bindFields(options); } else { configure(options); } } }); }var _loop2 = function _loop2( key) { Coloris[key] = function () {for (var _len = arguments.length, args = new Array(_len), _key2 = 0; _key2 &lt; _len; _key2++) {args[_key2] = arguments[_key2];} DOMReady(methods[key], args); };};for (var key in methods) {_loop2(key); } return Coloris; }();  DOMReady(init); })(window, document, Math);</SourceText>
	<TargetText>(function (window, document, Math, undefined) { var ctx = document.createElement(&apos;canvas&apos;).getContext(&apos;2d&apos;); var currentColor = { r: 0, g: 0, b: 0, h: 0, s: 0, v: 0, a: 1 }; var container, picker, colorArea, colorAreaDims, colorMarker, colorPreview, colorValue, clearButton, closeButton, hueSlider, hueMarker, alphaSlider, alphaMarker, currentEl, currentFormat, oldColor, keyboardNav;  var settings = { el: &apos;[data-coloris]&apos;, parent: &apos;body&apos;, theme: &apos;default&apos;, themeMode: &apos;light&apos;, rtl: false, wrap: true, margin: 2, format: &apos;hex&apos;, formatToggle: false, swatches: [], swatchesOnly: false, alpha: true, forceAlpha: false, focusInput: true, selectInput: false, inline: false, defaultColor: &apos;#000000&apos;, clearButton: false, clearLabel: &apos;Clear&apos;, closeButton: false, closeLabel: &apos;Close&apos;, onChange: function onChange() {return undefined;}, a11y: { open: &apos;Open color picker&apos;, close: &apos;Close color picker&apos;, clear: &apos;Clear the selected color&apos;, marker: &apos;Saturation: {s}. Brightness: {v}.&apos;, hueSlider: &apos;Hue slider&apos;, alphaSlider: &apos;Opacity slider&apos;, input: &apos;Color value field&apos;, format: &apos;Color format&apos;, swatch: &apos;Color swatch&apos;, instruction: &apos;Saturation and brightness selector. Use up, down, left and right arrow keys to select.&apos; } };   var instances = {}; var currentInstanceId = &apos;&apos;; var defaultInstance = {}; var hasInstance = false;  function configure(options) { if (typeof options !== &apos;object&apos;) { return; } for (var key in options) { switch (key) { case &apos;el&apos;: bindFields(options.el); if (options.wrap !== false) { wrapFields(options.el); } break; case &apos;parent&apos;: container = document.querySelector(options.parent); if (container) { container.appendChild(picker); settings.parent = options.parent;  if (container === document.body) { container = undefined; } } break; case &apos;themeMode&apos;: settings.themeMode = options.themeMode; if (options.themeMode === &apos;auto&apos; &amp;&amp; window.matchMedia &amp;&amp; window.matchMedia(&apos;(prefers-color-scheme: dark)&apos;).matches) { settings.themeMode = &apos;dark&apos;; }  case &apos;theme&apos;: if (options.theme) { settings.theme = options.theme; }  picker.className = \&quot;clr-picker clr-\&quot; + settings.theme + \&quot; clr-\&quot; + settings.themeMode;  if (settings.inline) { updatePickerPosition(); } break; case &apos;rtl&apos;: settings.rtl = !!options.rtl; document.querySelectorAll(&apos;.clr-field&apos;).forEach(function (field) {return field.classList.toggle(&apos;clr-rtl&apos;, settings.rtl);}); break; case &apos;margin&apos;: options.margin *= 1; settings.margin = !isNaN(options.margin) ? options.margin : settings.margin; break; case &apos;wrap&apos;: if (options.el &amp;&amp; options.wrap) { wrapFields(options.el); } break; case &apos;formatToggle&apos;: settings.formatToggle = !!options.formatToggle; getEl(&apos;clr-format&apos;).style.display = settings.formatToggle ? &apos;block&apos; : &apos;none&apos;; if (settings.formatToggle) { settings.format = &apos;auto&apos;; } break; case &apos;swatches&apos;: if (Array.isArray(options.swatches)) {(function () { var swatches = []; options.swatches.forEach(function (swatch, i) { swatches.push(\&quot;&lt;button type=\\\&quot;button\\\&quot; id=\\\&quot;clr-swatch-\&quot; + i + \&quot;\\\&quot; aria-labelledby=\\\&quot;clr-swatch-label clr-swatch-\&quot; + i + \&quot;\\\&quot; style=\\\&quot;color: \&quot; + swatch + \&quot;;\\\&quot;&gt;\&quot; + swatch + \&quot;&lt;/button&gt;\&quot;); }); getEl(&apos;clr-swatches&apos;).innerHTML = swatches.length ? \&quot;&lt;div&gt;\&quot; + swatches.join(&apos;&apos;) + \&quot;&lt;/div&gt;\&quot; : &apos;&apos;; settings.swatches = options.swatches.slice();})(); } break; case &apos;swatchesOnly&apos;: settings.swatchesOnly = !!options.swatchesOnly; picker.setAttribute(&apos;data-minimal&apos;, settings.swatchesOnly); break; case &apos;alpha&apos;: settings.alpha = !!options.alpha; picker.setAttribute(&apos;data-alpha&apos;, settings.alpha); break; case &apos;inline&apos;: settings.inline = !!options.inline; picker.setAttribute(&apos;data-inline&apos;, settings.inline); if (settings.inline) { var defaultColor = options.defaultColor || settings.defaultColor; currentFormat = getColorFormatFromStr(defaultColor); updatePickerPosition(); setColorFromStr(defaultColor); } break; case &apos;clearButton&apos;:  if (typeof options.clearButton === &apos;object&apos;) { if (options.clearButton.label) { settings.clearLabel = options.clearButton.label; clearButton.innerHTML = settings.clearLabel; } options.clearButton = options.clearButton.show; } settings.clearButton = !!options.clearButton; clearButton.style.display = settings.clearButton ? &apos;block&apos; : &apos;none&apos;; break; case &apos;clearLabel&apos;: settings.clearLabel = options.clearLabel; clearButton.innerHTML = settings.clearLabel; break; case &apos;closeButton&apos;: settings.closeButton = !!options.closeButton; if (settings.closeButton) { picker.insertBefore(closeButton, colorPreview); } else { colorPreview.appendChild(closeButton); } break; case &apos;closeLabel&apos;: settings.closeLabel = options.closeLabel; closeButton.innerHTML = settings.closeLabel; break; case &apos;a11y&apos;: var labels = options.a11y; var update = false; if (typeof labels === &apos;object&apos;) { for (var label in labels) { if (labels[label] &amp;&amp; settings.a11y[label]) { settings.a11y[label] = labels[label]; update = true; } } } if (update) { var openLabel = getEl(&apos;clr-open-label&apos;); var swatchLabel = getEl(&apos;clr-swatch-label&apos;); openLabel.innerHTML = settings.a11y.open; swatchLabel.innerHTML = settings.a11y.swatch; closeButton.setAttribute(&apos;aria-label&apos;, settings.a11y.close); clearButton.setAttribute(&apos;aria-label&apos;, settings.a11y.clear); hueSlider.setAttribute(&apos;aria-label&apos;, settings.a11y.hueSlider); alphaSlider.setAttribute(&apos;aria-label&apos;, settings.a11y.alphaSlider); colorValue.setAttribute(&apos;aria-label&apos;, settings.a11y.input); colorArea.setAttribute(&apos;aria-label&apos;, settings.a11y.instruction); } break; default: settings[key] = options[key];} } }  function setVirtualInstance(selector, options) { if (typeof selector === &apos;string&apos; &amp;&amp; typeof options === &apos;object&apos;) { instances[selector] = options; hasInstance = true; } }  function removeVirtualInstance(selector) { delete instances[selector]; if (Object.keys(instances).length === 0) { hasInstance = false; if (selector === currentInstanceId) { resetVirtualInstance(); } } }  function attachVirtualInstance(element) { if (hasInstance) {  var unsupportedOptions = [&apos;el&apos;, &apos;wrap&apos;, &apos;rtl&apos;, &apos;inline&apos;, &apos;defaultColor&apos;, &apos;a11y&apos;];var _loop = function _loop( selector) { var options = instances[selector];  if (element.matches(selector)) { currentInstanceId = selector; defaultInstance = {};  unsupportedOptions.forEach(function (option) {return delete options[option];});  for (var option in options) { defaultInstance[option] = Array.isArray(settings[option]) ? settings[option].slice() : settings[option]; }  configure(options); return \&quot;break\&quot;; }};for (var selector in instances) {var _ret = _loop(selector);if (_ret === \&quot;break\&quot;) break; } } } /** * Revert any per-instance options that were previously applied. */ function resetVirtualInstance() { if (Object.keys(defaultInstance).length &gt; 0) { configure(defaultInstance); currentInstanceId = &apos;&apos;; defaultInstance = {}; } } /** * Bind the color picker to input fields that match the selector. * @param {string} selector One or more selectors pointing to input fields. */ function bindFields(selector) { /* Show the color picker on click on the input fields that match the selector */ addListener(document, &apos;click&apos;, selector, function (event) { /* Skip if inline mode is in use */ if (settings.inline) { return; } /* Apply any per-instance options first */ attachVirtualInstance(event.target); currentEl = event.target; oldColor = currentEl.value; currentFormat = getColorFormatFromStr(oldColor); picker.classList.add(&apos;clr-open&apos;); updatePickerPosition(); setColorFromStr(oldColor); if (settings.focusInput || settings.selectInput) { colorValue.focus({ preventScroll: true }); } if (settings.selectInput) { colorValue.select(); } /* Always focus the first element when using keyboard navigation */ if (keyboardNav || settings.swatchesOnly) { getFocusableElements().shift().focus(); } /* Trigger an \&quot;open\&quot; event */ currentEl.dispatchEvent(new Event(&apos;open&apos;, { bubbles: true })); }); /* Update the color preview of the input fields that match the selector */ addListener(document, &apos;input&apos;, selector, function (event) { var parent = event.target.parentNode; /* Only update the preview if the field has been previously wrapped */ if (parent.classList.contains(&apos;clr-field&apos;)) { parent.style.color = event.target.value; } }); } /** * Update the color picker&apos;s position and the color gradient&apos;s offset */ function updatePickerPosition() { var parent = container; var scrollY = window.scrollY; var pickerWidth = picker.offsetWidth; var pickerHeight = picker.offsetHeight; var reposition = { left: false, top: false }; var parentStyle, parentMarginTop, parentBorderTop; var offset = { x: 0, y: 0 }; if (parent) { parentStyle = window.getComputedStyle(parent); parentMarginTop = parseFloat(parentStyle.marginTop); parentBorderTop = parseFloat(parentStyle.borderTopWidth); offset = parent.getBoundingClientRect(); offset.y += parentBorderTop + scrollY; } if (!settings.inline) { var coords = currentEl.getBoundingClientRect(); var left = coords.x; var top = scrollY + coords.y + coords.height + settings.margin; /* If the color picker is inside a custom container */ /* set the position relative to it */ if (parent) { left -= offset.x; top -= offset.y; if (left + pickerWidth &gt; parent.clientWidth) { left += coords.width - pickerWidth; reposition.left = true; } if (top + pickerHeight &gt; parent.clientHeight - parentMarginTop) { if (pickerHeight + settings.margin &lt;= coords.top - (offset.y - scrollY)) { top -= coords.height + pickerHeight + settings.margin * 2; reposition.top = true; } } top += parent.scrollTop; /* Otherwise set the position relative to the whole document */ } else { if (left + pickerWidth &gt; document.documentElement.clientWidth) { left += coords.width - pickerWidth; reposition.left = true; } if (top + pickerHeight - scrollY &gt; document.documentElement.clientHeight) { if (pickerHeight + settings.margin &lt;= coords.top) { top = scrollY + coords.y - pickerHeight - settings.margin; reposition.top = true; } } } picker.classList.toggle(&apos;clr-left&apos;, reposition.left); picker.classList.toggle(&apos;clr-top&apos;, reposition.top); picker.style.left = left + \&quot;px\&quot;; picker.style.top = top + \&quot;px\&quot;; offset.x += picker.offsetLeft; offset.y += picker.offsetTop; } colorAreaDims = { width: colorArea.offsetWidth, height: colorArea.offsetHeight, x: colorArea.offsetLeft + offset.x, y: colorArea.offsetTop + offset.y }; } /** * Wrap the linked input fields in a div that adds a color preview. * @param {string} selector One or more selectors pointing to input fields. */ function wrapFields(selector) { document.querySelectorAll(selector).forEach(function (field) { var parentNode = field.parentNode; if (!parentNode.classList.contains(&apos;clr-field&apos;)) { var wrapper = document.createElement(&apos;div&apos;); var classes = &apos;clr-field&apos;; if (settings.rtl || field.classList.contains(&apos;clr-rtl&apos;)) { classes += &apos; clr-rtl&apos;; } wrapper.innerHTML = \&quot;&lt;button type=\\\&quot;button\\\&quot; aria-labelledby=\\\&quot;clr-open-label\\\&quot;&gt;&lt;/button&gt;\&quot;; parentNode.insertBefore(wrapper, field); wrapper.setAttribute(&apos;class&apos;, classes); wrapper.style.color = field.value; wrapper.appendChild(field); } }); } /** * Close the color picker. * @param {boolean} [revert] If true, revert the color to the original value. */ function closePicker(revert) { if (currentEl &amp;&amp; !settings.inline) { var prevEl = currentEl; /* Revert the color to the original value if needed */ if (revert) { /* This will prevent the \&quot;change\&quot; event on the colorValue input to execute its handler */ currentEl = undefined; if (oldColor !== prevEl.value) { prevEl.value = oldColor; /* Trigger an \&quot;input\&quot; event to force update the thumbnail next to the input field */ prevEl.dispatchEvent(new Event(&apos;input&apos;, { bubbles: true })); } } /* Trigger a \&quot;change\&quot; event if needed */ setTimeout(function () {/* Add this to the end of the event loop */ if (oldColor !== prevEl.value) { prevEl.dispatchEvent(new Event(&apos;change&apos;, { bubbles: true })); } }); /* Hide the picker dialog */ picker.classList.remove(&apos;clr-open&apos;); /* Reset any previously set per-instance options */ if (hasInstance) { resetVirtualInstance(); } /* Trigger a \&quot;close\&quot; event */ prevEl.dispatchEvent(new Event(&apos;close&apos;, { bubbles: true })); if (settings.focusInput) { prevEl.focus({ preventScroll: true }); } /* This essentially marks the picker as closed */ currentEl = undefined; } } /** * Set the active color from a string. * @param {string} str String representing a color. */ function setColorFromStr(str) { var rgba = strToRGBA(str); var hsva = RGBAtoHSVA(rgba); updateMarkerA11yLabel(hsva.s, hsva.v); updateColor(rgba, hsva); /* Update the UI */ hueSlider.value = hsva.h; picker.style.color = \&quot;hsl(\&quot; + hsva.h + \&quot;, 100%, 50%)\&quot;; hueMarker.style.left = hsva.h / 360 * 100 + \&quot;%\&quot;; colorMarker.style.left = colorAreaDims.width * hsva.s / 100 + \&quot;px\&quot;; colorMarker.style.top = colorAreaDims.height - colorAreaDims.height * hsva.v / 100 + \&quot;px\&quot;; alphaSlider.value = hsva.a * 100; alphaMarker.style.left = hsva.a * 100 + \&quot;%\&quot;; } /** * Guess the color format from a string. * @param {string} str String representing a color. * @return {string} The color format. */ function getColorFormatFromStr(str) { var format = str.substring(0, 3).toLowerCase(); if (format === &apos;rgb&apos; || format === &apos;hsl&apos;) { return format; } return &apos;hex&apos;; } /** * Copy the active color to the linked input field. * @param {number} [color] Color value to override the active color. */ function pickColor(color) { color = color !== undefined ? color : colorValue.value; if (currentEl) { currentEl.value = color; currentEl.dispatchEvent(new Event(&apos;input&apos;, { bubbles: true })); } if (settings.onChange) { settings.onChange.call(window, color, currentEl); } document.dispatchEvent(new CustomEvent(&apos;coloris:pick&apos;, { detail: { color: color, currentEl: currentEl } })); } /** * Set the active color based on a specific point in the color gradient. * @param {number} x Left position. * @param {number} y Top position. */ function setColorAtPosition(x, y) { var hsva = { h: hueSlider.value * 1, s: x / colorAreaDims.width * 100, v: 100 - y / colorAreaDims.height * 100, a: alphaSlider.value / 100 }; var rgba = HSVAtoRGBA(hsva); updateMarkerA11yLabel(hsva.s, hsva.v); updateColor(rgba, hsva); pickColor(); } /** * Update the color marker&apos;s accessibility label. * @param {number} saturation * @param {number} value */ function updateMarkerA11yLabel(saturation, value) { var label = settings.a11y.marker; saturation = saturation.toFixed(1) * 1; value = value.toFixed(1) * 1; label = label.replace(&apos;{s}&apos;, saturation); label = label.replace(&apos;{v}&apos;, value); colorMarker.setAttribute(&apos;aria-label&apos;, label); }   function getPointerPosition(event) { return { pageX: event.changedTouches ? event.changedTouches[0].pageX : event.pageX, pageY: event.changedTouches ? event.changedTouches[0].pageY : event.pageY }; }  function moveMarker(event) { var pointer = getPointerPosition(event); var x = pointer.pageX - colorAreaDims.x; var y = pointer.pageY - colorAreaDims.y; if (container) { y += container.scrollTop; } setMarkerPosition(x, y);  event.preventDefault(); event.stopPropagation(); }  function moveMarkerOnKeydown(offsetX, offsetY) { var x = colorMarker.style.left.replace(&apos;px&apos;, &apos;&apos;) * 1 + offsetX; var y = colorMarker.style.top.replace(&apos;px&apos;, &apos;&apos;) * 1 + offsetY; setMarkerPosition(x, y); }  function setMarkerPosition(x, y) {  x = x &lt; 0 ? 0 : x &gt; colorAreaDims.width ? colorAreaDims.width : x; y = y &lt; 0 ? 0 : y &gt; colorAreaDims.height ? colorAreaDims.height : y;  colorMarker.style.left = x + \&quot;px\&quot;; colorMarker.style.top = y + \&quot;px\&quot;;  setColorAtPosition(x, y);  colorMarker.focus(); }  function updateColor(rgba, hsva) {if (rgba === void 0) {rgba = {};}if (hsva === void 0) {hsva = {};} var format = settings.format; for (var key in rgba) { currentColor[key] = rgba[key]; } for (var _key in hsva) { currentColor[_key] = hsva[_key]; } var hex = RGBAToHex(currentColor); var opaqueHex = hex.substring(0, 7); colorMarker.style.color = opaqueHex; alphaMarker.parentNode.style.color = opaqueHex; alphaMarker.style.color = hex; colorPreview.style.color = hex; /* Force repaint the color and alpha gradients as a workaround for a Google Chrome bug */ colorArea.style.display = &apos;none&apos;; colorArea.offsetHeight; colorArea.style.display = &apos;&apos;; alphaMarker.nextElementSibling.style.display = &apos;none&apos;; alphaMarker.nextElementSibling.offsetHeight; alphaMarker.nextElementSibling.style.display = &apos;&apos;; if (format === &apos;mixed&apos;) { format = currentColor.a === 1 ? &apos;hex&apos; : &apos;rgb&apos;; } else if (format === &apos;auto&apos;) { format = currentFormat; } switch (format) { case &apos;hex&apos;: colorValue.value = hex; break; case &apos;rgb&apos;: colorValue.value = RGBAToStr(currentColor); break; case &apos;hsl&apos;: colorValue.value = HSLAToStr(HSVAtoHSLA(currentColor)); break;}  /* Select the current format in the format switcher */ document.querySelector(\&quot;.clr-format [value=\\\&quot;\&quot; + format + \&quot;\\\&quot;]\&quot;).checked = true; } /** * Set the hue when its slider is moved. */ function setHue() { var hue = hueSlider.value * 1; var x = colorMarker.style.left.replace(&apos;px&apos;, &apos;&apos;) * 1; var y = colorMarker.style.top.replace(&apos;px&apos;, &apos;&apos;) * 1; picker.style.color = \&quot;hsl(\&quot; + hue + \&quot;, 100%, 50%)\&quot;; hueMarker.style.left = hue / 360 * 100 + \&quot;%\&quot;; setColorAtPosition(x, y); } /** * Set the alpha when its slider is moved. */ function setAlpha() { var alpha = alphaSlider.value / 100; alphaMarker.style.left = alpha * 100 + \&quot;%\&quot;; updateColor({ a: alpha }); pickColor(); } /** * Convert HSVA to RGBA. * @param {object} hsva Hue, saturation, value and alpha values. * @return {object} Red, green, blue and alpha values. */ function HSVAtoRGBA(hsva) { var saturation = hsva.s / 100; var value = hsva.v / 100; var chroma = saturation * value; var hueBy60 = hsva.h / 60; var x = chroma * (1 - Math.abs(hueBy60 % 2 - 1)); var m = value - chroma; chroma = chroma + m; x = x + m; var index = Math.floor(hueBy60) % 6; var red = [chroma, x, m, m, x, chroma][index]; var green = [x, chroma, chroma, x, m, m][index]; var blue = [m, m, x, chroma, chroma, x][index]; return { r: Math.round(red * 255), g: Math.round(green * 255), b: Math.round(blue * 255), a: hsva.a }; } /** * Convert HSVA to HSLA. * @param {object} hsva Hue, saturation, value and alpha values. * @return {object} Hue, saturation, lightness and alpha values. */ function HSVAtoHSLA(hsva) { var value = hsva.v / 100; var lightness = value * (1 - hsva.s / 100 / 2); var saturation; if (lightness &gt; 0 &amp;&amp; lightness &lt; 1) { saturation = Math.round((value - lightness) / Math.min(lightness, 1 - lightness) * 100); } return { h: hsva.h, s: saturation || 0, l: Math.round(lightness * 100), a: hsva.a }; } /** * Convert RGBA to HSVA. * @param {object} rgba Red, green, blue and alpha values. * @return {object} Hue, saturation, value and alpha values. */ function RGBAtoHSVA(rgba) { var red = rgba.r / 255; var green = rgba.g / 255; var blue = rgba.b / 255; var xmax = Math.max(red, green, blue); var xmin = Math.min(red, green, blue); var chroma = xmax - xmin; var value = xmax; var hue = 0; var saturation = 0; if (chroma) { if (xmax === red) {hue = (green - blue) / chroma;} if (xmax === green) {hue = 2 + (blue - red) / chroma;} if (xmax === blue) {hue = 4 + (red - green) / chroma;} if (xmax) {saturation = chroma / xmax;} } hue = Math.floor(hue * 60); return { h: hue &lt; 0 ? hue + 360 : hue, s: Math.round(saturation * 100), v: Math.round(value * 100), a: rgba.a }; } /** * Parse a string to RGBA. * @param {string} str String representing a color. * @return {object} Red, green, blue and alpha values. */ function strToRGBA(str) { var regex = /^((rgba)|rgb)[\D]+([\d.]+)[\D]+([\d.]+)[\D]+([\d.]+)[\D]*?([\d.]+|$)/i; var match, rgba; /* Default to black for invalid color strings */ ctx.fillStyle = &apos;#000&apos;; /* Use canvas to convert the string to a valid color string */ ctx.fillStyle = str; match = regex.exec(ctx.fillStyle); if (match) { rgba = { r: match[3] * 1, g: match[4] * 1, b: match[5] * 1, a: match[6] * 1 };  /* Workaround to mitigate a Chromium bug where the alpha value is rounded incorrectly */ rgba.a = +rgba.a.toFixed(2); } else { match = ctx.fillStyle.replace(&apos;#&apos;, &apos;&apos;).match(/.{2}/g).map(function (h) {return parseInt(h, 16);}); rgba = { r: match[0], g: match[1], b: match[2], a: 1 }; } return rgba; } /** * Convert RGBA to Hex. * @param {object} rgba Red, green, blue and alpha values. * @return {string} Hex color string. */ function RGBAToHex(rgba) { var R = rgba.r.toString(16); var G = rgba.g.toString(16); var B = rgba.b.toString(16); var A = &apos;&apos;; if (rgba.r &lt; 16) { R = &apos;0&apos; + R; } if (rgba.g &lt; 16) { G = &apos;0&apos; + G; } if (rgba.b &lt; 16) { B = &apos;0&apos; + B; } if (settings.alpha &amp;&amp; (rgba.a &lt; 1 || settings.forceAlpha)) { var alpha = rgba.a * 255 | 0; A = alpha.toString(16); if (alpha &lt; 16) { A = &apos;0&apos; + A; } } return &apos;#&apos; + R + G + B + A; } /** * Convert RGBA values to a CSS rgb/rgba string. * @param {object} rgba Red, green, blue and alpha values. * @return {string} CSS color string. */ function RGBAToStr(rgba) { if (!settings.alpha || rgba.a === 1 &amp;&amp; !settings.forceAlpha) { return \&quot;rgb(\&quot; + rgba.r + \&quot;, \&quot; + rgba.g + \&quot;, \&quot; + rgba.b + \&quot;)\&quot;; } else { return \&quot;rgba(\&quot; + rgba.r + \&quot;, \&quot; + rgba.g + \&quot;, \&quot; + rgba.b + \&quot;, \&quot; + rgba.a + \&quot;)\&quot;; } } /** * Convert HSLA values to a CSS hsl/hsla string. * @param {object} hsla Hue, saturation, lightness and alpha values. * @return {string} CSS color string. */ function HSLAToStr(hsla) { if (!settings.alpha || hsla.a === 1 &amp;&amp; !settings.forceAlpha) { return \&quot;hsl(\&quot; + hsla.h + \&quot;, \&quot; + hsla.s + \&quot;%, \&quot; + hsla.l + \&quot;%)\&quot;; } else { return \&quot;hsla(\&quot; + hsla.h + \&quot;, \&quot; + hsla.s + \&quot;%, \&quot; + hsla.l + \&quot;%, \&quot; + hsla.a + \&quot;)\&quot;; } } /** * Init the color picker. */ function init() { /* Render the UI */ container = undefined; picker = document.createElement(&apos;div&apos;); picker.setAttribute(&apos;id&apos;, &apos;clr-picker&apos;); picker.className = &apos;clr-picker&apos;; picker.innerHTML = \&quot;&lt;input id=\\\&quot;clr-color-value\\\&quot; name=\\\&quot;clr-color-value\\\&quot; class=\\\&quot;clr-color\\\&quot; type=\\\&quot;text\\\&quot; value=\\\&quot;\\\&quot; spellcheck=\\\&quot;false\\\&quot; aria-label=\\\&quot;\&quot; + settings.a11y.input + \&quot;\\\&quot;&gt;\&quot; + (\&quot;&lt;div id=\\\&quot;clr-color-area\\\&quot; class=\\\&quot;clr-gradient\\\&quot; role=\\\&quot;application\\\&quot; aria-label=\\\&quot;\&quot; + settings.a11y.instruction + \&quot;\\\&quot;&gt;\&quot;) + &apos;&lt;div id=\&quot;clr-color-marker\&quot; class=\&quot;clr-marker\&quot; tabindex=\&quot;0\&quot;&gt;&lt;/div&gt;&apos; + &apos;&lt;/div&gt;&apos; + &apos;&lt;div class=\&quot;clr-hue\&quot;&gt;&apos; + (\&quot;&lt;input id=\\\&quot;clr-hue-slider\\\&quot; name=\\\&quot;clr-hue-slider\\\&quot; type=\\\&quot;range\\\&quot; min=\\\&quot;0\\\&quot; max=\\\&quot;360\\\&quot; step=\\\&quot;1\\\&quot; aria-label=\\\&quot;\&quot; + settings.a11y.hueSlider + \&quot;\\\&quot;&gt;\&quot;) + &apos;&lt;div id=\&quot;clr-hue-marker\&quot;&gt;&lt;/div&gt;&apos; + &apos;&lt;/div&gt;&apos; + &apos;&lt;div class=\&quot;clr-alpha\&quot;&gt;&apos; + (\&quot;&lt;input id=\\\&quot;clr-alpha-slider\\\&quot; name=\\\&quot;clr-alpha-slider\\\&quot; type=\\\&quot;range\\\&quot; min=\\\&quot;0\\\&quot; max=\\\&quot;100\\\&quot; step=\\\&quot;1\\\&quot; aria-label=\\\&quot;\&quot; + settings.a11y.alphaSlider + \&quot;\\\&quot;&gt;\&quot;) + &apos;&lt;div id=\&quot;clr-alpha-marker\&quot;&gt;&lt;/div&gt;&apos; + &apos;&lt;span&gt;&lt;/span&gt;&apos; + &apos;&lt;/div&gt;&apos; + &apos;&lt;div id=\&quot;clr-format\&quot; class=\&quot;clr-format\&quot;&gt;&apos; + &apos;&lt;fieldset class=\&quot;clr-segmented\&quot;&gt;&apos; + (\&quot;&lt;legend&gt;\&quot; + settings.a11y.format + \&quot;&lt;/legend&gt;\&quot;) + &apos;&lt;input id=\&quot;clr-f1\&quot; type=\&quot;radio\&quot; name=\&quot;clr-format\&quot; value=\&quot;hex\&quot;&gt;&apos; + &apos;&lt;label for=\&quot;clr-f1\&quot;&gt;Hex&lt;/label&gt;&apos; + &apos;&lt;input id=\&quot;clr-f2\&quot; type=\&quot;radio\&quot; name=\&quot;clr-format\&quot; value=\&quot;rgb\&quot;&gt;&apos; + &apos;&lt;label for=\&quot;clr-f2\&quot;&gt;RGB&lt;/label&gt;&apos; + &apos;&lt;input id=\&quot;clr-f3\&quot; type=\&quot;radio\&quot; name=\&quot;clr-format\&quot; value=\&quot;hsl\&quot;&gt;&apos; + &apos;&lt;label for=\&quot;clr-f3\&quot;&gt;HSL&lt;/label&gt;&apos; + &apos;&lt;span&gt;&lt;/span&gt;&apos; + &apos;&lt;/fieldset&gt;&apos; + &apos;&lt;/div&gt;&apos; + &apos;&lt;div id=\&quot;clr-swatches\&quot; class=\&quot;clr-swatches\&quot;&gt;&lt;/div&gt;&apos; + (\&quot;&lt;button type=\\\&quot;button\\\&quot; id=\\\&quot;clr-clear\\\&quot; class=\\\&quot;clr-clear\\\&quot; aria-label=\\\&quot;\&quot; + settings.a11y.clear + \&quot;\\\&quot;&gt;\&quot; + settings.clearLabel + \&quot;&lt;/button&gt;\&quot;) + &apos;&lt;div id=\&quot;clr-color-preview\&quot; class=\&quot;clr-preview\&quot;&gt;&apos; + (\&quot;&lt;button type=\\\&quot;button\\\&quot; id=\\\&quot;clr-close\\\&quot; class=\\\&quot;clr-close\\\&quot; aria-label=\\\&quot;\&quot; + settings.a11y.close + \&quot;\\\&quot;&gt;\&quot; + settings.closeLabel + \&quot;&lt;/button&gt;\&quot;) + &apos;&lt;/div&gt;&apos; + (\&quot;&lt;span id=\\\&quot;clr-open-label\\\&quot; hidden&gt;\&quot; + settings.a11y.open + \&quot;&lt;/span&gt;\&quot;) + (\&quot;&lt;span id=\\\&quot;clr-swatch-label\\\&quot; hidden&gt;\&quot; + settings.a11y.swatch + \&quot;&lt;/span&gt;\&quot;); /* Append the color picker to the DOM */ document.body.appendChild(picker); /* Reference the UI elements */ colorArea = getEl(&apos;clr-color-area&apos;); colorMarker = getEl(&apos;clr-color-marker&apos;); clearButton = getEl(&apos;clr-clear&apos;); closeButton = getEl(&apos;clr-close&apos;); colorPreview = getEl(&apos;clr-color-preview&apos;); colorValue = getEl(&apos;clr-color-value&apos;); hueSlider = getEl(&apos;clr-hue-slider&apos;); hueMarker = getEl(&apos;clr-hue-marker&apos;); alphaSlider = getEl(&apos;clr-alpha-slider&apos;); alphaMarker = getEl(&apos;clr-alpha-marker&apos;); /* Bind the picker to the default selector */ bindFields(settings.el); wrapFields(settings.el); addListener(picker, &apos;mousedown&apos;, function (event) { picker.classList.remove(&apos;clr-keyboard-nav&apos;); event.stopPropagation(); }); addListener(colorArea, &apos;mousedown&apos;, function (event) { addListener(document, &apos;mousemove&apos;, moveMarker); }); addListener(colorArea, &apos;touchstart&apos;, function (event) { document.addEventListener(&apos;touchmove&apos;, moveMarker, { passive: false }); }); addListener(colorMarker, &apos;mousedown&apos;, function (event) { addListener(document, &apos;mousemove&apos;, moveMarker); }); addListener(colorMarker, &apos;touchstart&apos;, function (event) { document.addEventListener(&apos;touchmove&apos;, moveMarker, { passive: false }); }); addListener(colorValue, &apos;change&apos;, function (event) { if (currentEl || settings.inline) { setColorFromStr(colorValue.value); pickColor(); } }); addListener(clearButton, &apos;click&apos;, function (event) { pickColor(&apos;&apos;); closePicker(); }); addListener(closeButton, &apos;click&apos;, function (event) { pickColor(); closePicker(); }); addListener(document, &apos;click&apos;, &apos;.clr-format input&apos;, function (event) { currentFormat = event.target.value; updateColor(); pickColor(); }); addListener(picker, &apos;click&apos;, &apos;.clr-swatches button&apos;, function (event) { setColorFromStr(event.target.textContent); pickColor(); if (settings.swatchesOnly) { closePicker(); } }); addListener(document, &apos;mouseup&apos;, function (event) { document.removeEventListener(&apos;mousemove&apos;, moveMarker); }); addListener(document, &apos;touchend&apos;, function (event) { document.removeEventListener(&apos;touchmove&apos;, moveMarker); }); addListener(document, &apos;mousedown&apos;, function (event) { keyboardNav = false; picker.classList.remove(&apos;clr-keyboard-nav&apos;); closePicker(); }); addListener(document, &apos;keydown&apos;, function (event) { var key = event.key; var target = event.target; var shiftKey = event.shiftKey; var navKeys = [&apos;Tab&apos;, &apos;ArrowUp&apos;, &apos;ArrowDown&apos;, &apos;ArrowLeft&apos;, &apos;ArrowRight&apos;]; if (key === &apos;Escape&apos;) { closePicker(true); /* Display focus rings when using the keyboard */ } else if (navKeys.includes(key)) { keyboardNav = true; picker.classList.add(&apos;clr-keyboard-nav&apos;); } /* Trap the focus within the color picker while it&apos;s open */ if (key === &apos;Tab&apos; &amp;&amp; target.matches(&apos;.clr-picker *&apos;)) { var focusables = getFocusableElements(); var firstFocusable = focusables.shift(); var lastFocusable = focusables.pop(); if (shiftKey &amp;&amp; target === firstFocusable) { lastFocusable.focus(); event.preventDefault(); } else if (!shiftKey &amp;&amp; target === lastFocusable) { firstFocusable.focus(); event.preventDefault(); } } }); addListener(document, &apos;click&apos;, &apos;.clr-field button&apos;, function (event) {  if (hasInstance) { resetVirtualInstance(); }  event.target.nextElementSibling.dispatchEvent(new Event(&apos;click&apos;, { bubbles: true })); }); addListener(colorMarker, &apos;keydown&apos;, function (event) { var movements = { ArrowUp: [0, -1], ArrowDown: [0, 1], ArrowLeft: [-1, 0], ArrowRight: [1, 0] };  if (Object.keys(movements).includes(event.key)) { moveMarkerOnKeydown.apply(void 0, movements[event.key]); event.preventDefault(); } }); addListener(colorArea, &apos;click&apos;, moveMarker); addListener(hueSlider, &apos;input&apos;, setHue); addListener(alphaSlider, &apos;input&apos;, setAlpha); }  function getFocusableElements() { var controls = Array.from(picker.querySelectorAll(&apos;input, button&apos;)); var focusables = controls.filter(function (node) {return !!node.offsetWidth;}); return focusables; }  function getEl(id) { return document.getElementById(id); }  function addListener(context, type, selector, fn) { var matches = Element.prototype.matches || Element.prototype.msMatchesSelector;  if (typeof selector === &apos;string&apos;) { context.addEventListener(type, function (event) { if (matches.call(event.target, selector)) { fn.call(event.target, event); } });   } else { fn = selector; context.addEventListener(type, fn); } }  function DOMReady(fn, args) { args = args !== undefined ? args : []; if (document.readyState !== &apos;loading&apos;) { fn.apply(void 0, args); } else { document.addEventListener(&apos;DOMContentLoaded&apos;, function () { fn.apply(void 0, args); }); } }  if (NodeList !== undefined &amp;&amp; NodeList.prototype &amp;&amp; !NodeList.prototype.forEach) { NodeList.prototype.forEach = Array.prototype.forEach; }  window.Coloris = function () { var methods = { set: configure, wrap: wrapFields, close: closePicker, setInstance: setVirtualInstance, removeInstance: removeVirtualInstance, updatePosition: updatePickerPosition };  function Coloris(options) { DOMReady(function () { if (options) { if (typeof options === &apos;string&apos;) { bindFields(options); } else { configure(options); } } }); }var _loop2 = function _loop2( key) { Coloris[key] = function () {for (var _len = arguments.length, args = new Array(_len), _key2 = 0; _key2 &lt; _len; _key2++) {args[_key2] = arguments[_key2];} DOMReady(methods[key], args); };};for (var key in methods) {_loop2(key); } return Coloris; }();  DOMReady(init); })(window, document, Math);</TargetText>
	<Comment>com.fmi.calculation.text.(function (window, document, Math, undefined) { var ctx = document.createElement(&apos;canvas&apos;).getContext(&apos;2d&apos;); var currentColor = { r: 0, g: 0, b: 0, h: 0, s: 0, v: 0, a: 1 }; var container, picker, colorArea, colorAreaDims, colorMarker, colorPreview, colorValue, clearButton, closeButton, hueSlider, hueMarker, alphaSlider, alphaMarker, currentEl, currentFormat, oldColor, keyboardNav;  var settings = { el: &apos;[data-coloris]&apos;, parent: &apos;body&apos;, theme: &apos;default&apos;, themeMode: &apos;light&apos;, rtl: false, wrap: true, margin: 2, format: &apos;hex&apos;, formatToggle: false, swatches: [], swatchesOnly: false, alpha: true, forceAlpha: false, focusInput: true, selectInput: false, inline: false, defaultColor: &apos;#000000&apos;, clearButton: false, clearLabel: &apos;Clear&apos;, closeButton: false, closeLabel: &apos;Close&apos;, onChange: function onChange() {return undefined;}, a11y: { open: &apos;Open color picker&apos;, close: &apos;Close color picker&apos;, clear: &apos;Clear the selected color&apos;, marker: &apos;Saturation: {s}. Brightness: {v}.&apos;, hueSlider: &apos;Hue slider&apos;, alphaSlider: &apos;Opacity slider&apos;, input: &apos;Color value field&apos;, format: &apos;Color format&apos;, swatch: &apos;Color swatch&apos;, instruction: &apos;Saturation and brightness selector. Use up, down, left and right arrow keys to select.&apos; } };   var instances = {}; var currentInstanceId = &apos;&apos;; var defaultInstance = {}; var hasInstance = false;  function configure(options) { if (typeof options !== &apos;object&apos;) { return; } for (var key in options) { switch (key) { case &apos;el&apos;: bindFields(options.el); if (options.wrap !== false) { wrapFields(options.el); } break; case &apos;parent&apos;: container = document.querySelector(options.parent); if (container) { container.appendChild(picker); settings.parent = options.parent;  if (container === document.body) { container = undefined; } } break; case &apos;themeMode&apos;: settings.themeMode = options.themeMode; if (options.themeMode === &apos;auto&apos; &amp;&amp; window.matchMedia &amp;&amp; window.matchMedia(&apos;(prefers-color-scheme: dark)&apos;).matches) { settings.themeMode = &apos;dark&apos;; }  case &apos;theme&apos;: if (options.theme) { settings.theme = options.theme; }  picker.className = \&quot;clr-picker clr-\&quot; + settings.theme + \&quot; clr-\&quot; + settings.themeMode;  if (settings.inline) { updatePickerPosition(); } break; case &apos;rtl&apos;: settings.rtl = !!options.rtl; document.querySelectorAll(&apos;.clr-field&apos;).forEach(function (field) {return field.classList.toggle(&apos;clr-rtl&apos;, settings.rtl);}); break; case &apos;margin&apos;: options.margin *= 1; settings.margin = !isNaN(options.margin) ? options.margin : settings.margin; break; case &apos;wrap&apos;: if (options.el &amp;&amp; options.wrap) { wrapFields(options.el); } break; case &apos;formatToggle&apos;: settings.formatToggle = !!options.formatToggle; getEl(&apos;clr-format&apos;).style.display = settings.formatToggle ? &apos;block&apos; : &apos;none&apos;; if (settings.formatToggle) { settings.format = &apos;auto&apos;; } break; case &apos;swatches&apos;: if (Array.isArray(options.swatches)) {(function () { var swatches = []; options.swatches.forEach(function (swatch, i) { swatches.push(\&quot;&lt;button type=\\\&quot;button\\\&quot; id=\\\&quot;clr-swatch-\&quot; + i + \&quot;\\\&quot; aria-labelledby=\\\&quot;clr-swatch-label clr-swatch-\&quot; + i + \&quot;\\\&quot; style=\\\&quot;color: \&quot; + swatch + \&quot;;\\\&quot;&gt;\&quot; + swatch + \&quot;&lt;/button&gt;\&quot;); }); getEl(&apos;clr-swatches&apos;).innerHTML = swatches.length ? \&quot;&lt;div&gt;\&quot; + swatches.join(&apos;&apos;) + \&quot;&lt;/div&gt;\&quot; : &apos;&apos;; settings.swatches = options.swatches.slice();})(); } break; case &apos;swatchesOnly&apos;: settings.swatchesOnly = !!options.swatchesOnly; picker.setAttribute(&apos;data-minimal&apos;, settings.swatchesOnly); break; case &apos;alpha&apos;: settings.alpha = !!options.alpha; picker.setAttribute(&apos;data-alpha&apos;, settings.alpha); break; case &apos;inline&apos;: settings.inline = !!options.inline; picker.setAttribute(&apos;data-inline&apos;, settings.inline); if (settings.inline) { var defaultColor = options.defaultColor || settings.defaultColor; currentFormat = getColorFormatFromStr(defaultColor); updatePickerPosition(); setColorFromStr(defaultColor); } break; case &apos;clearButton&apos;:  if (typeof options.clearButton === &apos;object&apos;) { if (options.clearButton.label) { settings.clearLabel = options.clearButton.label; clearButton.innerHTML = settings.clearLabel; } options.clearButton = options.clearButton.show; } settings.clearButton = !!options.clearButton; clearButton.style.display = settings.clearButton ? &apos;block&apos; : &apos;none&apos;; break; case &apos;clearLabel&apos;: settings.clearLabel = options.clearLabel; clearButton.innerHTML = settings.clearLabel; break; case &apos;closeButton&apos;: settings.closeButton = !!options.closeButton; if (settings.closeButton) { picker.insertBefore(closeButton, colorPreview); } else { colorPreview.appendChild(closeButton); } break; case &apos;closeLabel&apos;: settings.closeLabel = options.closeLabel; closeButton.innerHTML = settings.closeLabel; break; case &apos;a11y&apos;: var labels = options.a11y; var update = false; if (typeof labels === &apos;object&apos;) { for (var label in labels) { if (labels[label] &amp;&amp; settings.a11y[label]) { settings.a11y[label] = labels[label]; update = true; } } } if (update) { var openLabel = getEl(&apos;clr-open-label&apos;); var swatchLabel = getEl(&apos;clr-swatch-label&apos;); openLabel.innerHTML = settings.a11y.open; swatchLabel.innerHTML = settings.a11y.swatch; closeButton.setAttribute(&apos;aria-label&apos;, settings.a11y.close); clearButton.setAttribute(&apos;aria-label&apos;, settings.a11y.clear); hueSlider.setAttribute(&apos;aria-label&apos;, settings.a11y.hueSlider); alphaSlider.setAttribute(&apos;aria-label&apos;, settings.a11y.alphaSlider); colorValue.setAttribute(&apos;aria-label&apos;, settings.a11y.input); colorArea.setAttribute(&apos;aria-label&apos;, settings.a11y.instruction); } break; default: settings[key] = options[key];} } }  function setVirtualInstance(selector, options) { if (typeof selector === &apos;string&apos; &amp;&amp; typeof options === &apos;object&apos;) { instances[selector] = options; hasInstance = true; } }  function removeVirtualInstance(selector) { delete instances[selector]; if (Object.keys(instances).length === 0) { hasInstance = false; if (selector === currentInstanceId) { resetVirtualInstance(); } } }  function attachVirtualInstance(element) { if (hasInstance) {  var unsupportedOptions = [&apos;el&apos;, &apos;wrap&apos;, &apos;rtl&apos;, &apos;inline&apos;, &apos;defaultColor&apos;, &apos;a11y&apos;];var _loop = function _loop( selector) { var options = instances[selector];  if (element.matches(selector)) { currentInstanceId = selector; defaultInstance = {};  unsupportedOptions.forEach(function (option) {return delete options[option];});  for (var option in options) { defaultInstance[option] = Array.isArray(settings[option]) ? settings[option].slice() : settings[option]; }  configure(options); return \&quot;break\&quot;; }};for (var selector in instances) {var _ret = _loop(selector);if (_ret === \&quot;break\&quot;) break; } } } /** * Revert any per-instance options that were previously applied. */ function resetVirtualInstance() { if (Object.keys(defaultInstance).length &gt; 0) { configure(defaultInstance); currentInstanceId = &apos;&apos;; defaultInstance = {}; } } /** * Bind the color picker to input fields that match the selector. * @param {string} selector One or more selectors pointing to input fields. */ function bindFields(selector) { /* Show the color picker on click on the input fields that match the selector */ addListener(document, &apos;click&apos;, selector, function (event) { /* Skip if inline mode is in use */ if (settings.inline) { return; } /* Apply any per-instance options first */ attachVirtualInstance(event.target); currentEl = event.target; oldColor = currentEl.value; currentFormat = getColorFormatFromStr(oldColor); picker.classList.add(&apos;clr-open&apos;); updatePickerPosition(); setColorFromStr(oldColor); if (settings.focusInput || settings.selectInput) { colorValue.focus({ preventScroll: true }); } if (settings.selectInput) { colorValue.select(); } /* Always focus the first element when using keyboard navigation */ if (keyboardNav || settings.swatchesOnly) { getFocusableElements().shift().focus(); } /* Trigger an \&quot;open\&quot; event */ currentEl.dispatchEvent(new Event(&apos;open&apos;, { bubbles: true })); }); /* Update the color preview of the input fields that match the selector */ addListener(document, &apos;input&apos;, selector, function (event) { var parent = event.target.parentNode; /* Only update the preview if the field has been previously wrapped */ if (parent.classList.contains(&apos;clr-field&apos;)) { parent.style.color = event.target.value; } }); } /** * Update the color picker&apos;s position and the color gradient&apos;s offset */ function updatePickerPosition() { var parent = container; var scrollY = window.scrollY; var pickerWidth = picker.offsetWidth; var pickerHeight = picker.offsetHeight; var reposition = { left: false, top: false }; var parentStyle, parentMarginTop, parentBorderTop; var offset = { x: 0, y: 0 }; if (parent) { parentStyle = window.getComputedStyle(parent); parentMarginTop = parseFloat(parentStyle.marginTop); parentBorderTop = parseFloat(parentStyle.borderTopWidth); offset = parent.getBoundingClientRect(); offset.y += parentBorderTop + scrollY; } if (!settings.inline) { var coords = currentEl.getBoundingClientRect(); var left = coords.x; var top = scrollY + coords.y + coords.height + settings.margin; /* If the color picker is inside a custom container */ /* set the position relative to it */ if (parent) { left -= offset.x; top -= offset.y; if (left + pickerWidth &gt; parent.clientWidth) { left += coords.width - pickerWidth; reposition.left = true; } if (top + pickerHeight &gt; parent.clientHeight - parentMarginTop) { if (pickerHeight + settings.margin &lt;= coords.top - (offset.y - scrollY)) { top -= coords.height + pickerHeight + settings.margin * 2; reposition.top = true; } } top += parent.scrollTop; /* Otherwise set the position relative to the whole document */ } else { if (left + pickerWidth &gt; document.documentElement.clientWidth) { left += coords.width - pickerWidth; reposition.left = true; } if (top + pickerHeight - scrollY &gt; document.documentElement.clientHeight) { if (pickerHeight + settings.margin &lt;= coords.top) { top = scrollY + coords.y - pickerHeight - settings.margin; reposition.top = true; } } } picker.classList.toggle(&apos;clr-left&apos;, reposition.left); picker.classList.toggle(&apos;clr-top&apos;, reposition.top); picker.style.left = left + \&quot;px\&quot;; picker.style.top = top + \&quot;px\&quot;; offset.x += picker.offsetLeft; offset.y += picker.offsetTop; } colorAreaDims = { width: colorArea.offsetWidth, height: colorArea.offsetHeight, x: colorArea.offsetLeft + offset.x, y: colorArea.offsetTop + offset.y }; } /** * Wrap the linked input fields in a div that adds a color preview. * @param {string} selector One or more selectors pointing to input fields. */ function wrapFields(selector) { document.querySelectorAll(selector).forEach(function (field) { var parentNode = field.parentNode; if (!parentNode.classList.contains(&apos;clr-field&apos;)) { var wrapper = document.createElement(&apos;div&apos;); var classes = &apos;clr-field&apos;; if (settings.rtl || field.classList.contains(&apos;clr-rtl&apos;)) { classes += &apos; clr-rtl&apos;; } wrapper.innerHTML = \&quot;&lt;button type=\\\&quot;button\\\&quot; aria-labelledby=\\\&quot;clr-open-label\\\&quot;&gt;&lt;/button&gt;\&quot;; parentNode.insertBefore(wrapper, field); wrapper.setAttribute(&apos;class&apos;, classes); wrapper.style.color = field.value; wrapper.appendChild(field); } }); } /** * Close the color picker. * @param {boolean} [revert] If true, revert the color to the original value. */ function closePicker(revert) { if (currentEl &amp;&amp; !settings.inline) { var prevEl = currentEl; /* Revert the color to the original value if needed */ if (revert) { /* This will prevent the \&quot;change\&quot; event on the colorValue input to execute its handler */ currentEl = undefined; if (oldColor !== prevEl.value) { prevEl.value = oldColor; /* Trigger an \&quot;input\&quot; event to force update the thumbnail next to the input field */ prevEl.dispatchEvent(new Event(&apos;input&apos;, { bubbles: true })); } } /* Trigger a \&quot;change\&quot; event if needed */ setTimeout(function () {/* Add this to the end of the event loop */ if (oldColor !== prevEl.value) { prevEl.dispatchEvent(new Event(&apos;change&apos;, { bubbles: true })); } }); /* Hide the picker dialog */ picker.classList.remove(&apos;clr-open&apos;); /* Reset any previously set per-instance options */ if (hasInstance) { resetVirtualInstance(); } /* Trigger a \&quot;close\&quot; event */ prevEl.dispatchEvent(new Event(&apos;close&apos;, { bubbles: true })); if (settings.focusInput) { prevEl.focus({ preventScroll: true }); } /* This essentially marks the picker as closed */ currentEl = undefined; } } /** * Set the active color from a string. * @param {string} str String representing a color. */ function setColorFromStr(str) { var rgba = strToRGBA(str); var hsva = RGBAtoHSVA(rgba); updateMarkerA11yLabel(hsva.s, hsva.v); updateColor(rgba, hsva); /* Update the UI */ hueSlider.value = hsva.h; picker.style.color = \&quot;hsl(\&quot; + hsva.h + \&quot;, 100%, 50%)\&quot;; hueMarker.style.left = hsva.h / 360 * 100 + \&quot;%\&quot;; colorMarker.style.left = colorAreaDims.width * hsva.s / 100 + \&quot;px\&quot;; colorMarker.style.top = colorAreaDims.height - colorAreaDims.height * hsva.v / 100 + \&quot;px\&quot;; alphaSlider.value = hsva.a * 100; alphaMarker.style.left = hsva.a * 100 + \&quot;%\&quot;; } /** * Guess the color format from a string. * @param {string} str String representing a color. * @return {string} The color format. */ function getColorFormatFromStr(str) { var format = str.substring(0, 3).toLowerCase(); if (format === &apos;rgb&apos; || format === &apos;hsl&apos;) { return format; } return &apos;hex&apos;; } /** * Copy the active color to the linked input field. * @param {number} [color] Color value to override the active color. */ function pickColor(color) { color = color !== undefined ? color : colorValue.value; if (currentEl) { currentEl.value = color; currentEl.dispatchEvent(new Event(&apos;input&apos;, { bubbles: true })); } if (settings.onChange) { settings.onChange.call(window, color, currentEl); } document.dispatchEvent(new CustomEvent(&apos;coloris:pick&apos;, { detail: { color: color, currentEl: currentEl } })); } /** * Set the active color based on a specific point in the color gradient. * @param {number} x Left position. * @param {number} y Top position. */ function setColorAtPosition(x, y) { var hsva = { h: hueSlider.value * 1, s: x / colorAreaDims.width * 100, v: 100 - y / colorAreaDims.height * 100, a: alphaSlider.value / 100 }; var rgba = HSVAtoRGBA(hsva); updateMarkerA11yLabel(hsva.s, hsva.v); updateColor(rgba, hsva); pickColor(); } /** * Update the color marker&apos;s accessibility label. * @param {number} saturation * @param {number} value */ function updateMarkerA11yLabel(saturation, value) { var label = settings.a11y.marker; saturation = saturation.toFixed(1) * 1; value = value.toFixed(1) * 1; label = label.replace(&apos;{s}&apos;, saturation); label = label.replace(&apos;{v}&apos;, value); colorMarker.setAttribute(&apos;aria-label&apos;, label); }   function getPointerPosition(event) { return { pageX: event.changedTouches ? event.changedTouches[0].pageX : event.pageX, pageY: event.changedTouches ? event.changedTouches[0].pageY : event.pageY }; }  function moveMarker(event) { var pointer = getPointerPosition(event); var x = pointer.pageX - colorAreaDims.x; var y = pointer.pageY - colorAreaDims.y; if (container) { y += container.scrollTop; } setMarkerPosition(x, y);  event.preventDefault(); event.stopPropagation(); }  function moveMarkerOnKeydown(offsetX, offsetY) { var x = colorMarker.style.left.replace(&apos;px&apos;, &apos;&apos;) * 1 + offsetX; var y = colorMarker.style.top.replace(&apos;px&apos;, &apos;&apos;) * 1 + offsetY; setMarkerPosition(x, y); }  function setMarkerPosition(x, y) {  x = x &lt; 0 ? 0 : x &gt; colorAreaDims.width ? colorAreaDims.width : x; y = y &lt; 0 ? 0 : y &gt; colorAreaDims.height ? colorAreaDims.height : y;  colorMarker.style.left = x + \&quot;px\&quot;; colorMarker.style.top = y + \&quot;px\&quot;;  setColorAtPosition(x, y);  colorMarker.focus(); }  function updateColor(rgba, hsva) {if (rgba === void 0) {rgba = {};}if (hsva === void 0) {hsva = {};} var format = settings.format; for (var key in rgba) { currentColor[key] = rgba[key]; } for (var _key in hsva) { currentColor[_key] = hsva[_key]; } var hex = RGBAToHex(currentColor); var opaqueHex = hex.substring(0, 7); colorMarker.style.color = opaqueHex; alphaMarker.parentNode.style.color = opaqueHex; alphaMarker.style.color = hex; colorPreview.style.color = hex; /* Force repaint the color and alpha gradients as a workaround for a Google Chrome bug */ colorArea.style.display = &apos;none&apos;; colorArea.offsetHeight; colorArea.style.display = &apos;&apos;; alphaMarker.nextElementSibling.style.display = &apos;none&apos;; alphaMarker.nextElementSibling.offsetHeight; alphaMarker.nextElementSibling.style.display = &apos;&apos;; if (format === &apos;mixed&apos;) { format = currentColor.a === 1 ? &apos;hex&apos; : &apos;rgb&apos;; } else if (format === &apos;auto&apos;) { format = currentFormat; } switch (format) { case &apos;hex&apos;: colorValue.value = hex; break; case &apos;rgb&apos;: colorValue.value = RGBAToStr(currentColor); break; case &apos;hsl&apos;: colorValue.value = HSLAToStr(HSVAtoHSLA(currentColor)); break;}  /* Select the current format in the format switcher */ document.querySelector(\&quot;.clr-format [value=\\\&quot;\&quot; + format + \&quot;\\\&quot;]\&quot;).checked = true; } /** * Set the hue when its slider is moved. */ function setHue() { var hue = hueSlider.value * 1; var x = colorMarker.style.left.replace(&apos;px&apos;, &apos;&apos;) * 1; var y = colorMarker.style.top.replace(&apos;px&apos;, &apos;&apos;) * 1; picker.style.color = \&quot;hsl(\&quot; + hue + \&quot;, 100%, 50%)\&quot;; hueMarker.style.left = hue / 360 * 100 + \&quot;%\&quot;; setColorAtPosition(x, y); } /** * Set the alpha when its slider is moved. */ function setAlpha() { var alpha = alphaSlider.value / 100; alphaMarker.style.left = alpha * 100 + \&quot;%\&quot;; updateColor({ a: alpha }); pickColor(); } /** * Convert HSVA to RGBA. * @param {object} hsva Hue, saturation, value and alpha values. * @return {object} Red, green, blue and alpha values. */ function HSVAtoRGBA(hsva) { var saturation = hsva.s / 100; var value = hsva.v / 100; var chroma = saturation * value; var hueBy60 = hsva.h / 60; var x = chroma * (1 - Math.abs(hueBy60 % 2 - 1)); var m = value - chroma; chroma = chroma + m; x = x + m; var index = Math.floor(hueBy60) % 6; var red = [chroma, x, m, m, x, chroma][index]; var green = [x, chroma, chroma, x, m, m][index]; var blue = [m, m, x, chroma, chroma, x][index]; return { r: Math.round(red * 255), g: Math.round(green * 255), b: Math.round(blue * 255), a: hsva.a }; } /** * Convert HSVA to HSLA. * @param {object} hsva Hue, saturation, value and alpha values. * @return {object} Hue, saturation, lightness and alpha values. */ function HSVAtoHSLA(hsva) { var value = hsva.v / 100; var lightness = value * (1 - hsva.s / 100 / 2); var saturation; if (lightness &gt; 0 &amp;&amp; lightness &lt; 1) { saturation = Math.round((value - lightness) / Math.min(lightness, 1 - lightness) * 100); } return { h: hsva.h, s: saturation || 0, l: Math.round(lightness * 100), a: hsva.a }; } /** * Convert RGBA to HSVA. * @param {object} rgba Red, green, blue and alpha values. * @return {object} Hue, saturation, value and alpha values. */ function RGBAtoHSVA(rgba) { var red = rgba.r / 255; var green = rgba.g / 255; var blue = rgba.b / 255; var xmax = Math.max(red, green, blue); var xmin = Math.min(red, green, blue); var chroma = xmax - xmin; var value = xmax; var hue = 0; var saturation = 0; if (chroma) { if (xmax === red) {hue = (green - blue) / chroma;} if (xmax === green) {hue = 2 + (blue - red) / chroma;} if (xmax === blue) {hue = 4 + (red - green) / chroma;} if (xmax) {saturation = chroma / xmax;} } hue = Math.floor(hue * 60); return { h: hue &lt; 0 ? hue + 360 : hue, s: Math.round(saturation * 100), v: Math.round(value * 100), a: rgba.a }; } /** * Parse a string to RGBA. * @param {string} str String representing a color. * @return {object} Red, green, blue and alpha values. */ function strToRGBA(str) { var regex = /^((rgba)|rgb)[\D]+([\d.]+)[\D]+([\d.]+)[\D]+([\d.]+)[\D]*?([\d.]+|$)/i; var match, rgba; /* Default to black for invalid color strings */ ctx.fillStyle = &apos;#000&apos;; /* Use canvas to convert the string to a valid color string */ ctx.fillStyle = str; match = regex.exec(ctx.fillStyle); if (match) { rgba = { r: match[3] * 1, g: match[4] * 1, b: match[5] * 1, a: match[6] * 1 };  /* Workaround to mitigate a Chromium bug where the alpha value is rounded incorrectly */ rgba.a = +rgba.a.toFixed(2); } else { match = ctx.fillStyle.replace(&apos;#&apos;, &apos;&apos;).match(/.{2}/g).map(function (h) {return parseInt(h, 16);}); rgba = { r: match[0], g: match[1], b: match[2], a: 1 }; } return rgba; } /** * Convert RGBA to Hex. * @param {object} rgba Red, green, blue and alpha values. * @return {string} Hex color string. */ function RGBAToHex(rgba) { var R = rgba.r.toString(16); var G = rgba.g.toString(16); var B = rgba.b.toString(16); var A = &apos;&apos;; if (rgba.r &lt; 16) { R = &apos;0&apos; + R; } if (rgba.g &lt; 16) { G = &apos;0&apos; + G; } if (rgba.b &lt; 16) { B = &apos;0&apos; + B; } if (settings.alpha &amp;&amp; (rgba.a &lt; 1 || settings.forceAlpha)) { var alpha = rgba.a * 255 | 0; A = alpha.toString(16); if (alpha &lt; 16) { A = &apos;0&apos; + A; } } return &apos;#&apos; + R + G + B + A; } /** * Convert RGBA values to a CSS rgb/rgba string. * @param {object} rgba Red, green, blue and alpha values. * @return {string} CSS color string. */ function RGBAToStr(rgba) { if (!settings.alpha || rgba.a === 1 &amp;&amp; !settings.forceAlpha) { return \&quot;rgb(\&quot; + rgba.r + \&quot;, \&quot; + rgba.g + \&quot;, \&quot; + rgba.b + \&quot;)\&quot;; } else { return \&quot;rgba(\&quot; + rgba.r + \&quot;, \&quot; + rgba.g + \&quot;, \&quot; + rgba.b + \&quot;, \&quot; + rgba.a + \&quot;)\&quot;; } } /** * Convert HSLA values to a CSS hsl/hsla string. * @param {object} hsla Hue, saturation, lightness and alpha values. * @return {string} CSS color string. */ function HSLAToStr(hsla) { if (!settings.alpha || hsla.a === 1 &amp;&amp; !settings.forceAlpha) { return \&quot;hsl(\&quot; + hsla.h + \&quot;, \&quot; + hsla.s + \&quot;%, \&quot; + hsla.l + \&quot;%)\&quot;; } else { return \&quot;hsla(\&quot; + hsla.h + \&quot;, \&quot; + hsla.s + \&quot;%, \&quot; + hsla.l + \&quot;%, \&quot; + hsla.a + \&quot;)\&quot;; } } /** * Init the color picker. */ function init() { /* Render the UI */ container = undefined; picker = document.createElement(&apos;div&apos;); picker.setAttribute(&apos;id&apos;, &apos;clr-picker&apos;); picker.className = &apos;clr-picker&apos;; picker.innerHTML = \&quot;&lt;input id=\\\&quot;clr-color-value\\\&quot; name=\\\&quot;clr-color-value\\\&quot; class=\\\&quot;clr-color\\\&quot; type=\\\&quot;text\\\&quot; value=\\\&quot;\\\&quot; spellcheck=\\\&quot;false\\\&quot; aria-label=\\\&quot;\&quot; + settings.a11y.input + \&quot;\\\&quot;&gt;\&quot; + (\&quot;&lt;div id=\\\&quot;clr-color-area\\\&quot; class=\\\&quot;clr-gradient\\\&quot; role=\\\&quot;application\\\&quot; aria-label=\\\&quot;\&quot; + settings.a11y.instruction + \&quot;\\\&quot;&gt;\&quot;) + &apos;&lt;div id=\&quot;clr-color-marker\&quot; class=\&quot;clr-marker\&quot; tabindex=\&quot;0\&quot;&gt;&lt;/div&gt;&apos; + &apos;&lt;/div&gt;&apos; + &apos;&lt;div class=\&quot;clr-hue\&quot;&gt;&apos; + (\&quot;&lt;input id=\\\&quot;clr-hue-slider\\\&quot; name=\\\&quot;clr-hue-slider\\\&quot; type=\\\&quot;range\\\&quot; min=\\\&quot;0\\\&quot; max=\\\&quot;360\\\&quot; step=\\\&quot;1\\\&quot; aria-label=\\\&quot;\&quot; + settings.a11y.hueSlider + \&quot;\\\&quot;&gt;\&quot;) + &apos;&lt;div id=\&quot;clr-hue-marker\&quot;&gt;&lt;/div&gt;&apos; + &apos;&lt;/div&gt;&apos; + &apos;&lt;div class=\&quot;clr-alpha\&quot;&gt;&apos; + (\&quot;&lt;input id=\\\&quot;clr-alpha-slider\\\&quot; name=\\\&quot;clr-alpha-slider\\\&quot; type=\\\&quot;range\\\&quot; min=\\\&quot;0\\\&quot; max=\\\&quot;100\\\&quot; step=\\\&quot;1\\\&quot; aria-label=\\\&quot;\&quot; + settings.a11y.alphaSlider + \&quot;\\\&quot;&gt;\&quot;) + &apos;&lt;div id=\&quot;clr-alpha-marker\&quot;&gt;&lt;/div&gt;&apos; + &apos;&lt;span&gt;&lt;/span&gt;&apos; + &apos;&lt;/div&gt;&apos; + &apos;&lt;div id=\&quot;clr-format\&quot; class=\&quot;clr-format\&quot;&gt;&apos; + &apos;&lt;fieldset class=\&quot;clr-segmented\&quot;&gt;&apos; + (\&quot;&lt;legend&gt;\&quot; + settings.a11y.format + \&quot;&lt;/legend&gt;\&quot;) + &apos;&lt;input id=\&quot;clr-f1\&quot; type=\&quot;radio\&quot; name=\&quot;clr-format\&quot; value=\&quot;hex\&quot;&gt;&apos; + &apos;&lt;label for=\&quot;clr-f1\&quot;&gt;Hex&lt;/label&gt;&apos; + &apos;&lt;input id=\&quot;clr-f2\&quot; type=\&quot;radio\&quot; name=\&quot;clr-format\&quot; value=\&quot;rgb\&quot;&gt;&apos; + &apos;&lt;label for=\&quot;clr-f2\&quot;&gt;RGB&lt;/label&gt;&apos; + &apos;&lt;input id=\&quot;clr-f3\&quot; type=\&quot;radio\&quot; name=\&quot;clr-format\&quot; value=\&quot;hsl\&quot;&gt;&apos; + &apos;&lt;label for=\&quot;clr-f3\&quot;&gt;HSL&lt;/label&gt;&apos; + &apos;&lt;span&gt;&lt;/span&gt;&apos; + &apos;&lt;/fieldset&gt;&apos; + &apos;&lt;/div&gt;&apos; + &apos;&lt;div id=\&quot;clr-swatches\&quot; class=\&quot;clr-swatches\&quot;&gt;&lt;/div&gt;&apos; + (\&quot;&lt;button type=\\\&quot;button\\\&quot; id=\\\&quot;clr-clear\\\&quot; class=\\\&quot;clr-clear\\\&quot; aria-label=\\\&quot;\&quot; + settings.a11y.clear + \&quot;\\\&quot;&gt;\&quot; + settings.clearLabel + \&quot;&lt;/button&gt;\&quot;) + &apos;&lt;div id=\&quot;clr-color-preview\&quot; class=\&quot;clr-preview\&quot;&gt;&apos; + (\&quot;&lt;button type=\\\&quot;button\\\&quot; id=\\\&quot;clr-close\\\&quot; class=\\\&quot;clr-close\\\&quot; aria-label=\\\&quot;\&quot; + settings.a11y.close + \&quot;\\\&quot;&gt;\&quot; + settings.closeLabel + \&quot;&lt;/button&gt;\&quot;) + &apos;&lt;/div&gt;&apos; + (\&quot;&lt;span id=\\\&quot;clr-open-label\\\&quot; hidden&gt;\&quot; + settings.a11y.open + \&quot;&lt;/span&gt;\&quot;) + (\&quot;&lt;span id=\\\&quot;clr-swatch-label\\\&quot; hidden&gt;\&quot; + settings.a11y.swatch + \&quot;&lt;/span&gt;\&quot;); /* Append the color picker to the DOM */ document.body.appendChild(picker); /* Reference the UI elements */ colorArea = getEl(&apos;clr-color-area&apos;); colorMarker = getEl(&apos;clr-color-marker&apos;); clearButton = getEl(&apos;clr-clear&apos;); closeButton = getEl(&apos;clr-close&apos;); colorPreview = getEl(&apos;clr-color-preview&apos;); colorValue = getEl(&apos;clr-color-value&apos;); hueSlider = getEl(&apos;clr-hue-slider&apos;); hueMarker = getEl(&apos;clr-hue-marker&apos;); alphaSlider = getEl(&apos;clr-alpha-slider&apos;); alphaMarker = getEl(&apos;clr-alpha-marker&apos;); /* Bind the picker to the default selector */ bindFields(settings.el); wrapFields(settings.el); addListener(picker, &apos;mousedown&apos;, function (event) { picker.classList.remove(&apos;clr-keyboard-nav&apos;); event.stopPropagation(); }); addListener(colorArea, &apos;mousedown&apos;, function (event) { addListener(document, &apos;mousemove&apos;, moveMarker); }); addListener(colorArea, &apos;touchstart&apos;, function (event) { document.addEventListener(&apos;touchmove&apos;, moveMarker, { passive: false }); }); addListener(colorMarker, &apos;mousedown&apos;, function (event) { addListener(document, &apos;mousemove&apos;, moveMarker); }); addListener(colorMarker, &apos;touchstart&apos;, function (event) { document.addEventListener(&apos;touchmove&apos;, moveMarker, { passive: false }); }); addListener(colorValue, &apos;change&apos;, function (event) { if (currentEl || settings.inline) { setColorFromStr(colorValue.value); pickColor(); } }); addListener(clearButton, &apos;click&apos;, function (event) { pickColor(&apos;&apos;); closePicker(); }); addListener(closeButton, &apos;click&apos;, function (event) { pickColor(); closePicker(); }); addListener(document, &apos;click&apos;, &apos;.clr-format input&apos;, function (event) { currentFormat = event.target.value; updateColor(); pickColor(); }); addListener(picker, &apos;click&apos;, &apos;.clr-swatches button&apos;, function (event) { setColorFromStr(event.target.textContent); pickColor(); if (settings.swatchesOnly) { closePicker(); } }); addListener(document, &apos;mouseup&apos;, function (event) { document.removeEventListener(&apos;mousemove&apos;, moveMarker); }); addListener(document, &apos;touchend&apos;, function (event) { document.removeEventListener(&apos;touchmove&apos;, moveMarker); }); addListener(document, &apos;mousedown&apos;, function (event) { keyboardNav = false; picker.classList.remove(&apos;clr-keyboard-nav&apos;); closePicker(); }); addListener(document, &apos;keydown&apos;, function (event) { var key = event.key; var target = event.target; var shiftKey = event.shiftKey; var navKeys = [&apos;Tab&apos;, &apos;ArrowUp&apos;, &apos;ArrowDown&apos;, &apos;ArrowLeft&apos;, &apos;ArrowRight&apos;]; if (key === &apos;Escape&apos;) { closePicker(true); /* Display focus rings when using the keyboard */ } else if (navKeys.includes(key)) { keyboardNav = true; picker.classList.add(&apos;clr-keyboard-nav&apos;); } /* Trap the focus within the color picker while it&apos;s open */ if (key === &apos;Tab&apos; &amp;&amp; target.matches(&apos;.clr-picker *&apos;)) { var focusables = getFocusableElements(); var firstFocusable = focusables.shift(); var lastFocusable = focusables.pop(); if (shiftKey &amp;&amp; target === firstFocusable) { lastFocusable.focus(); event.preventDefault(); } else if (!shiftKey &amp;&amp; target === lastFocusable) { firstFocusable.focus(); event.preventDefault(); } } }); addListener(document, &apos;click&apos;, &apos;.clr-field button&apos;, function (event) {  if (hasInstance) { resetVirtualInstance(); }  event.target.nextElementSibling.dispatchEvent(new Event(&apos;click&apos;, { bubbles: true })); }); addListener(colorMarker, &apos;keydown&apos;, function (event) { var movements = { ArrowUp: [0, -1], ArrowDown: [0, 1], ArrowLeft: [-1, 0], ArrowRight: [1, 0] };  if (Object.keys(movements).includes(event.key)) { moveMarkerOnKeydown.apply(void 0, movements[event.key]); event.preventDefault(); } }); addListener(colorArea, &apos;click&apos;, moveMarker); addListener(hueSlider, &apos;input&apos;, setHue); addListener(alphaSlider, &apos;input&apos;, setAlpha); }  function getFocusableElements() { var controls = Array.from(picker.querySelectorAll(&apos;input, button&apos;)); var focusables = controls.filter(function (node) {return !!node.offsetWidth;}); return focusables; }  function getEl(id) { return document.getElementById(id); }  function addListener(context, type, selector, fn) { var matches = Element.prototype.matches || Element.prototype.msMatchesSelector;  if (typeof selector === &apos;string&apos;) { context.addEventListener(type, function (event) { if (matches.call(event.target, selector)) { fn.call(event.target, event); } });   } else { fn = selector; context.addEventListener(type, fn); } }  function DOMReady(fn, args) { args = args !== undefined ? args : []; if (document.readyState !== &apos;loading&apos;) { fn.apply(void 0, args); } else { document.addEventListener(&apos;DOMContentLoaded&apos;, function () { fn.apply(void 0, args); }); } }  if (NodeList !== undefined &amp;&amp; NodeList.prototype &amp;&amp; !NodeList.prototype.forEach) { NodeList.prototype.forEach = Array.prototype.forEach; }  window.Coloris = function () { var methods = { set: configure, wrap: wrapFields, close: closePicker, setInstance: setVirtualInstance, removeInstance: removeVirtualInstance, updatePosition: updatePickerPosition };  function Coloris(options) { DOMReady(function () { if (options) { if (typeof options === &apos;string&apos;) { bindFields(options); } else { configure(options); } } }); }var _loop2 = function _loop2( key) { Coloris[key] = function () {for (var _len = arguments.length, args = new Array(_len), _key2 = 0; _key2 &lt; _len; _key2++) {args[_key2] = arguments[_key2];} DOMReady(methods[key], args); };};for (var key in methods) {_loop2(key); } return Coloris; }();  DOMReady(init); })(window, document, Math);</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.2E01CDEBE44F69964B024C8417531CA9</StringID>
	<SourceText> Choose output format (&quot;hex&quot; or &quot;rgb&quot;)<CR/></SourceText>
	<TargetText> Choose output format (&quot;hex&quot; or &quot;rgb&quot;)<CR/></TargetText>
	<Comment>com.fmi.calculation.text. Choose output format (&quot;hex&quot; or &quot;rgb&quot;)_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.307EB31ADD3E25164EA131697CF6147F</StringID>
	<SourceText> COLOR CONTRAST<CR/></SourceText>
	<TargetText> COLOR CONTRAST<CR/></TargetText>
	<Comment>com.fmi.calculation.text. COLOR CONTRAST_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.307F8F364EB2D9B95BAA90EBE47B18C7</StringID>
	<SourceText> Function Name : colorTint<CR/></SourceText>
	<TargetText> Function Name : colorTint<CR/></TargetText>
	<Comment>com.fmi.calculation.text. Function Name : colorTint_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.319EF1E811EFF76CF85E5D8DB0E79E55</StringID>
	<SourceText>#</SourceText>
	<TargetText>#</TargetText>
	<Comment>com.fmi.calculation.text.#</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.330D8F8F71034D33959A44564A356B25</StringID>
	<SourceText> Value<CR/></SourceText>
	<TargetText> Value<CR/></TargetText>
	<Comment>com.fmi.calculation.text. Value_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.393DE2B027E1F15C0FEFE713B3BF2FD4</StringID>
	<SourceText>0</SourceText>
	<TargetText>0</TargetText>
	<Comment>com.fmi.calculation.text.0</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.3B1355572457ED5653292C489F6E69CF</StringID>
	<SourceText> Renders Coloris colour picker in a webviewer and returns colour code script declared in the third function parameter<CR/></SourceText>
	<TargetText> Renders Coloris colour picker in a webviewer and returns colour code script declared in the third function parameter<CR/></TargetText>
	<Comment>com.fmi.calculation.text. Renders Coloris colour picker in a webviewer and returns colour code script declared in the third function parameter_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.3D0AE0E307F938901FB2EC5AD5620CCB</StringID>
	<SourceText>D</SourceText>
	<TargetText>D</TargetText>
	<Comment>com.fmi.calculation.text.D</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.3F161235C116A32851FE3196078E50FE</StringID>
	<SourceText>; 0 )</SourceText>
	<TargetText>; 0 )</TargetText>
	<Comment>com.fmi.calculation.text.; 0 )</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.41883BA648E78E4BEF3A401EC93E3DE6</StringID>
	<SourceText> 3 rows of preset colour swatches in widget<CR/></SourceText>
	<TargetText> 3 rows of preset colour swatches in widget<CR/></TargetText>
	<Comment>com.fmi.calculation.text. 3 rows of preset colour swatches in widget_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.4221F96C0BC71D64A51630B456948EA2</StringID>
	<SourceText>&apos;</SourceText>
	<TargetText>&apos;</TargetText>
	<Comment>com.fmi.calculation.text.&apos;</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.42D582097BC31476EA73935D4CDD61FF</StringID>
	<SourceText>:</SourceText>
	<TargetText>:</TargetText>
	<Comment>com.fmi.calculation.text.:</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.434452B5742E843061D23BBFC7D67AB3</StringID>
	<SourceText> its representation in the new base, throwing an error on integers that<CR/></SourceText>
	<TargetText> its representation in the new base, throwing an error on integers that<CR/></TargetText>
	<Comment>com.fmi.calculation.text. its representation in the new base, throwing an error on integers that_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.44D19CD545753BE0B995BA3400C16340</StringID>
	<SourceText> numeric version of our original string.<CR/></SourceText>
	<TargetText> numeric version of our original string.<CR/></TargetText>
	<Comment>com.fmi.calculation.text. numeric version of our original string._CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.456E54620C19D81E4EFECCCFEFD2ACEB</StringID>
	<SourceText>g</SourceText>
	<TargetText>g</TargetText>
	<Comment>com.fmi.calculation.text.g</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.48F76AD76BC4CA7412E2A2309662E235</StringID>
	<SourceText><CR/><CR/>~var : grabs default colour or currently selected colour from a variable, this can be changed to a field reference if preferred<CR/>~default : safeguards empty or faulty values and returns a black default colour<CR/>~tins : calculates 6 swatches of currently selected colour and populates the 2nd row of presets in widget with these<CR/><CR/>Left ( ~var ; 1 ) = &quot;?&quot;<CR/><CR/></SourceText>
	<TargetText><CR/><CR/>~var : grabs default colour or currently selected colour from a variable, this can be changed to a field reference if preferred<CR/>~default : safeguards empty or faulty values and returns a black default colour<CR/>~tins : calculates 6 swatches of currently selected colour and populates the 2nd row of presets in widget with these<CR/><CR/>Left ( ~var ; 1 ) = &quot;?&quot;<CR/><CR/></TargetText>
	<Comment>com.fmi.calculation.text._CR/__CR/_~var : grabs default colour or currently selected colour from a variable, this can be changed to a field reference if preferred_CR/_~default : safeguards empty or faulty values and returns a black default colour_CR/_~tins : calculates 6 swatches of currently selected colour and populates the 2nd row of presets in widget with these_CR/__CR/_Left ( ~var ; 1 ) = &quot;?&quot;_CR/__CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.4AB4FBAD490BC5D3A3009C20DC8AEE4C</StringID>
	<SourceText> *1<CR/></SourceText>
	<TargetText> *1<CR/></TargetText>
	<Comment>com.fmi.calculation.text. *1_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.4C67A9662B7E3E45AAC1A3182698A42F</StringID>
	<SourceText>RGB ( </SourceText>
	<TargetText>RGB ( </TargetText>
	<Comment>com.fmi.calculation.text.RGB (</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.4CEA6BCD3D95BF7093ED0C81EA3BB1D7</StringID>
	<SourceText><CR/><CR/>Notes: Allows the user to set dynamic global vars without having to explicitly script a named variable. So you can have a single line script set variable [$var] pass the parameters and create a global var on the fly or destroy it by passing the name with no value. I needed to declare a global variable in a different file and did not want to script just for that single variable. I wanted something I could reuse as needed. <CR/><CR/></SourceText>
	<TargetText><CR/><CR/>Notes: Allows the user to set dynamic global vars without having to explicitly script a named variable. So you can have a single line script set variable [$var] pass the parameters and create a global var on the fly or destroy it by passing the name with no value. I needed to declare a global variable in a different file and did not want to script just for that single variable. I wanted something I could reuse as needed. <CR/><CR/></TargetText>
	<Comment>com.fmi.calculation.text._CR/__CR/_Notes: Allows the user to set dynamic global vars without having to explicitly script a named variable. So you can have a single line script set variable [$var] pass the parameters and create a global var on the fly or destroy it by passing the name with no value. I needed to declare a global variable in a different file and did not want to script just for that single variable. I wanted something I could reuse as needed. _CR/__CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.4D75A03F5A52413121B887AC25AD410F</StringID>
	<SourceText>B</SourceText>
	<TargetText>B</TargetText>
	<Comment>com.fmi.calculation.text.B</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.4DE2AE39B6911808873B33696D41B755</StringID>
	<SourceText> 0 the result of calling the function again on the positive version.<CR/></SourceText>
	<TargetText> 0 the result of calling the function again on the positive version.<CR/></TargetText>
	<Comment>com.fmi.calculation.text. 0 the result of calling the function again on the positive version._CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.4F55B8F1E99F1E9CAE3C73148BC2550A</StringID>
	<SourceText> BD Link : https://www.briandunning.com/cf/2774<CR/></SourceText>
	<TargetText> BD Link : https://www.briandunning.com/cf/2774<CR/></TargetText>
	<Comment>com.fmi.calculation.text. BD Link : https://www.briandunning.com/cf/2774_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.508735F3D38D37DC1BE69DE4ECF6C942</StringID>
	<SourceText> default colour when widget is opened<CR/></SourceText>
	<TargetText> default colour when widget is opened<CR/></TargetText>
	<Comment>com.fmi.calculation.text. default colour when widget is opened_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.51684F302B2D8F4178762F3AA76DCE80</StringID>
	<SourceText> Input desired output format HEX or RGB as JSON<CR/></SourceText>
	<TargetText> Input desired output format HEX or RGB as JSON<CR/></TargetText>
	<Comment>com.fmi.calculation.text. Input desired output format HEX or RGB as JSON_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.53299A2B99FA4406D5C39E246BB0C7DB</StringID>
	<SourceText> or GetField ( &quot;myTable::myField&quot; )<CR/></SourceText>
	<TargetText> or GetField ( &quot;myTable::myField&quot; )<CR/></TargetText>
	<Comment>com.fmi.calculation.text. or GetField ( &quot;myTable::myField&quot; )_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.53C99686984AAA8753F74515996F165F</StringID>
	<SourceText> Return output in desired format<CR/></SourceText>
	<TargetText> Return output in desired format<CR/></TargetText>
	<Comment>com.fmi.calculation.text. Return output in desired format_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.543DF71A5858C0221C64FA1FAE0A53FB</StringID>
	<SourceText>dim</SourceText>
	<TargetText>dim</TargetText>
	<Comment>com.fmi.calculation.text.dim</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.550804FA73FEE431644D41FDA0C247A1</StringID>
	<SourceText> Parameters : color<CR/></SourceText>
	<TargetText> Parameters : color<CR/></TargetText>
	<Comment>com.fmi.calculation.text. Parameters : color_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.57A1208418E9C92B61C4539A40A36A6F</StringID>
	<SourceText> Simulate an &quot;out of range&quot; error if string is a number but is either<CR/></SourceText>
	<TargetText> Simulate an &quot;out of range&quot; error if string is a number but is either<CR/></TargetText>
	<Comment>com.fmi.calculation.text. Simulate an &quot;out of range&quot; error if string is a number but is either_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.584E580A3300194CA816BC1172D44096</StringID>
	<SourceText> of recursing on the remainder. <CR/></SourceText>
	<TargetText> of recursing on the remainder. <CR/></TargetText>
	<Comment>com.fmi.calculation.text. of recursing on the remainder. _CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.585450FCC1945B0D26393045D8359730</StringID>
	<SourceText>coloris.key</SourceText>
	<TargetText>coloris.key</TargetText>
	<Comment>com.fmi.calculation.text.coloris.key</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.59DB753EC4E8F82C779DCA67D9B13FE1</StringID>
	<SourceText> the the sum of 1) the product of the first &quot;digit&quot; times a power<CR/></SourceText>
	<TargetText> the the sum of 1) the product of the first &quot;digit&quot; times a power<CR/></TargetText>
	<Comment>com.fmi.calculation.text. the the sum of 1) the product of the first &quot;digit&quot; times a power_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.5BC68F84FB120B241BA9EEF5345E0BE6</StringID>
	<SourceText> return the result of appending a negative sign with the result of<CR/></SourceText>
	<TargetText> return the result of appending a negative sign with the result of<CR/></TargetText>
	<Comment>com.fmi.calculation.text. return the result of appending a negative sign with the result of_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.60C61CF7DCFE9B6CC2B38DCEFB4250F7</StringID>
	<SourceText>Let ( $$</SourceText>
	<TargetText>Let ( $$</TargetText>
	<Comment>com.fmi.calculation.text.Let ( $$</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.60D3C61912E4BC1D18877C04AD6B312D</StringID>
	<SourceText><CR/>color_convert_hex ( color_hex ; output_format )<CR/><CR/>version 2<CR/>---------------------------------------------<CR/>Thomas Siebert, 28.04.2017<CR/>info@t-seabird.de<CR/>www.t-seabird.de<CR/>---------------------------------------------<CR/><CR/>convert hexadecimal color format to decimal format (used by FileMaker) or red green blue formats<CR/><CR/>output_format = &quot;r&quot;, &quot;g&quot;, &quot;b&quot;, &quot;rgb&quot; or &quot;decimal&quot;<CR/><CR/></SourceText>
	<TargetText><CR/>color_convert_hex ( color_hex ; output_format )<CR/><CR/>version 2<CR/>---------------------------------------------<CR/>Thomas Siebert, 28.04.2017<CR/>info@t-seabird.de<CR/>www.t-seabird.de<CR/>---------------------------------------------<CR/><CR/>convert hexadecimal color format to decimal format (used by FileMaker) or red green blue formats<CR/><CR/>output_format = &quot;r&quot;, &quot;g&quot;, &quot;b&quot;, &quot;rgb&quot; or &quot;decimal&quot;<CR/><CR/></TargetText>
	<Comment>com.fmi.calculation.text._CR/_color_convert_hex ( color_hex ; output_format )_CR/__CR/_version 2_CR/_---------------------------------------------_CR/_Thomas Siebert, 28.04.2017_CR/_info@t-seabird.de_CR/_www.t-seabird.de_CR/_---------------------------------------------_CR/__CR/_convert hexadecimal color format to decimal format (used by FileMaker) or red green blue formats_CR/__CR/_output_format = &quot;r&quot;, &quot;g&quot;, &quot;b&quot;, &quot;rgb&quot; or &quot;decimal&quot;_CR/__CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.60F0933A262C16B7B7381AD760091BA5</StringID>
	<SourceText>&gt;</SourceText>
	<TargetText>&gt;</TargetText>
	<Comment>com.fmi.calculation.text.&gt;</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.622F83C17AE397CA7D32D7235C92F7CC</StringID>
	<SourceText>coloris.target</SourceText>
	<TargetText>coloris.target</TargetText>
	<Comment>com.fmi.calculation.text.coloris.target</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.625BEFEE7CA7B72872B5167A627918F1</StringID>
	<SourceText>r</SourceText>
	<TargetText>r</TargetText>
	<Comment>com.fmi.calculation.text.r</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.62DC6E0EFF72C85CEA6F4F5D464DFE4D</StringID>
	<SourceText> &quot;digits&quot; in the string.<CR/></SourceText>
	<TargetText> &quot;digits&quot; in the string.<CR/></TargetText>
	<Comment>com.fmi.calculation.text. &quot;digits&quot; in the string._CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.6A7B41862A2D2B3A7FA07E37BA79E98F</StringID>
	<SourceText>rgb</SourceText>
	<TargetText>rgb</TargetText>
	<Comment>com.fmi.calculation.text.rgb</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.6C1AB912F06B7215A27D14964CAAC8EB</StringID>
	<SourceText> Adjust each RGB component by scaling it based on the percentage for lightening<CR/></SourceText>
	<TargetText> Adjust each RGB component by scaling it based on the percentage for lightening<CR/></TargetText>
	<Comment>com.fmi.calculation.text. Adjust each RGB component by scaling it based on the percentage for lightening_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.6C853589993E83E9AC920E50AFFD92EF</StringID>
	<SourceText> Calculate colour luminance<CR/></SourceText>
	<TargetText> Calculate colour luminance<CR/></TargetText>
	<Comment>com.fmi.calculation.text. Calculate colour luminance_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.6D572E0E18B7457692F516FF2653385F</StringID>
	<SourceText> the target base and 2) the result of recursing on the remaining<CR/></SourceText>
	<TargetText> the target base and 2) the result of recursing on the remaining<CR/></TargetText>
	<Comment>com.fmi.calculation.text. the target base and 2) the result of recursing on the remaining_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.6D8F5824E0E63BDC1740F2785AB6553D</StringID>
	<SourceText>$$COLORIS_[&lt;^FMXML_AddonInstanceUUID&gt;]</SourceText>
	<TargetText>$$COLORIS_[&lt;^FMXML_AddonInstanceUUID&gt;]</TargetText>
	<Comment>com.fmi.calculation.text.$$COLORIS_[&lt;^FMXML_AddonInstanceUUID&gt;]</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.6DC07D721794A78361289F92FC37B72E</StringID>
	<SourceText>setColorisColor</SourceText>
	<TargetText>setColorisColor</TargetText>
	<Comment>com.fmi.calculation.text.setColorisColor</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.6E666C5CDBA4737A76A941F7BEB0F343</StringID>
	<SourceText> Calculate the integer that the string represents. This is either the<CR/></SourceText>
	<TargetText> Calculate the integer that the string represents. This is either the<CR/></TargetText>
	<Comment>com.fmi.calculation.text. Calculate the integer that the string represents. This is either the_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.71D1C7E521CC7436C3C7B787A00294B7</StringID>
	<SourceText> = </SourceText>
	<TargetText> = </TargetText>
	<Comment>com.fmi.calculation.text. = </Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.729F70461B5E91A8B1B63F5FE97EB853</StringID>
	<SourceText> Input HEX format colour<CR/></SourceText>
	<TargetText> Input HEX format colour<CR/></TargetText>
	<Comment>com.fmi.calculation.text. Input HEX format colour_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.733787DCBC8A82190894ED409DE2BA03</StringID>
	<SourceText> *2<CR/></SourceText>
	<TargetText> *2<CR/></TargetText>
	<Comment>com.fmi.calculation.text. *2_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.772FFE15BBCBBE93ED0670AF7D81C0E4</StringID>
	<SourceText> COLORIS<CR/></SourceText>
	<TargetText> COLORIS<CR/></TargetText>
	<Comment>com.fmi.calculation.text. COLORIS_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.78C78002F3578DFE40648FF3479B8D02</StringID>
	<SourceText> Function:<CR/></SourceText>
	<TargetText> Function:<CR/></TargetText>
	<Comment>com.fmi.calculation.text. Function:_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.79077F9122B6EAEDD202A2824567DA65</StringID>
	<SourceText> Use example : colorContrast ( &quot;#7962a8&quot; )<CR/></SourceText>
	<TargetText> Use example : colorContrast ( &quot;#7962a8&quot; )<CR/></TargetText>
	<Comment>com.fmi.calculation.text. Use example : colorContrast ( &quot;#7962a8&quot; )_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.7C5ABFB0BB8CBA572C2F59DFA1680BF9</StringID>
	<SourceText> Name: SetGlobalVar<CR/></SourceText>
	<TargetText> Name: SetGlobalVar<CR/></TargetText>
	<Comment>com.fmi.calculation.text. Name: SetGlobalVar_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.7D6C699B45DF830CC5EB1EE586C60678</StringID>
	<SourceText>.0123456789</SourceText>
	<TargetText>.0123456789</TargetText>
	<Comment>com.fmi.calculation.text..0123456789</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.7E8584C91A5855505A1DFE0071C5BC37</StringID>
	<SourceText> If the baseFrom is 10, then the base10 version is (clearly) the<CR/></SourceText>
	<TargetText> If the baseFrom is 10, then the base10 version is (clearly) the<CR/></TargetText>
	<Comment>com.fmi.calculation.text. If the baseFrom is 10, then the base10 version is (clearly) the_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.81DDA427909D1792D7E52F1849852EFC</StringID>
	<SourceText>error</SourceText>
	<TargetText>error</TargetText>
	<Comment>com.fmi.calculation.text.error</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.82CC3D205531118407E5D26DB5CCCD51</StringID>
	<SourceText> Simulate an &quot;out of range&quot; error if string is a non-number and contains<CR/></SourceText>
	<TargetText> Simulate an &quot;out of range&quot; error if string is a non-number and contains<CR/></TargetText>
	<Comment>com.fmi.calculation.text. Simulate an &quot;out of range&quot; error if string is a non-number and contains_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.82EA765EB0C53E83EA818B8929EA614D</StringID>
	<SourceText> Convert percentage to a fraction (e.g., 30% becomes 0.7)<CR/></SourceText>
	<TargetText> Convert percentage to a fraction (e.g., 30% becomes 0.7)<CR/></TargetText>
	<Comment>com.fmi.calculation.text. Convert percentage to a fraction (e.g., 30% becomes 0.7)_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.84404F652E2BA635618F92AFEEA48233</StringID>
	<SourceText> Simulate an &quot;out of range&quot; error if the base10Int is too large for the math<CR/></SourceText>
	<TargetText> Simulate an &quot;out of range&quot; error if the base10Int is too large for the math<CR/></TargetText>
	<Comment>com.fmi.calculation.text. Simulate an &quot;out of range&quot; error if the base10Int is too large for the math_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.878D890D3A0BA641567C77D8459A407A</StringID>
	<SourceText> Value Date: 20080613<CR/></SourceText>
	<TargetText> Value Date: 20080613<CR/></TargetText>
	<Comment>com.fmi.calculation.text. Value Date: 20080613_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.88ADC405804DC81CB007E6CC927C3CAD</StringID>
	<SourceText> COLOR TINT<CR/></SourceText>
	<TargetText> COLOR TINT<CR/></TargetText>
	<Comment>com.fmi.calculation.text. COLOR TINT_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.890622B923161B01A90C43093CA2D1CF</StringID>
	<SourceText> DefaultColour is declared as a hex colour code prefixed with a #<CR/></SourceText>
	<TargetText> DefaultColour is declared as a hex colour code prefixed with a #<CR/></TargetText>
	<Comment>com.fmi.calculation.text. DefaultColour is declared as a hex colour code prefixed with a #_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.8DA2BE505EF9FDD0E3598AC253CB900B</StringID>
	<SourceText>Popover</SourceText>
	<TargetText>Popover</TargetText>
	<Comment>com.fmi.calculation.text.Popover</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.8E4F8CDCD7DCCBC9654C9F6601C43383</StringID>
	<SourceText>F</SourceText>
	<TargetText>F</TargetText>
	<Comment>com.fmi.calculation.text.F</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.9251E4B9DE7B3333D0CBD32D788E6F79</StringID>
	<SourceText> Output can be a hexadecimal colour value or RGB values returned in a JSON array.<CR/></SourceText>
	<TargetText> Output can be a hexadecimal colour value or RGB values returned in a JSON array.<CR/></TargetText>
	<Comment>com.fmi.calculation.text. Output can be a hexadecimal colour value or RGB values returned in a JSON array._CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.92A3529BE370BC9B5E876D2E3FACB182</StringID>
	<SourceText> Simulate an &quot;out of range&quot; error if either base is out of range<CR/></SourceText>
	<TargetText> Simulate an &quot;out of range&quot; error if either base is out of range<CR/></TargetText>
	<Comment>com.fmi.calculation.text. Simulate an &quot;out of range&quot; error if either base is out of range_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.93EDAF2F878029918CBEB56EC9511523</StringID>
	<SourceText>fn-rgb</SourceText>
	<TargetText>fn-rgb</TargetText>
	<Comment>com.fmi.calculation.text.fn-rgb</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.96FF8C88F2EEC2419B6FC8AB2DF2115F</StringID>
	<SourceText>coloris.defaultColor</SourceText>
	<TargetText>coloris.defaultColor</TargetText>
	<Comment>com.fmi.calculation.text.coloris.defaultColor</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.987554110E36A5457AE7706F73DAC620</StringID>
	<SourceText> Dependencies : custom Function: coloris.js (https://www.briandunning.com/cf/2773)<CR/></SourceText>
	<TargetText> Dependencies : custom Function: coloris.js (https://www.briandunning.com/cf/2773)<CR/></TargetText>
	<Comment>com.fmi.calculation.text. Dependencies : custom Function: coloris.js (https://www.briandunning.com/cf/2773)_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.99228139AD88A24CABE00664CBD6230E</StringID>
	<SourceText> Written with initial input from pctechtv.com<CR/></SourceText>
	<TargetText> Written with initial input from pctechtv.com<CR/></TargetText>
	<Comment>com.fmi.calculation.text. Written with initial input from pctechtv.com_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.99D7278B3B10762F77AB51AB5B35CD4B</StringID>
	<SourceText>000000000000000000000000000000000000000000000000000</SourceText>
	<TargetText>000000000000000000000000000000000000000000000000000</TargetText>
	<Comment>com.fmi.calculation.text.000000000000000000000000000000000000000000000000000</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.99FFE7F021A1E4CEE67AD9BE5B5FD775</StringID>
	<SourceText>COLORIS_[&lt;^FMXML_AddonInstanceUUID&gt;]</SourceText>
	<TargetText>COLORIS_[&lt;^FMXML_AddonInstanceUUID&gt;]</TargetText>
	<Comment>com.fmi.calculation.text.COLORIS_[&lt;^FMXML_AddonInstanceUUID&gt;]</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.9B85BF407E6B0851CACEB8215660F298</StringID>
	<SourceText><CR/><CR/>USE WHEN TARGET IS A FIELD<CR/><CR/>Let ( [<CR/><CR/><TAB/><TAB/>~target = GetField ( &quot;myTable::myField&quot; ) ; // when target is a field reference<CR/><TAB/><TAB/>~colour = color_convert_hex ( If ( IsEmpty ( ~target ) ; &quot;#000000&quot; ; ~target ) ; &quot;rgb&quot; )<CR/><TAB/><TAB/>~iconChar = Char ( 9673 ) ;<CR/><TAB/><TAB/>~iconSize = 28<CR/><CR/><TAB/>] ;<CR/><CR/><TAB/><TAB/>TextColor ( TextSize ( ~iconChar ; ~iconSize ) ; RGB ( GetValue ( ~colour ; 1 ) ; GetValue ( ~colour ; 2 ) ; GetValue ( ~colour ; 3 ) ) )<CR/><CR/>)<CR/><CR/></SourceText>
	<TargetText><CR/><CR/>USE WHEN TARGET IS A FIELD<CR/><CR/>Let ( [<CR/><CR/><TAB/><TAB/>~target = GetField ( &quot;myTable::myField&quot; ) ; // when target is a field reference<CR/><TAB/><TAB/>~colour = color_convert_hex ( If ( IsEmpty ( ~target ) ; &quot;#000000&quot; ; ~target ) ; &quot;rgb&quot; )<CR/><TAB/><TAB/>~iconChar = Char ( 9673 ) ;<CR/><TAB/><TAB/>~iconSize = 28<CR/><CR/><TAB/>] ;<CR/><CR/><TAB/><TAB/>TextColor ( TextSize ( ~iconChar ; ~iconSize ) ; RGB ( GetValue ( ~colour ; 1 ) ; GetValue ( ~colour ; 2 ) ; GetValue ( ~colour ; 3 ) ) )<CR/><CR/>)<CR/><CR/></TargetText>
	<Comment>com.fmi.calculation.text._CR/__CR/_USE WHEN TARGET IS A FIELD_CR/__CR/_Let ( [_CR/__CR/__TAB/__TAB/_~target = GetField ( &quot;myTable::myField&quot; ) ; // when target is a field reference_CR/__TAB/__TAB/_~colour = color_convert_hex ( If ( IsEmpty ( ~target ) ; &quot;#000000&quot; ; ~target ) ; &quot;rgb&quot; )_CR/__TAB/__TAB/_~iconChar = Char ( 9673 ) ;_CR/__TAB/__TAB/_~iconSize = 28_CR/__CR/__TAB/_] ;_CR/__CR/__TAB/__TAB/_TextColor ( TextSize ( ~iconChar ; ~iconSize ) ; RGB ( GetValue ( ~colour ; 1 ) ; GetValue ( ~colour ; 2 ) ; GetValue ( ~colour ; 3 ) ) )_CR/__CR/_)_CR/__CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.9B9F6F96A54446B9CFB68C4C371848AA</StringID>
	<SourceText> Returns 1 if light, 0 if dark<CR/></SourceText>
	<TargetText> Returns 1 if light, 0 if dark<CR/></TargetText>
	<Comment>com.fmi.calculation.text. Returns 1 if light, 0 if dark_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.9CE31CB0AB3306BC029C44A49C527D47</StringID>
	<SourceText> GitHub : https://github.com/roxytheman/fmCustomFunctions/blob/3c708fc606c9178ef7d3ba5e58fcadb15b46ec6c/functions/coloris.fmfn<CR/></SourceText>
	<TargetText> GitHub : https://github.com/roxytheman/fmCustomFunctions/blob/3c708fc606c9178ef7d3ba5e58fcadb15b46ec6c/functions/coloris.fmfn<CR/></TargetText>
	<Comment>com.fmi.calculation.text. GitHub : https://github.com/roxytheman/fmCustomFunctions/blob/3c708fc606c9178ef7d3ba5e58fcadb15b46ec6c/functions/coloris.fmfn_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.9E0551B1D091E2C7BCD3F1A3741244C8</StringID>
	<SourceText> multiply it by a power of baseFrom, and add the result of<CR/></SourceText>
	<TargetText> multiply it by a power of baseFrom, and add the result of<CR/></TargetText>
	<Comment>com.fmi.calculation.text. multiply it by a power of baseFrom, and add the result of_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.A318DFE2D2D36A070FD597B57B7A02BD</StringID>
	<SourceText>&apos;, color , 3 );<TAB/>  <TAB/>  <CR/><TAB/>  },<CR/><TAB/>  inline: true<CR/><CR/>    });<CR/>    <TAB/><CR/>    &lt;/script&gt;<CR/>  &lt;/body&gt;<CR/>&lt;/html&gt;</SourceText>
	<TargetText>&apos;, color , 3 );<TAB/>  <TAB/>  <CR/><TAB/>  },<CR/><TAB/>  inline: true<CR/><CR/>    });<CR/>    <TAB/><CR/>    &lt;/script&gt;<CR/>  &lt;/body&gt;<CR/>&lt;/html&gt;</TargetText>
	<Comment>com.fmi.calculation.text.&apos;, color , 3 );_TAB/_  _TAB/_  _CR/__TAB/_  },_CR/__TAB/_  inline: true_CR/__CR/_    });_CR/_    _TAB/__CR/_    &lt;/script&gt;_CR/_  &lt;/body&gt;_CR/_&lt;/html&gt;</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.A6CCBD9F07424F424C526EAE0BA345DB</StringID>
	<SourceText>&lt;</SourceText>
	<TargetText>&lt;</TargetText>
	<Comment>com.fmi.calculation.text.&lt;</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.A7F806C10EEE39BC4CDFAC318D4F601B</StringID>
	<SourceText> original string as a number (if we&apos;re converting from base 10), or<CR/></SourceText>
	<TargetText> original string as a number (if we&apos;re converting from base 10), or<CR/></TargetText>
	<Comment>com.fmi.calculation.text. original string as a number (if we&apos;re converting from base 10), or_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.A80CA3EA34842D2622F0881841986F28</StringID>
	<SourceText> Input variables<CR/></SourceText>
	<TargetText> Input variables<CR/></TargetText>
	<Comment>com.fmi.calculation.text. Input variables_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.A8483884CD7AA285800BCD2E011BEB6B</StringID>
	<SourceText> Parameters : defaultColour ; swatches ; targetScript<CR/></SourceText>
	<TargetText> Parameters : defaultColour ; swatches ; targetScript<CR/></TargetText>
	<Comment>com.fmi.calculation.text. Parameters : defaultColour ; swatches ; targetScript_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.A924A369344497D87843ED5298E08AF2</StringID>
	<SourceText> Returns a colour tint of given hex colour<CR/></SourceText>
	<TargetText> Returns a colour tint of given hex colour<CR/></TargetText>
	<Comment>com.fmi.calculation.text. Returns a colour tint of given hex colour_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.ABF55BAFEB28BDD5CE0026DB7F2EA079</StringID>
	<SourceText> Written by: jonni@me.com and pctechtv.com<CR/></SourceText>
	<TargetText> Written by: jonni@me.com and pctechtv.com<CR/></TargetText>
	<Comment>com.fmi.calculation.text. Written by: jonni@me.com and pctechtv.com_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.AE915E2C4A21C7F481D07CA866D14801</StringID>
	<SourceText>;</SourceText>
	<TargetText>;</TargetText>
	<Comment>com.fmi.calculation.text.;</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.B05669451CA87DDD413EAEAE886193FD</StringID>
	<SourceText>bb__colorPicker_</SourceText>
	<TargetText>bb__colorPicker_</TargetText>
	<Comment>com.fmi.calculation.text.bb__colorPicker_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.B2AE8588C4B111DCCFC3E151AC81D9B5</StringID>
	<SourceText> characters outside of the digits for BaseFrom  <CR/></SourceText>
	<TargetText> characters outside of the digits for BaseFrom  <CR/></TargetText>
	<Comment>com.fmi.calculation.text. characters outside of the digits for BaseFrom  _CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.B48A868C643A68C639219B68A79CB846</StringID>
	<SourceText>decimal</SourceText>
	<TargetText>decimal</TargetText>
	<Comment>com.fmi.calculation.text.decimal</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.B699D1F488338587AEBE085773A7EBB7</StringID>
	<SourceText>0123456789ABCDEF</SourceText>
	<TargetText>0123456789ABCDEF</TargetText>
	<Comment>com.fmi.calculation.text.0123456789ABCDEF</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.BC8BB698AE3B447E0192266ADCFFFBF4</StringID>
	<SourceText> <CR/><TAB/>&apos;#FFFFFF&apos;,&apos;#CCCCCC&apos;,&apos;#999999&apos;,&apos;#666666&apos;,&apos;#333333&apos;,&apos;#000000&apos;</SourceText>
	<TargetText> <CR/><TAB/>&apos;#FFFFFF&apos;,&apos;#CCCCCC&apos;,&apos;#999999&apos;,&apos;#666666&apos;,&apos;#333333&apos;,&apos;#000000&apos;</TargetText>
	<Comment>com.fmi.calculation.text. _CR/__TAB/_&apos;#FFFFFF&apos;,&apos;#CCCCCC&apos;,&apos;#999999&apos;,&apos;#666666&apos;,&apos;#333333&apos;,&apos;#000000&apos;</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.BD7F33CFF7A321EA5AFD5194AF4CACD8</StringID>
	<SourceText> a base10 number greater than 10 billion, or a non-integer, or<CR/></SourceText>
	<TargetText> a base10 number greater than 10 billion, or a non-integer, or<CR/></TargetText>
	<Comment>com.fmi.calculation.text. a base10 number greater than 10 billion, or a non-integer, or_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.C0D8CA922D01014CA24A268C5C256DBA</StringID>
	<SourceText>coloris</SourceText>
	<TargetText>coloris</TargetText>
	<Comment>com.fmi.calculation.text.coloris</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.C15EED18F8E42742760FD960C4611848</StringID>
	<SourceText><CR/><TAB/>&lt;/script&gt;<CR/>    &lt;script type=\&quot;text/javascript\&quot;&gt;<CR/><CR/>    /** Default configuration **/<CR/><CR/>    Coloris({<CR/>      el: &apos;.coloris&apos;,<CR/>      alpha: false,<CR/>      swatches: [ </SourceText>
	<TargetText><CR/><TAB/>&lt;/script&gt;<CR/>    &lt;script type=\&quot;text/javascript\&quot;&gt;<CR/><CR/>    /** Default configuration **/<CR/><CR/>    Coloris({<CR/>      el: &apos;.coloris&apos;,<CR/>      alpha: false,<CR/>      swatches: [ </TargetText>
	<Comment>com.fmi.calculation.text._CR/__TAB/_&lt;/script&gt;_CR/_    &lt;script type=\&quot;text/javascript\&quot;&gt;_CR/__CR/_    /** Default configuration **/_CR/__CR/_    Coloris({_CR/_      el: &apos;.coloris&apos;,_CR/_      alpha: false,_CR/_      swatches: [</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.C162B98E9206CA8E19D028AC2D7F1123</StringID>
	<SourceText> Otherwise, calculate the new string as follows:  Determine<CR/></SourceText>
	<TargetText> Otherwise, calculate the new string as follows:  Determine<CR/></TargetText>
	<Comment>com.fmi.calculation.text. Otherwise, calculate the new string as follows:  Determine_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.C196370F891C5CD27B00D7C77E890313</StringID>
	<SourceText> If the string represents a negative number, subtract from<CR/></SourceText>
	<TargetText> If the string represents a negative number, subtract from<CR/></TargetText>
	<Comment>com.fmi.calculation.text. If the string represents a negative number, subtract from_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.C5F6B7637A161E3E4D6D893D04E0058D</StringID>
	<SourceText> If the string is a number then calculate the first digit,<CR/></SourceText>
	<TargetText> If the string is a number then calculate the first digit,<CR/></TargetText>
	<Comment>com.fmi.calculation.text. If the string is a number then calculate the first digit,_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.CBA187BCE3DA3241FD10B69A6A8C1501</StringID>
	<SourceText>Factorial(-1)</SourceText>
	<TargetText>Factorial(-1)</TargetText>
	<Comment>com.fmi.calculation.text.Factorial(-1)</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.CD9DA6E2F4885F5DE2E8F46891F3DA44</StringID>
	<SourceText> Use example : colorTint ( &quot;#7962a8&quot; ; 50 ; &quot;hex&quot; )<CR/></SourceText>
	<TargetText> Use example : colorTint ( &quot;#7962a8&quot; ; 50 ; &quot;hex&quot; )<CR/></TargetText>
	<Comment>com.fmi.calculation.text. Use example : colorTint ( &quot;#7962a8&quot; ; 50 ; &quot;hex&quot; )_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.CF6A8901CB13B6E3340B63BE17CC2A85</StringID>
	<SourceText> Author: Rob Poelking<CR/></SourceText>
	<TargetText> Author: Rob Poelking<CR/></TargetText>
	<Comment>com.fmi.calculation.text. Author: Rob Poelking_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.D0393F39CD9C4C4BA85511D03B8CDE1C</StringID>
	<SourceText> Written by: jonni@me.com<CR/></SourceText>
	<TargetText> Written by: jonni@me.com<CR/></TargetText>
	<Comment>com.fmi.calculation.text. Written by: jonni@me.com_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.D2D7D65FB6674EA5678B9265E55AEAB1</StringID>
	<SourceText> If the string otherwise begins with a &quot;minus&quot; symbol,<CR/></SourceText>
	<TargetText> If the string otherwise begins with a &quot;minus&quot; symbol,<CR/></TargetText>
	<Comment>com.fmi.calculation.text. If the string otherwise begins with a &quot;minus&quot; symbol,_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.D3FCD0CE77955B1105F78793AECF7DBD</StringID>
	<SourceText> recursing on the remainder. (The number might contain scientific<CR/></SourceText>
	<TargetText> recursing on the remainder. (The number might contain scientific<CR/></TargetText>
	<Comment>com.fmi.calculation.text. recursing on the remainder. (The number might contain scientific_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.D5722FC782DE4CF06489007B2079E248</StringID>
	<SourceText>hex</SourceText>
	<TargetText>hex</TargetText>
	<Comment>com.fmi.calculation.text.hex</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.D5AAFAF745D53F3699F1315114FD6730</StringID>
	<SourceText>A</SourceText>
	<TargetText>A</TargetText>
	<Comment>com.fmi.calculation.text.A</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.D68EB1EC5469D00E7981792C6A6CE2B1</StringID>
	<SourceText>   to work out<CR/></SourceText>
	<TargetText>   to work out<CR/></TargetText>
	<Comment>com.fmi.calculation.text.   to work out_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.DA6BF46166C600F92DFD20D8C6AF8E26</StringID>
	<SourceText>#000000</SourceText>
	<TargetText>#000000</TargetText>
	<Comment>com.fmi.calculation.text.#000000</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.DA82556D9BC48DFA414CEBBD528280EF</StringID>
	<SourceText> ; </SourceText>
	<TargetText> ; </TargetText>
	<Comment>com.fmi.calculation.text. ;</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.DABFD27173C21E478BB227F2E919F378</StringID>
	<SourceText> V 1.0</SourceText>
	<TargetText> V 1.0</TargetText>
	<Comment>com.fmi.calculation.text. V 1.0</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.DDF7CF6F24EF229E56B5138763DFC19D</StringID>
	<SourceText> Along with coloris.js (https://www.briandunning.com/cf/2773) this function returns html and javascript for coloris colour picker to be rendered in a webviewer (200x320px).<CR/></SourceText>
	<TargetText> Along with coloris.js (https://www.briandunning.com/cf/2773) this function returns html and javascript for coloris colour picker to be rendered in a webviewer (200x320px).<CR/></TargetText>
	<Comment>com.fmi.calculation.text. Along with coloris.js (https://www.briandunning.com/cf/2773) this function returns html and javascript for coloris colour picker to be rendered in a webviewer (200x320px)._CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.DEE31214F33215E195AA7EF0C74BA19C</StringID>
	<SourceText> Hex color input (e.g., &quot;#7962a8&quot;)<CR/></SourceText>
	<TargetText> Hex color input (e.g., &quot;#7962a8&quot;)<CR/></TargetText>
	<Comment>com.fmi.calculation.text. Hex color input (e.g., &quot;#7962a8&quot;)_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.DEE9B3EC7DB2A4439D5F4B4416CF6F78</StringID>
	<SourceText>&apos;,</SourceText>
	<TargetText>&apos;,</TargetText>
	<Comment>com.fmi.calculation.text.&apos;,</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.E217D2050C687A34617ADD37F13FD0D1</StringID>
	<SourceText> Convert each adjusted RGB value back to two-digit hex<CR/></SourceText>
	<TargetText> Convert each adjusted RGB value back to two-digit hex<CR/></TargetText>
	<Comment>com.fmi.calculation.text. Convert each adjusted RGB value back to two-digit hex_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.E47BC39D8640E1E4EEA99E66612AF0F2</StringID>
	<SourceText>&lt;!DOCTYPE html&gt;<CR/>&lt;html&gt;<CR/>  &lt;head&gt;<CR/>    &lt;meta charset=\&quot;utf-8\&quot;&gt;<CR/>    &lt;meta name=\&quot;viewport\&quot; content=\&quot;width=device-width, initial-scale=1\&quot;&gt;<CR/>    &lt;title&gt;Coloris&lt;/title&gt;<CR/>    &lt;style type=\&quot;text/css\&quot;&gt;<CR/><CR/>.clr-picker {<CR/>  display: none;<CR/>  flex-wrap: wrap;<CR/>  position: absolute;<CR/>  width: 200px;<CR/>  z-index: 1000;<CR/>  border-radius: 10px;<CR/>  background-color: #fff;<CR/>  justify-content: flex-end;<CR/>  direction: ltr;<CR/>  box-shadow: 0 0 5px rgba(0,0,0,.05), 0 5px 20px rgba(0,0,0,.1);<CR/>  -moz-user-select: none;<CR/>  -webkit-user-select: none;<CR/>  user-select: none;<CR/>}<CR/><CR/>.clr-picker.clr-open,<CR/>.clr-picker[data-inline=\&quot;true\&quot;] {<CR/>  display: flex;<CR/>}<CR/><CR/>.clr-picker[data-inline=\&quot;true\&quot;] {<CR/>  position: relative;<CR/>}<CR/><CR/>.clr-gradient {<CR/>  position: relative;<CR/>  width: 100%;<CR/>  height: 100px;<CR/>  margin-bottom: 15px;<CR/>  border-radius: 3px 3px 0 0;<CR/>  background-image: linear-gradient(rgba(0,0,0,0), #000), linear-gradient(90deg, #fff, currentColor);<CR/>  cursor: pointer;<CR/>}<CR/><CR/>.clr-marker {<CR/>  position: absolute;<CR/>  width: 12px;<CR/>  height: 12px;<CR/>  margin: -6px 0 0 -6px;<CR/>  border: 1px solid #fff;<CR/>  border-radius: 50%;<CR/>  background-color: currentColor;<CR/>  cursor: pointer;<CR/>}<CR/><CR/>.clr-picker input[type=\&quot;range\&quot;]::-webkit-slider-runnable-track {<CR/>  width: 100%;<CR/>  height: 8px;<CR/>}<CR/><CR/>.clr-picker input[type=\&quot;range\&quot;]::-webkit-slider-thumb {<CR/>  width: 8px;<CR/>  height: 8px;<CR/>  -webkit-appearance: none;<CR/>}<CR/><CR/>.clr-picker input[type=\&quot;range\&quot;]::-moz-range-track {<CR/>  width: 100%;<CR/>  height: 8px;<CR/>  border: 0;<CR/>}<CR/><CR/>.clr-picker input[type=\&quot;range\&quot;]::-moz-range-thumb {<CR/>  width: 8px;<CR/>  height: 8px;<CR/>  border: 0;<CR/>}<CR/><CR/>.clr-hue {<CR/>  background-image: linear-gradient(to right, #f00 0%, #ff0 16.66%, #0f0 33.33%, #0ff 50%, #00f 66.66%, #f0f 83.33%, #f00 100%);<CR/>}<CR/><CR/>.clr-hue,<CR/>.clr-alpha {<CR/>  position: relative;<CR/>  width: calc(100% - 40px);<CR/>  height: 8px;<CR/>  margin: 5px 20px;<CR/>  border-radius: 4px;<CR/>}<CR/><CR/>.clr-alpha span {<CR/>  display: block;<CR/>  height: 100%;<CR/>  width: 100%;<CR/>  border-radius: inherit;<CR/>  background-image: linear-gradient(90deg, rgba(0,0,0,0), currentColor);<CR/>}<CR/><CR/>.clr-hue input,<CR/>.clr-alpha input {<CR/>  position: absolute;<CR/>  width: calc(100% + 16px);<CR/>  height: 16px;<CR/>  left: -8px;<CR/>  top: -4px;<CR/>  margin: 0;<CR/>  background-color: transparent;<CR/>  opacity: 0;<CR/>  cursor: pointer;<CR/>  appearance: none;<CR/>  -webkit-appearance: none;<CR/>}<CR/><CR/>.clr-hue div,<CR/>.clr-alpha div {<CR/>  position: absolute;<CR/>  width: 16px;<CR/>  height: 16px;<CR/>  left: 0;<CR/>  top: 50%;<CR/>  margin-left: -8px;<CR/>  transform: translateY(-50%);<CR/>  border: 2px solid #fff;<CR/>  border-radius: 50%;<CR/>  background-color: currentColor;<CR/>  box-shadow: 0 0 1px #888;<CR/>  pointer-events: none;<CR/>}<CR/><CR/>.clr-alpha div:before {<CR/>  content: &apos;&apos;;<CR/>  position: absolute;<CR/>  height: 100%;<CR/>  width: 100%;<CR/>  left: 0;<CR/>  top: 0;<CR/>  border-radius: 50%;<CR/>  background-color: currentColor;<CR/>}<CR/><CR/>.clr-format {<CR/>  display: none;<CR/>  order: 1;<CR/>  width: calc(100% - 40px);<CR/>  margin: 0 20px 20px;<CR/>}<CR/><CR/>.clr-segmented {<CR/>  display: flex;<CR/>  position: relative;<CR/>  width: 100%;<CR/>  margin: 0;<CR/>  padding: 0;<CR/>  border: 1px solid #ddd;<CR/>  border-radius: 15px;<CR/>  box-sizing: border-box;<CR/>  color: #999;<CR/>  font-size: 12px;<CR/>}<CR/><CR/>.clr-segmented input,<CR/>.clr-segmented legend {<CR/>  position: absolute;<CR/>  width: 100%;<CR/>  height: 100%;<CR/>  margin: 0;<CR/>  padding: 0;<CR/>  border: 0;<CR/>  left: 0;<CR/>  top: 0;<CR/>  opacity: 0;<CR/>  pointer-events: none;<CR/>}<CR/><CR/>.clr-segmented label {<CR/>  flex-grow: 1;<CR/>  margin: 0;<CR/>  padding: 4px 0;<CR/>  font-size: inherit;<CR/>  font-weight: normal;<CR/>  line-height: initial;<CR/>  text-align: center;<CR/>  cursor: pointer;<CR/>}<CR/><CR/>.clr-segmented label:first-of-type {<CR/>  border-radius: 10px 0 0 10px;<CR/>}<CR/><CR/>.clr-segmented label:last-of-type {<CR/>  border-radius: 0 10px 10px 0;<CR/>}<CR/><CR/>.clr-segmented input:checked + label {<CR/>  color: #fff;<CR/>  background-color: #666;<CR/>}<CR/><CR/>.clr-swatches {<CR/>  order: 2;<CR/>  width: calc(100% - 32px);<CR/>  margin: 0 16px;<CR/>}<CR/><CR/>.clr-swatches div {<CR/>  display: flex;<CR/>  flex-wrap: wrap;<CR/>  padding-bottom: 12px;<CR/>  justify-content: center;<CR/>}<CR/><CR/>.clr-swatches button {<CR/>  position: relative;<CR/>  width: 20px;<CR/>  height: 20px;<CR/>  margin: 0 4px 6px 4px;<CR/>  padding: 0;<CR/>  border: 0;<CR/>  border-radius: 50%;<CR/>  color: inherit;<CR/>  text-indent: -1000px;<CR/>  white-space: nowrap;<CR/>  overflow: hidden;<CR/>  cursor: pointer;<CR/>}<CR/><CR/>.clr-swatches button:after {<CR/>  content: &apos;&apos;;<CR/>  display: block;<CR/>  position: absolute;<CR/>  width: 100%;<CR/>  height: 100%;<CR/>  left: 0;<CR/>  top: 0;<CR/>  border-radius: inherit;<CR/>  background-color: currentColor;<CR/>  box-shadow: inset 0 0 0 1px rgba(0,0,0,.1);<CR/>}<CR/><CR/>input.clr-color {<CR/>  order: 1;<CR/>  width: calc(100% - 80px);<CR/>  height: 32px;<CR/>  margin: 15px 20px 20px auto;<CR/>  padding: 0 10px;<CR/>  border: 1px solid #ddd;<CR/>  border-radius: 16px;<CR/>  color: #444;<CR/>  background-color: #fff;<CR/>  font-family: sans-serif;<CR/>  font-size: 14px;<CR/>  text-align: center;<CR/>  box-shadow: none;<CR/>}<CR/><CR/>input.clr-color:focus {<CR/>  outline: none;<CR/>  border: 1px solid #1e90ff;<CR/>}<CR/><CR/>.clr-close,<CR/>.clr-clear {<CR/>  display: none;<CR/>  order: 2;<CR/>  height: 24px;<CR/>  margin: 0 20px 20px;<CR/>  padding: 0 20px;<CR/>  border: 0;<CR/>  border-radius: 12px;<CR/>  color: #fff;<CR/>  background-color: #666;<CR/>  font-family: inherit;<CR/>  font-size: 12px;<CR/>  font-weight: 400;<CR/>  cursor: pointer;<CR/>}<CR/><CR/>.clr-close {<CR/>  display: block;<CR/>  margin: 0 20px 20px auto;<CR/>}<CR/><CR/>.clr-preview {<CR/>  position: relative;<CR/>  width: 32px;<CR/>  height: 32px;<CR/>  margin: 15px 0 20px 20px;<CR/>  border-radius: 50%;<CR/>  overflow: hidden;<CR/>}<CR/><CR/>.clr-preview:before,<CR/>.clr-preview:after {<CR/>  content: &apos;&apos;;<CR/>  position: absolute;<CR/>  height: 100%;<CR/>  width: 100%;<CR/>  left: 0;<CR/>  top: 0;<CR/>  border: 1px solid #fff;<CR/>  border-radius: 50%;<CR/>}<CR/><CR/>.clr-preview:after {<CR/>  border: 0;<CR/>  background-color: currentColor;<CR/>  box-shadow: inset 0 0 0 1px rgba(0,0,0,.1);<CR/>}<CR/><CR/>.clr-preview button {<CR/>  position: absolute;<CR/>  width: 100%;<CR/>  height: 100%;<CR/>  z-index: 1;<CR/>  margin: 0;<CR/>  padding: 0;<CR/>  border: 0;<CR/>  border-radius: 50%;<CR/>  outline-offset: -2px;<CR/>  background-color: transparent;<CR/>  text-indent: -9999px;<CR/>  cursor: pointer;<CR/>  overflow: hidden;<CR/>}<CR/><CR/>.clr-marker,<CR/>.clr-hue div,<CR/>.clr-alpha div,<CR/>.clr-color {<CR/>  box-sizing: border-box;<CR/>}<CR/><CR/>.clr-field {<CR/>  display: inline-block;<CR/>  position: relative;<CR/>  color: transparent;<CR/>}<CR/><CR/>.clr-field input {<CR/>  margin: 0;<CR/>  direction: ltr;<CR/>}<CR/><CR/>.clr-field.clr-rtl input {<CR/>  text-align: right;<CR/>}<CR/><CR/>.clr-field button {<CR/>  position: absolute;<CR/>  width: 30px;<CR/>  height: 100%;<CR/>  right: 0;<CR/>  top: 50%;<CR/>  transform: translateY(-50%);<CR/>  margin: 0;<CR/>  padding: 0;<CR/>  border: 0;<CR/>  color: inherit;<CR/>  text-indent: -1000px;<CR/>  white-space: nowrap;<CR/>  overflow: hidden;<CR/>  pointer-events: none;<CR/>}<CR/><CR/>.clr-field.clr-rtl button {<CR/>  right: auto;<CR/>  left: 0;<CR/>}<CR/><CR/>.clr-field button:after {<CR/>  content: &apos;&apos;;<CR/>  display: block;<CR/>  position: absolute;<CR/>  width: 100%;<CR/>  height: 100%;<CR/>  left: 0;<CR/>  top: 0;<CR/>  border-radius: inherit;<CR/>  background-color: currentColor;<CR/>  box-shadow: inset 0 0 1px rgba(0,0,0,.5);<CR/>}<CR/><CR/>.clr-alpha,<CR/>.clr-alpha div,<CR/>.clr-swatches button,<CR/>.clr-preview:before,<CR/>.clr-field button {<CR/>  background-image: repeating-linear-gradient(45deg, #aaa 25%, transparent 25%, transparent 75%, #aaa 75%, #aaa), repeating-linear-gradient(45deg, #aaa 25%, #fff 25%, #fff 75%, #aaa 75%, #aaa);<CR/>  background-position: 0 0, 4px 4px;<CR/>  background-size: 8px 8px;<CR/>}<CR/><CR/>.clr-marker:focus {<CR/>  outline: none;<CR/>}<CR/><CR/>.clr-keyboard-nav .clr-marker:focus,<CR/>.clr-keyboard-nav .clr-hue input:focus + div,<CR/>.clr-keyboard-nav .clr-alpha input:focus + div,<CR/>.clr-keyboard-nav .clr-segmented input:focus + label {<CR/>  outline: none;<CR/>  box-shadow: 0 0 0 2px #1e90ff, 0 0 2px 2px #fff;<CR/>}<CR/><CR/>.clr-picker[data-alpha=\&quot;false\&quot;] .clr-alpha {<CR/>  display: none;<CR/>}<CR/><CR/>.clr-picker[data-minimal=\&quot;true\&quot;] {<CR/>  padding-top: 16px;<CR/>}<CR/><CR/>.clr-picker[data-minimal=\&quot;true\&quot;] .clr-gradient,<CR/>.clr-picker[data-minimal=\&quot;true\&quot;] .clr-hue,<CR/>.clr-picker[data-minimal=\&quot;true\&quot;] .clr-alpha,<CR/>.clr-picker[data-minimal=\&quot;true\&quot;] .clr-color,<CR/>.clr-picker[data-minimal=\&quot;true\&quot;] .clr-preview {<CR/>  display: none;<CR/>}<CR/><CR/>/** Dark theme **/<CR/><CR/>.clr-dark {<CR/>  background-color: #444;<CR/>}<CR/><CR/>.clr-dark .clr-segmented {<CR/>  border-color: #777;<CR/>}<CR/><CR/>.clr-dark .clr-swatches button:after {<CR/>  box-shadow: inset 0 0 0 1px rgba(255,255,255,.3);<CR/>}<CR/><CR/>.clr-dark input.clr-color {<CR/>  color: #fff;<CR/>  border-color: #777;<CR/>  background-color: #555;<CR/>}<CR/><CR/>.clr-dark input.clr-color:focus {<CR/>  border-color: #1e90ff;<CR/>}<CR/><CR/>.clr-dark .clr-preview:after {<CR/>  box-shadow: inset 0 0 0 1px rgba(255,255,255,.5);<CR/>}<CR/><CR/>.clr-dark .clr-alpha,<CR/>.clr-dark .clr-alpha div,<CR/>.clr-dark .clr-swatches button,<CR/>.clr-dark .clr-preview:before {<CR/>  background-image: repeating-linear-gradient(45deg, #666 25%, transparent 25%, transparent 75%, #888 75%, #888), repeating-linear-gradient(45deg, #888 25%, #444 25%, #444 75%, #888 75%, #888);<CR/>}<CR/><CR/>/** Polaroid theme **/<CR/><CR/>.clr-picker.clr-polaroid {<CR/>  border-radius: 6px;<CR/>  box-shadow: 0 0 5px rgba(0,0,0,.1), 0 5px 30px rgba(0,0,0,.2);<CR/>}<CR/><CR/>.clr-picker.clr-polaroid:before {<CR/>  content: &apos;&apos;;<CR/>  display: block;<CR/>  position: absolute;<CR/>  width: 16px;<CR/>  height: 10px;<CR/>  left: 20px;<CR/>  top: -10px;<CR/>  border: solid transparent;<CR/>  border-width: 0 8px 10px 8px;<CR/>  border-bottom-color: currentColor;<CR/>  box-sizing: border-box;<CR/>  color: #fff;<CR/>  filter: drop-shadow(0 -4px 3px rgba(0,0,0,.1));<CR/>  pointer-events: none;<CR/>}<CR/><CR/>.clr-picker.clr-polaroid.clr-dark:before {<CR/>  color: #444;<CR/>}<CR/><CR/>.clr-picker.clr-polaroid.clr-left:before {<CR/>  left: auto;<CR/>  right: 20px;<CR/>}<CR/><CR/>.clr-picker.clr-polaroid.clr-top:before {<CR/>  top: auto;<CR/>  bottom: -10px;<CR/>  transform: rotateZ(180deg);<CR/>}<CR/><CR/>.clr-polaroid .clr-gradient {<CR/>  width: calc(100% - 20px);<CR/>  height: 120px;<CR/>  margin: 10px;<CR/>  border-radius: 3px;<CR/>}<CR/><CR/>.clr-polaroid .clr-hue,<CR/>.clr-polaroid .clr-alpha {<CR/>  width: calc(100% - 30px);<CR/>  height: 10px;<CR/>  margin: 6px 15px;<CR/>  border-radius: 5px;<CR/>}<CR/><CR/>.clr-polaroid .clr-hue div,<CR/>.clr-polaroid .clr-alpha div {<CR/>  box-shadow: 0 0 5px rgba(0,0,0,.2);<CR/>}<CR/><CR/>.clr-polaroid .clr-format {<CR/>  width: calc(100% - 20px);<CR/>  margin: 0 10px 15px;<CR/>}<CR/><CR/>.clr-polaroid .clr-swatches {<CR/>  width: calc(100% - 12px);<CR/>  margin: 0 6px;<CR/>}<CR/>.clr-polaroid .clr-swatches div {<CR/>  padding-bottom: 10px;<CR/>}<CR/><CR/>.clr-polaroid .clr-swatches button {<CR/>  width: 22px;<CR/>  height: 22px;<CR/>}<CR/><CR/>.clr-polaroid input.clr-color {<CR/>  width: calc(100% - 60px);<CR/>  margin: 10px 10px 15px auto;<CR/>}<CR/><CR/>.clr-polaroid .clr-clear {<CR/>  margin: 0 10px 15px 10px;<CR/>}<CR/><CR/>.clr-polaroid .clr-close {<CR/>  margin: 0 10px 15px auto;<CR/>}<CR/><CR/>.clr-polaroid .clr-preview {<CR/>  margin: 10px 0 15px 10px;<CR/>}<CR/><CR/>/** Large theme **/<CR/><CR/>.clr-picker.clr-large {<CR/>  width: 275px;<CR/>}<CR/><CR/>.clr-large .clr-gradient {<CR/>  height: 150px;<CR/>}<CR/><CR/>.clr-large .clr-swatches button {<CR/>  width: 22px;<CR/>  height: 22px;<CR/>}<CR/><CR/>/** Pill (horizontal) theme **/<CR/><CR/>.clr-picker.clr-pill {<CR/>  width: 380px;<CR/>  padding-left: 180px;<CR/>  box-sizing: border-box;<CR/>}<CR/><CR/>.clr-pill .clr-gradient {<CR/>  position: absolute;<CR/>  width: 180px;<CR/>  height: 100%;<CR/>  left: 0;<CR/>  top: 0;<CR/>  margin-bottom: 0;<CR/>  border-radius: 3px 0 0 3px;<CR/>}<CR/><CR/>.clr-pill .clr-hue {<CR/>  margin-top: 20px;<CR/>}<CR/><CR/>    body {<CR/><TAB/>  overflow: hidden;<CR/>      height: 120vh;<CR/>      margin: 0px;<CR/>      color: #444;<CR/>      background-color: #fff;<CR/>      font-family: &apos;Arial&apos;, sans-serif;<CR/>    }<CR/><TAB/><CR/><TAB/>.clr-picker {<CR/><TAB/><TAB/>left: 0px !important;<CR/><TAB/><TAB/>box-shadow: none ;<CR/><TAB/><TAB/>top: 0px;<CR/><TAB/><TAB/>right: 0px;<CR/><TAB/>}<TAB/><CR/><CR/>    h1 {<CR/>      margin-bottom: 1.5em;<CR/>    }<CR/><CR/>    input {<CR/><TAB/><CR/>      width: 150px;<CR/>      height: 28px;<CR/>      padding: 0 10px;<CR/>      border: 1px solid #ccc;<CR/>      font-family: inherit;<CR/>      font-size: inherit;<CR/>      font-weight: inherit;<CR/>      box-sizing: border-box;<CR/>    }<CR/><TAB/><CR/><TAB/>input[data-coloris]{<CR/>    display:none;<CR/><TAB/>}<CR/>      <CR/>    .examples {<CR/>      display: flex;<CR/>      flex-wrap: wrap;<CR/>    }<CR/><CR/>    .example {<CR/>      flex-shrink: 1;<CR/>      width: 160px;<CR/>      margin-bottom: 8px;<CR/>    }<CR/><CR/>    .square .clr-field button,<CR/>    .circle .clr-field button {<CR/>      width: 22px;<CR/>      height: 22px;<CR/>      left: 5px;<CR/>      right: auto;<CR/>      border-radius: 5px;<CR/>    }<CR/><CR/>    .square .clr-field input,<CR/>    .circle .clr-field input {<CR/>      padding-left: 36px;<CR/>    }<CR/><CR/>    .circle .clr-field button {<CR/>      border-radius: 50%;<CR/>    }<CR/><CR/>    .full .clr-field button {<CR/>      width: 100%;<CR/>      height: 100%;<CR/>      border-radius: 5px;<CR/>    }<CR/><CR/>    &lt;/style&gt;<CR/>  &lt;/head&gt;<CR/>  &lt;body&gt;<CR/><CR/>      &lt;div class=\&quot;example\&quot;&gt;<CR/>        &lt;input type=\&quot;text\&quot; value=\&quot;green\&quot; data-coloris&gt;<CR/>      &lt;/div&gt;<CR/><CR/>    &lt;script type=&apos;text/javascript&apos;&gt;<CR/>        </SourceText>
	<TargetText>&lt;!DOCTYPE html&gt;<CR/>&lt;html&gt;<CR/>  &lt;head&gt;<CR/>    &lt;meta charset=\&quot;utf-8\&quot;&gt;<CR/>    &lt;meta name=\&quot;viewport\&quot; content=\&quot;width=device-width, initial-scale=1\&quot;&gt;<CR/>    &lt;title&gt;Coloris&lt;/title&gt;<CR/>    &lt;style type=\&quot;text/css\&quot;&gt;<CR/><CR/>.clr-picker {<CR/>  display: none;<CR/>  flex-wrap: wrap;<CR/>  position: absolute;<CR/>  width: 200px;<CR/>  z-index: 1000;<CR/>  border-radius: 10px;<CR/>  background-color: #fff;<CR/>  justify-content: flex-end;<CR/>  direction: ltr;<CR/>  box-shadow: 0 0 5px rgba(0,0,0,.05), 0 5px 20px rgba(0,0,0,.1);<CR/>  -moz-user-select: none;<CR/>  -webkit-user-select: none;<CR/>  user-select: none;<CR/>}<CR/><CR/>.clr-picker.clr-open,<CR/>.clr-picker[data-inline=\&quot;true\&quot;] {<CR/>  display: flex;<CR/>}<CR/><CR/>.clr-picker[data-inline=\&quot;true\&quot;] {<CR/>  position: relative;<CR/>}<CR/><CR/>.clr-gradient {<CR/>  position: relative;<CR/>  width: 100%;<CR/>  height: 100px;<CR/>  margin-bottom: 15px;<CR/>  border-radius: 3px 3px 0 0;<CR/>  background-image: linear-gradient(rgba(0,0,0,0), #000), linear-gradient(90deg, #fff, currentColor);<CR/>  cursor: pointer;<CR/>}<CR/><CR/>.clr-marker {<CR/>  position: absolute;<CR/>  width: 12px;<CR/>  height: 12px;<CR/>  margin: -6px 0 0 -6px;<CR/>  border: 1px solid #fff;<CR/>  border-radius: 50%;<CR/>  background-color: currentColor;<CR/>  cursor: pointer;<CR/>}<CR/><CR/>.clr-picker input[type=\&quot;range\&quot;]::-webkit-slider-runnable-track {<CR/>  width: 100%;<CR/>  height: 8px;<CR/>}<CR/><CR/>.clr-picker input[type=\&quot;range\&quot;]::-webkit-slider-thumb {<CR/>  width: 8px;<CR/>  height: 8px;<CR/>  -webkit-appearance: none;<CR/>}<CR/><CR/>.clr-picker input[type=\&quot;range\&quot;]::-moz-range-track {<CR/>  width: 100%;<CR/>  height: 8px;<CR/>  border: 0;<CR/>}<CR/><CR/>.clr-picker input[type=\&quot;range\&quot;]::-moz-range-thumb {<CR/>  width: 8px;<CR/>  height: 8px;<CR/>  border: 0;<CR/>}<CR/><CR/>.clr-hue {<CR/>  background-image: linear-gradient(to right, #f00 0%, #ff0 16.66%, #0f0 33.33%, #0ff 50%, #00f 66.66%, #f0f 83.33%, #f00 100%);<CR/>}<CR/><CR/>.clr-hue,<CR/>.clr-alpha {<CR/>  position: relative;<CR/>  width: calc(100% - 40px);<CR/>  height: 8px;<CR/>  margin: 5px 20px;<CR/>  border-radius: 4px;<CR/>}<CR/><CR/>.clr-alpha span {<CR/>  display: block;<CR/>  height: 100%;<CR/>  width: 100%;<CR/>  border-radius: inherit;<CR/>  background-image: linear-gradient(90deg, rgba(0,0,0,0), currentColor);<CR/>}<CR/><CR/>.clr-hue input,<CR/>.clr-alpha input {<CR/>  position: absolute;<CR/>  width: calc(100% + 16px);<CR/>  height: 16px;<CR/>  left: -8px;<CR/>  top: -4px;<CR/>  margin: 0;<CR/>  background-color: transparent;<CR/>  opacity: 0;<CR/>  cursor: pointer;<CR/>  appearance: none;<CR/>  -webkit-appearance: none;<CR/>}<CR/><CR/>.clr-hue div,<CR/>.clr-alpha div {<CR/>  position: absolute;<CR/>  width: 16px;<CR/>  height: 16px;<CR/>  left: 0;<CR/>  top: 50%;<CR/>  margin-left: -8px;<CR/>  transform: translateY(-50%);<CR/>  border: 2px solid #fff;<CR/>  border-radius: 50%;<CR/>  background-color: currentColor;<CR/>  box-shadow: 0 0 1px #888;<CR/>  pointer-events: none;<CR/>}<CR/><CR/>.clr-alpha div:before {<CR/>  content: &apos;&apos;;<CR/>  position: absolute;<CR/>  height: 100%;<CR/>  width: 100%;<CR/>  left: 0;<CR/>  top: 0;<CR/>  border-radius: 50%;<CR/>  background-color: currentColor;<CR/>}<CR/><CR/>.clr-format {<CR/>  display: none;<CR/>  order: 1;<CR/>  width: calc(100% - 40px);<CR/>  margin: 0 20px 20px;<CR/>}<CR/><CR/>.clr-segmented {<CR/>  display: flex;<CR/>  position: relative;<CR/>  width: 100%;<CR/>  margin: 0;<CR/>  padding: 0;<CR/>  border: 1px solid #ddd;<CR/>  border-radius: 15px;<CR/>  box-sizing: border-box;<CR/>  color: #999;<CR/>  font-size: 12px;<CR/>}<CR/><CR/>.clr-segmented input,<CR/>.clr-segmented legend {<CR/>  position: absolute;<CR/>  width: 100%;<CR/>  height: 100%;<CR/>  margin: 0;<CR/>  padding: 0;<CR/>  border: 0;<CR/>  left: 0;<CR/>  top: 0;<CR/>  opacity: 0;<CR/>  pointer-events: none;<CR/>}<CR/><CR/>.clr-segmented label {<CR/>  flex-grow: 1;<CR/>  margin: 0;<CR/>  padding: 4px 0;<CR/>  font-size: inherit;<CR/>  font-weight: normal;<CR/>  line-height: initial;<CR/>  text-align: center;<CR/>  cursor: pointer;<CR/>}<CR/><CR/>.clr-segmented label:first-of-type {<CR/>  border-radius: 10px 0 0 10px;<CR/>}<CR/><CR/>.clr-segmented label:last-of-type {<CR/>  border-radius: 0 10px 10px 0;<CR/>}<CR/><CR/>.clr-segmented input:checked + label {<CR/>  color: #fff;<CR/>  background-color: #666;<CR/>}<CR/><CR/>.clr-swatches {<CR/>  order: 2;<CR/>  width: calc(100% - 32px);<CR/>  margin: 0 16px;<CR/>}<CR/><CR/>.clr-swatches div {<CR/>  display: flex;<CR/>  flex-wrap: wrap;<CR/>  padding-bottom: 12px;<CR/>  justify-content: center;<CR/>}<CR/><CR/>.clr-swatches button {<CR/>  position: relative;<CR/>  width: 20px;<CR/>  height: 20px;<CR/>  margin: 0 4px 6px 4px;<CR/>  padding: 0;<CR/>  border: 0;<CR/>  border-radius: 50%;<CR/>  color: inherit;<CR/>  text-indent: -1000px;<CR/>  white-space: nowrap;<CR/>  overflow: hidden;<CR/>  cursor: pointer;<CR/>}<CR/><CR/>.clr-swatches button:after {<CR/>  content: &apos;&apos;;<CR/>  display: block;<CR/>  position: absolute;<CR/>  width: 100%;<CR/>  height: 100%;<CR/>  left: 0;<CR/>  top: 0;<CR/>  border-radius: inherit;<CR/>  background-color: currentColor;<CR/>  box-shadow: inset 0 0 0 1px rgba(0,0,0,.1);<CR/>}<CR/><CR/>input.clr-color {<CR/>  order: 1;<CR/>  width: calc(100% - 80px);<CR/>  height: 32px;<CR/>  margin: 15px 20px 20px auto;<CR/>  padding: 0 10px;<CR/>  border: 1px solid #ddd;<CR/>  border-radius: 16px;<CR/>  color: #444;<CR/>  background-color: #fff;<CR/>  font-family: sans-serif;<CR/>  font-size: 14px;<CR/>  text-align: center;<CR/>  box-shadow: none;<CR/>}<CR/><CR/>input.clr-color:focus {<CR/>  outline: none;<CR/>  border: 1px solid #1e90ff;<CR/>}<CR/><CR/>.clr-close,<CR/>.clr-clear {<CR/>  display: none;<CR/>  order: 2;<CR/>  height: 24px;<CR/>  margin: 0 20px 20px;<CR/>  padding: 0 20px;<CR/>  border: 0;<CR/>  border-radius: 12px;<CR/>  color: #fff;<CR/>  background-color: #666;<CR/>  font-family: inherit;<CR/>  font-size: 12px;<CR/>  font-weight: 400;<CR/>  cursor: pointer;<CR/>}<CR/><CR/>.clr-close {<CR/>  display: block;<CR/>  margin: 0 20px 20px auto;<CR/>}<CR/><CR/>.clr-preview {<CR/>  position: relative;<CR/>  width: 32px;<CR/>  height: 32px;<CR/>  margin: 15px 0 20px 20px;<CR/>  border-radius: 50%;<CR/>  overflow: hidden;<CR/>}<CR/><CR/>.clr-preview:before,<CR/>.clr-preview:after {<CR/>  content: &apos;&apos;;<CR/>  position: absolute;<CR/>  height: 100%;<CR/>  width: 100%;<CR/>  left: 0;<CR/>  top: 0;<CR/>  border: 1px solid #fff;<CR/>  border-radius: 50%;<CR/>}<CR/><CR/>.clr-preview:after {<CR/>  border: 0;<CR/>  background-color: currentColor;<CR/>  box-shadow: inset 0 0 0 1px rgba(0,0,0,.1);<CR/>}<CR/><CR/>.clr-preview button {<CR/>  position: absolute;<CR/>  width: 100%;<CR/>  height: 100%;<CR/>  z-index: 1;<CR/>  margin: 0;<CR/>  padding: 0;<CR/>  border: 0;<CR/>  border-radius: 50%;<CR/>  outline-offset: -2px;<CR/>  background-color: transparent;<CR/>  text-indent: -9999px;<CR/>  cursor: pointer;<CR/>  overflow: hidden;<CR/>}<CR/><CR/>.clr-marker,<CR/>.clr-hue div,<CR/>.clr-alpha div,<CR/>.clr-color {<CR/>  box-sizing: border-box;<CR/>}<CR/><CR/>.clr-field {<CR/>  display: inline-block;<CR/>  position: relative;<CR/>  color: transparent;<CR/>}<CR/><CR/>.clr-field input {<CR/>  margin: 0;<CR/>  direction: ltr;<CR/>}<CR/><CR/>.clr-field.clr-rtl input {<CR/>  text-align: right;<CR/>}<CR/><CR/>.clr-field button {<CR/>  position: absolute;<CR/>  width: 30px;<CR/>  height: 100%;<CR/>  right: 0;<CR/>  top: 50%;<CR/>  transform: translateY(-50%);<CR/>  margin: 0;<CR/>  padding: 0;<CR/>  border: 0;<CR/>  color: inherit;<CR/>  text-indent: -1000px;<CR/>  white-space: nowrap;<CR/>  overflow: hidden;<CR/>  pointer-events: none;<CR/>}<CR/><CR/>.clr-field.clr-rtl button {<CR/>  right: auto;<CR/>  left: 0;<CR/>}<CR/><CR/>.clr-field button:after {<CR/>  content: &apos;&apos;;<CR/>  display: block;<CR/>  position: absolute;<CR/>  width: 100%;<CR/>  height: 100%;<CR/>  left: 0;<CR/>  top: 0;<CR/>  border-radius: inherit;<CR/>  background-color: currentColor;<CR/>  box-shadow: inset 0 0 1px rgba(0,0,0,.5);<CR/>}<CR/><CR/>.clr-alpha,<CR/>.clr-alpha div,<CR/>.clr-swatches button,<CR/>.clr-preview:before,<CR/>.clr-field button {<CR/>  background-image: repeating-linear-gradient(45deg, #aaa 25%, transparent 25%, transparent 75%, #aaa 75%, #aaa), repeating-linear-gradient(45deg, #aaa 25%, #fff 25%, #fff 75%, #aaa 75%, #aaa);<CR/>  background-position: 0 0, 4px 4px;<CR/>  background-size: 8px 8px;<CR/>}<CR/><CR/>.clr-marker:focus {<CR/>  outline: none;<CR/>}<CR/><CR/>.clr-keyboard-nav .clr-marker:focus,<CR/>.clr-keyboard-nav .clr-hue input:focus + div,<CR/>.clr-keyboard-nav .clr-alpha input:focus + div,<CR/>.clr-keyboard-nav .clr-segmented input:focus + label {<CR/>  outline: none;<CR/>  box-shadow: 0 0 0 2px #1e90ff, 0 0 2px 2px #fff;<CR/>}<CR/><CR/>.clr-picker[data-alpha=\&quot;false\&quot;] .clr-alpha {<CR/>  display: none;<CR/>}<CR/><CR/>.clr-picker[data-minimal=\&quot;true\&quot;] {<CR/>  padding-top: 16px;<CR/>}<CR/><CR/>.clr-picker[data-minimal=\&quot;true\&quot;] .clr-gradient,<CR/>.clr-picker[data-minimal=\&quot;true\&quot;] .clr-hue,<CR/>.clr-picker[data-minimal=\&quot;true\&quot;] .clr-alpha,<CR/>.clr-picker[data-minimal=\&quot;true\&quot;] .clr-color,<CR/>.clr-picker[data-minimal=\&quot;true\&quot;] .clr-preview {<CR/>  display: none;<CR/>}<CR/><CR/>/** Dark theme **/<CR/><CR/>.clr-dark {<CR/>  background-color: #444;<CR/>}<CR/><CR/>.clr-dark .clr-segmented {<CR/>  border-color: #777;<CR/>}<CR/><CR/>.clr-dark .clr-swatches button:after {<CR/>  box-shadow: inset 0 0 0 1px rgba(255,255,255,.3);<CR/>}<CR/><CR/>.clr-dark input.clr-color {<CR/>  color: #fff;<CR/>  border-color: #777;<CR/>  background-color: #555;<CR/>}<CR/><CR/>.clr-dark input.clr-color:focus {<CR/>  border-color: #1e90ff;<CR/>}<CR/><CR/>.clr-dark .clr-preview:after {<CR/>  box-shadow: inset 0 0 0 1px rgba(255,255,255,.5);<CR/>}<CR/><CR/>.clr-dark .clr-alpha,<CR/>.clr-dark .clr-alpha div,<CR/>.clr-dark .clr-swatches button,<CR/>.clr-dark .clr-preview:before {<CR/>  background-image: repeating-linear-gradient(45deg, #666 25%, transparent 25%, transparent 75%, #888 75%, #888), repeating-linear-gradient(45deg, #888 25%, #444 25%, #444 75%, #888 75%, #888);<CR/>}<CR/><CR/>/** Polaroid theme **/<CR/><CR/>.clr-picker.clr-polaroid {<CR/>  border-radius: 6px;<CR/>  box-shadow: 0 0 5px rgba(0,0,0,.1), 0 5px 30px rgba(0,0,0,.2);<CR/>}<CR/><CR/>.clr-picker.clr-polaroid:before {<CR/>  content: &apos;&apos;;<CR/>  display: block;<CR/>  position: absolute;<CR/>  width: 16px;<CR/>  height: 10px;<CR/>  left: 20px;<CR/>  top: -10px;<CR/>  border: solid transparent;<CR/>  border-width: 0 8px 10px 8px;<CR/>  border-bottom-color: currentColor;<CR/>  box-sizing: border-box;<CR/>  color: #fff;<CR/>  filter: drop-shadow(0 -4px 3px rgba(0,0,0,.1));<CR/>  pointer-events: none;<CR/>}<CR/><CR/>.clr-picker.clr-polaroid.clr-dark:before {<CR/>  color: #444;<CR/>}<CR/><CR/>.clr-picker.clr-polaroid.clr-left:before {<CR/>  left: auto;<CR/>  right: 20px;<CR/>}<CR/><CR/>.clr-picker.clr-polaroid.clr-top:before {<CR/>  top: auto;<CR/>  bottom: -10px;<CR/>  transform: rotateZ(180deg);<CR/>}<CR/><CR/>.clr-polaroid .clr-gradient {<CR/>  width: calc(100% - 20px);<CR/>  height: 120px;<CR/>  margin: 10px;<CR/>  border-radius: 3px;<CR/>}<CR/><CR/>.clr-polaroid .clr-hue,<CR/>.clr-polaroid .clr-alpha {<CR/>  width: calc(100% - 30px);<CR/>  height: 10px;<CR/>  margin: 6px 15px;<CR/>  border-radius: 5px;<CR/>}<CR/><CR/>.clr-polaroid .clr-hue div,<CR/>.clr-polaroid .clr-alpha div {<CR/>  box-shadow: 0 0 5px rgba(0,0,0,.2);<CR/>}<CR/><CR/>.clr-polaroid .clr-format {<CR/>  width: calc(100% - 20px);<CR/>  margin: 0 10px 15px;<CR/>}<CR/><CR/>.clr-polaroid .clr-swatches {<CR/>  width: calc(100% - 12px);<CR/>  margin: 0 6px;<CR/>}<CR/>.clr-polaroid .clr-swatches div {<CR/>  padding-bottom: 10px;<CR/>}<CR/><CR/>.clr-polaroid .clr-swatches button {<CR/>  width: 22px;<CR/>  height: 22px;<CR/>}<CR/><CR/>.clr-polaroid input.clr-color {<CR/>  width: calc(100% - 60px);<CR/>  margin: 10px 10px 15px auto;<CR/>}<CR/><CR/>.clr-polaroid .clr-clear {<CR/>  margin: 0 10px 15px 10px;<CR/>}<CR/><CR/>.clr-polaroid .clr-close {<CR/>  margin: 0 10px 15px auto;<CR/>}<CR/><CR/>.clr-polaroid .clr-preview {<CR/>  margin: 10px 0 15px 10px;<CR/>}<CR/><CR/>/** Large theme **/<CR/><CR/>.clr-picker.clr-large {<CR/>  width: 275px;<CR/>}<CR/><CR/>.clr-large .clr-gradient {<CR/>  height: 150px;<CR/>}<CR/><CR/>.clr-large .clr-swatches button {<CR/>  width: 22px;<CR/>  height: 22px;<CR/>}<CR/><CR/>/** Pill (horizontal) theme **/<CR/><CR/>.clr-picker.clr-pill {<CR/>  width: 380px;<CR/>  padding-left: 180px;<CR/>  box-sizing: border-box;<CR/>}<CR/><CR/>.clr-pill .clr-gradient {<CR/>  position: absolute;<CR/>  width: 180px;<CR/>  height: 100%;<CR/>  left: 0;<CR/>  top: 0;<CR/>  margin-bottom: 0;<CR/>  border-radius: 3px 0 0 3px;<CR/>}<CR/><CR/>.clr-pill .clr-hue {<CR/>  margin-top: 20px;<CR/>}<CR/><CR/>    body {<CR/><TAB/>  overflow: hidden;<CR/>      height: 120vh;<CR/>      margin: 0px;<CR/>      color: #444;<CR/>      background-color: #fff;<CR/>      font-family: &apos;Arial&apos;, sans-serif;<CR/>    }<CR/><TAB/><CR/><TAB/>.clr-picker {<CR/><TAB/><TAB/>left: 0px !important;<CR/><TAB/><TAB/>box-shadow: none ;<CR/><TAB/><TAB/>top: 0px;<CR/><TAB/><TAB/>right: 0px;<CR/><TAB/>}<TAB/><CR/><CR/>    h1 {<CR/>      margin-bottom: 1.5em;<CR/>    }<CR/><CR/>    input {<CR/><TAB/><CR/>      width: 150px;<CR/>      height: 28px;<CR/>      padding: 0 10px;<CR/>      border: 1px solid #ccc;<CR/>      font-family: inherit;<CR/>      font-size: inherit;<CR/>      font-weight: inherit;<CR/>      box-sizing: border-box;<CR/>    }<CR/><TAB/><CR/><TAB/>input[data-coloris]{<CR/>    display:none;<CR/><TAB/>}<CR/>      <CR/>    .examples {<CR/>      display: flex;<CR/>      flex-wrap: wrap;<CR/>    }<CR/><CR/>    .example {<CR/>      flex-shrink: 1;<CR/>      width: 160px;<CR/>      margin-bottom: 8px;<CR/>    }<CR/><CR/>    .square .clr-field button,<CR/>    .circle .clr-field button {<CR/>      width: 22px;<CR/>      height: 22px;<CR/>      left: 5px;<CR/>      right: auto;<CR/>      border-radius: 5px;<CR/>    }<CR/><CR/>    .square .clr-field input,<CR/>    .circle .clr-field input {<CR/>      padding-left: 36px;<CR/>    }<CR/><CR/>    .circle .clr-field button {<CR/>      border-radius: 50%;<CR/>    }<CR/><CR/>    .full .clr-field button {<CR/>      width: 100%;<CR/>      height: 100%;<CR/>      border-radius: 5px;<CR/>    }<CR/><CR/>    &lt;/style&gt;<CR/>  &lt;/head&gt;<CR/>  &lt;body&gt;<CR/><CR/>      &lt;div class=\&quot;example\&quot;&gt;<CR/>        &lt;input type=\&quot;text\&quot; value=\&quot;green\&quot; data-coloris&gt;<CR/>      &lt;/div&gt;<CR/><CR/>    &lt;script type=&apos;text/javascript&apos;&gt;<CR/>        </TargetText>
	<Comment>com.fmi.calculation.text.&lt;!DOCTYPE html&gt;_CR/_&lt;html&gt;_CR/_  &lt;head&gt;_CR/_    &lt;meta charset=\&quot;utf-8\&quot;&gt;_CR/_    &lt;meta name=\&quot;viewport\&quot; content=\&quot;width=device-width, initial-scale=1\&quot;&gt;_CR/_    &lt;title&gt;Coloris&lt;/title&gt;_CR/_    &lt;style type=\&quot;text/css\&quot;&gt;_CR/__CR/_.clr-picker {_CR/_  display: none;_CR/_  flex-wrap: wrap;_CR/_  position: absolute;_CR/_  width: 200px;_CR/_  z-index: 1000;_CR/_  border-radius: 10px;_CR/_  background-color: #fff;_CR/_  justify-content: flex-end;_CR/_  direction: ltr;_CR/_  box-shadow: 0 0 5px rgba(0,0,0,.05), 0 5px 20px rgba(0,0,0,.1);_CR/_  -moz-user-select: none;_CR/_  -webkit-user-select: none;_CR/_  user-select: none;_CR/_}_CR/__CR/_.clr-picker.clr-open,_CR/_.clr-picker[data-inline=\&quot;true\&quot;] {_CR/_  display: flex;_CR/_}_CR/__CR/_.clr-picker[data-inline=\&quot;true\&quot;] {_CR/_  position: relative;_CR/_}_CR/__CR/_.clr-gradient {_CR/_  position: relative;_CR/_  width: 100%;_CR/_  height: 100px;_CR/_  margin-bottom: 15px;_CR/_  border-radius: 3px 3px 0 0;_CR/_  background-image: linear-gradient(rgba(0,0,0,0), #000), linear-gradient(90deg, #fff, currentColor);_CR/_  cursor: pointer;_CR/_}_CR/__CR/_.clr-marker {_CR/_  position: absolute;_CR/_  width: 12px;_CR/_  height: 12px;_CR/_  margin: -6px 0 0 -6px;_CR/_  border: 1px solid #fff;_CR/_  border-radius: 50%;_CR/_  background-color: currentColor;_CR/_  cursor: pointer;_CR/_}_CR/__CR/_.clr-picker input[type=\&quot;range\&quot;]::-webkit-slider-runnable-track {_CR/_  width: 100%;_CR/_  height: 8px;_CR/_}_CR/__CR/_.clr-picker input[type=\&quot;range\&quot;]::-webkit-slider-thumb {_CR/_  width: 8px;_CR/_  height: 8px;_CR/_  -webkit-appearance: none;_CR/_}_CR/__CR/_.clr-picker input[type=\&quot;range\&quot;]::-moz-range-track {_CR/_  width: 100%;_CR/_  height: 8px;_CR/_  border: 0;_CR/_}_CR/__CR/_.clr-picker input[type=\&quot;range\&quot;]::-moz-range-thumb {_CR/_  width: 8px;_CR/_  height: 8px;_CR/_  border: 0;_CR/_}_CR/__CR/_.clr-hue {_CR/_  background-image: linear-gradient(to right, #f00 0%, #ff0 16.66%, #0f0 33.33%, #0ff 50%, #00f 66.66%, #f0f 83.33%, #f00 100%);_CR/_}_CR/__CR/_.clr-hue,_CR/_.clr-alpha {_CR/_  position: relative;_CR/_  width: calc(100% - 40px);_CR/_  height: 8px;_CR/_  margin: 5px 20px;_CR/_  border-radius: 4px;_CR/_}_CR/__CR/_.clr-alpha span {_CR/_  display: block;_CR/_  height: 100%;_CR/_  width: 100%;_CR/_  border-radius: inherit;_CR/_  background-image: linear-gradient(90deg, rgba(0,0,0,0), currentColor);_CR/_}_CR/__CR/_.clr-hue input,_CR/_.clr-alpha input {_CR/_  position: absolute;_CR/_  width: calc(100% + 16px);_CR/_  height: 16px;_CR/_  left: -8px;_CR/_  top: -4px;_CR/_  margin: 0;_CR/_  background-color: transparent;_CR/_  opacity: 0;_CR/_  cursor: pointer;_CR/_  appearance: none;_CR/_  -webkit-appearance: none;_CR/_}_CR/__CR/_.clr-hue div,_CR/_.clr-alpha div {_CR/_  position: absolute;_CR/_  width: 16px;_CR/_  height: 16px;_CR/_  left: 0;_CR/_  top: 50%;_CR/_  margin-left: -8px;_CR/_  transform: translateY(-50%);_CR/_  border: 2px solid #fff;_CR/_  border-radius: 50%;_CR/_  background-color: currentColor;_CR/_  box-shadow: 0 0 1px #888;_CR/_  pointer-events: none;_CR/_}_CR/__CR/_.clr-alpha div:before {_CR/_  content: &apos;&apos;;_CR/_  position: absolute;_CR/_  height: 100%;_CR/_  width: 100%;_CR/_  left: 0;_CR/_  top: 0;_CR/_  border-radius: 50%;_CR/_  background-color: currentColor;_CR/_}_CR/__CR/_.clr-format {_CR/_  display: none;_CR/_  order: 1;_CR/_  width: calc(100% - 40px);_CR/_  margin: 0 20px 20px;_CR/_}_CR/__CR/_.clr-segmented {_CR/_  display: flex;_CR/_  position: relative;_CR/_  width: 100%;_CR/_  margin: 0;_CR/_  padding: 0;_CR/_  border: 1px solid #ddd;_CR/_  border-radius: 15px;_CR/_  box-sizing: border-box;_CR/_  color: #999;_CR/_  font-size: 12px;_CR/_}_CR/__CR/_.clr-segmented input,_CR/_.clr-segmented legend {_CR/_  position: absolute;_CR/_  width: 100%;_CR/_  height: 100%;_CR/_  margin: 0;_CR/_  padding: 0;_CR/_  border: 0;_CR/_  left: 0;_CR/_  top: 0;_CR/_  opacity: 0;_CR/_  pointer-events: none;_CR/_}_CR/__CR/_.clr-segmented label {_CR/_  flex-grow: 1;_CR/_  margin: 0;_CR/_  padding: 4px 0;_CR/_  font-size: inherit;_CR/_  font-weight: normal;_CR/_  line-height: initial;_CR/_  text-align: center;_CR/_  cursor: pointer;_CR/_}_CR/__CR/_.clr-segmented label:first-of-type {_CR/_  border-radius: 10px 0 0 10px;_CR/_}_CR/__CR/_.clr-segmented label:last-of-type {_CR/_  border-radius: 0 10px 10px 0;_CR/_}_CR/__CR/_.clr-segmented input:checked + label {_CR/_  color: #fff;_CR/_  background-color: #666;_CR/_}_CR/__CR/_.clr-swatches {_CR/_  order: 2;_CR/_  width: calc(100% - 32px);_CR/_  margin: 0 16px;_CR/_}_CR/__CR/_.clr-swatches div {_CR/_  display: flex;_CR/_  flex-wrap: wrap;_CR/_  padding-bottom: 12px;_CR/_  justify-content: center;_CR/_}_CR/__CR/_.clr-swatches button {_CR/_  position: relative;_CR/_  width: 20px;_CR/_  height: 20px;_CR/_  margin: 0 4px 6px 4px;_CR/_  padding: 0;_CR/_  border: 0;_CR/_  border-radius: 50%;_CR/_  color: inherit;_CR/_  text-indent: -1000px;_CR/_  white-space: nowrap;_CR/_  overflow: hidden;_CR/_  cursor: pointer;_CR/_}_CR/__CR/_.clr-swatches button:after {_CR/_  content: &apos;&apos;;_CR/_  display: block;_CR/_  position: absolute;_CR/_  width: 100%;_CR/_  height: 100%;_CR/_  left: 0;_CR/_  top: 0;_CR/_  border-radius: inherit;_CR/_  background-color: currentColor;_CR/_  box-shadow: inset 0 0 0 1px rgba(0,0,0,.1);_CR/_}_CR/__CR/_input.clr-color {_CR/_  order: 1;_CR/_  width: calc(100% - 80px);_CR/_  height: 32px;_CR/_  margin: 15px 20px 20px auto;_CR/_  padding: 0 10px;_CR/_  border: 1px solid #ddd;_CR/_  border-radius: 16px;_CR/_  color: #444;_CR/_  background-color: #fff;_CR/_  font-family: sans-serif;_CR/_  font-size: 14px;_CR/_  text-align: center;_CR/_  box-shadow: none;_CR/_}_CR/__CR/_input.clr-color:focus {_CR/_  outline: none;_CR/_  border: 1px solid #1e90ff;_CR/_}_CR/__CR/_.clr-close,_CR/_.clr-clear {_CR/_  display: none;_CR/_  order: 2;_CR/_  height: 24px;_CR/_  margin: 0 20px 20px;_CR/_  padding: 0 20px;_CR/_  border: 0;_CR/_  border-radius: 12px;_CR/_  color: #fff;_CR/_  background-color: #666;_CR/_  font-family: inherit;_CR/_  font-size: 12px;_CR/_  font-weight: 400;_CR/_  cursor: pointer;_CR/_}_CR/__CR/_.clr-close {_CR/_  display: block;_CR/_  margin: 0 20px 20px auto;_CR/_}_CR/__CR/_.clr-preview {_CR/_  position: relative;_CR/_  width: 32px;_CR/_  height: 32px;_CR/_  margin: 15px 0 20px 20px;_CR/_  border-radius: 50%;_CR/_  overflow: hidden;_CR/_}_CR/__CR/_.clr-preview:before,_CR/_.clr-preview:after {_CR/_  content: &apos;&apos;;_CR/_  position: absolute;_CR/_  height: 100%;_CR/_  width: 100%;_CR/_  left: 0;_CR/_  top: 0;_CR/_  border: 1px solid #fff;_CR/_  border-radius: 50%;_CR/_}_CR/__CR/_.clr-preview:after {_CR/_  border: 0;_CR/_  background-color: currentColor;_CR/_  box-shadow: inset 0 0 0 1px rgba(0,0,0,.1);_CR/_}_CR/__CR/_.clr-preview button {_CR/_  position: absolute;_CR/_  width: 100%;_CR/_  height: 100%;_CR/_  z-index: 1;_CR/_  margin: 0;_CR/_  padding: 0;_CR/_  border: 0;_CR/_  border-radius: 50%;_CR/_  outline-offset: -2px;_CR/_  background-color: transparent;_CR/_  text-indent: -9999px;_CR/_  cursor: pointer;_CR/_  overflow: hidden;_CR/_}_CR/__CR/_.clr-marker,_CR/_.clr-hue div,_CR/_.clr-alpha div,_CR/_.clr-color {_CR/_  box-sizing: border-box;_CR/_}_CR/__CR/_.clr-field {_CR/_  display: inline-block;_CR/_  position: relative;_CR/_  color: transparent;_CR/_}_CR/__CR/_.clr-field input {_CR/_  margin: 0;_CR/_  direction: ltr;_CR/_}_CR/__CR/_.clr-field.clr-rtl input {_CR/_  text-align: right;_CR/_}_CR/__CR/_.clr-field button {_CR/_  position: absolute;_CR/_  width: 30px;_CR/_  height: 100%;_CR/_  right: 0;_CR/_  top: 50%;_CR/_  transform: translateY(-50%);_CR/_  margin: 0;_CR/_  padding: 0;_CR/_  border: 0;_CR/_  color: inherit;_CR/_  text-indent: -1000px;_CR/_  white-space: nowrap;_CR/_  overflow: hidden;_CR/_  pointer-events: none;_CR/_}_CR/__CR/_.clr-field.clr-rtl button {_CR/_  right: auto;_CR/_  left: 0;_CR/_}_CR/__CR/_.clr-field button:after {_CR/_  content: &apos;&apos;;_CR/_  display: block;_CR/_  position: absolute;_CR/_  width: 100%;_CR/_  height: 100%;_CR/_  left: 0;_CR/_  top: 0;_CR/_  border-radius: inherit;_CR/_  background-color: currentColor;_CR/_  box-shadow: inset 0 0 1px rgba(0,0,0,.5);_CR/_}_CR/__CR/_.clr-alpha,_CR/_.clr-alpha div,_CR/_.clr-swatches button,_CR/_.clr-preview:before,_CR/_.clr-field button {_CR/_  background-image: repeating-linear-gradient(45deg, #aaa 25%, transparent 25%, transparent 75%, #aaa 75%, #aaa), repeating-linear-gradient(45deg, #aaa 25%, #fff 25%, #fff 75%, #aaa 75%, #aaa);_CR/_  background-position: 0 0, 4px 4px;_CR/_  background-size: 8px 8px;_CR/_}_CR/__CR/_.clr-marker:focus {_CR/_  outline: none;_CR/_}_CR/__CR/_.clr-keyboard-nav .clr-marker:focus,_CR/_.clr-keyboard-nav .clr-hue input:focus + div,_CR/_.clr-keyboard-nav .clr-alpha input:focus + div,_CR/_.clr-keyboard-nav .clr-segmented input:focus + label {_CR/_  outline: none;_CR/_  box-shadow: 0 0 0 2px #1e90ff, 0 0 2px 2px #fff;_CR/_}_CR/__CR/_.clr-picker[data-alpha=\&quot;false\&quot;] .clr-alpha {_CR/_  display: none;_CR/_}_CR/__CR/_.clr-picker[data-minimal=\&quot;true\&quot;] {_CR/_  padding-top: 16px;_CR/_}_CR/__CR/_.clr-picker[data-minimal=\&quot;true\&quot;] .clr-gradient,_CR/_.clr-picker[data-minimal=\&quot;true\&quot;] .clr-hue,_CR/_.clr-picker[data-minimal=\&quot;true\&quot;] .clr-alpha,_CR/_.clr-picker[data-minimal=\&quot;true\&quot;] .clr-color,_CR/_.clr-picker[data-minimal=\&quot;true\&quot;] .clr-preview {_CR/_  display: none;_CR/_}_CR/__CR/_/** Dark theme **/_CR/__CR/_.clr-dark {_CR/_  background-color: #444;_CR/_}_CR/__CR/_.clr-dark .clr-segmented {_CR/_  border-color: #777;_CR/_}_CR/__CR/_.clr-dark .clr-swatches button:after {_CR/_  box-shadow: inset 0 0 0 1px rgba(255,255,255,.3);_CR/_}_CR/__CR/_.clr-dark input.clr-color {_CR/_  color: #fff;_CR/_  border-color: #777;_CR/_  background-color: #555;_CR/_}_CR/__CR/_.clr-dark input.clr-color:focus {_CR/_  border-color: #1e90ff;_CR/_}_CR/__CR/_.clr-dark .clr-preview:after {_CR/_  box-shadow: inset 0 0 0 1px rgba(255,255,255,.5);_CR/_}_CR/__CR/_.clr-dark .clr-alpha,_CR/_.clr-dark .clr-alpha div,_CR/_.clr-dark .clr-swatches button,_CR/_.clr-dark .clr-preview:before {_CR/_  background-image: repeating-linear-gradient(45deg, #666 25%, transparent 25%, transparent 75%, #888 75%, #888), repeating-linear-gradient(45deg, #888 25%, #444 25%, #444 75%, #888 75%, #888);_CR/_}_CR/__CR/_/** Polaroid theme **/_CR/__CR/_.clr-picker.clr-polaroid {_CR/_  border-radius: 6px;_CR/_  box-shadow: 0 0 5px rgba(0,0,0,.1), 0 5px 30px rgba(0,0,0,.2);_CR/_}_CR/__CR/_.clr-picker.clr-polaroid:before {_CR/_  content: &apos;&apos;;_CR/_  display: block;_CR/_  position: absolute;_CR/_  width: 16px;_CR/_  height: 10px;_CR/_  left: 20px;_CR/_  top: -10px;_CR/_  border: solid transparent;_CR/_  border-width: 0 8px 10px 8px;_CR/_  border-bottom-color: currentColor;_CR/_  box-sizing: border-box;_CR/_  color: #fff;_CR/_  filter: drop-shadow(0 -4px 3px rgba(0,0,0,.1));_CR/_  pointer-events: none;_CR/_}_CR/__CR/_.clr-picker.clr-polaroid.clr-dark:before {_CR/_  color: #444;_CR/_}_CR/__CR/_.clr-picker.clr-polaroid.clr-left:before {_CR/_  left: auto;_CR/_  right: 20px;_CR/_}_CR/__CR/_.clr-picker.clr-polaroid.clr-top:before {_CR/_  top: auto;_CR/_  bottom: -10px;_CR/_  transform: rotateZ(180deg);_CR/_}_CR/__CR/_.clr-polaroid .clr-gradient {_CR/_  width: calc(100% - 20px);_CR/_  height: 120px;_CR/_  margin: 10px;_CR/_  border-radius: 3px;_CR/_}_CR/__CR/_.clr-polaroid .clr-hue,_CR/_.clr-polaroid .clr-alpha {_CR/_  width: calc(100% - 30px);_CR/_  height: 10px;_CR/_  margin: 6px 15px;_CR/_  border-radius: 5px;_CR/_}_CR/__CR/_.clr-polaroid .clr-hue div,_CR/_.clr-polaroid .clr-alpha div {_CR/_  box-shadow: 0 0 5px rgba(0,0,0,.2);_CR/_}_CR/__CR/_.clr-polaroid .clr-format {_CR/_  width: calc(100% - 20px);_CR/_  margin: 0 10px 15px;_CR/_}_CR/__CR/_.clr-polaroid .clr-swatches {_CR/_  width: calc(100% - 12px);_CR/_  margin: 0 6px;_CR/_}_CR/_.clr-polaroid .clr-swatches div {_CR/_  padding-bottom: 10px;_CR/_}_CR/__CR/_.clr-polaroid .clr-swatches button {_CR/_  width: 22px;_CR/_  height: 22px;_CR/_}_CR/__CR/_.clr-polaroid input.clr-color {_CR/_  width: calc(100% - 60px);_CR/_  margin: 10px 10px 15px auto;_CR/_}_CR/__CR/_.clr-polaroid .clr-clear {_CR/_  margin: 0 10px 15px 10px;_CR/_}_CR/__CR/_.clr-polaroid .clr-close {_CR/_  margin: 0 10px 15px auto;_CR/_}_CR/__CR/_.clr-polaroid .clr-preview {_CR/_  margin: 10px 0 15px 10px;_CR/_}_CR/__CR/_/** Large theme **/_CR/__CR/_.clr-picker.clr-large {_CR/_  width: 275px;_CR/_}_CR/__CR/_.clr-large .clr-gradient {_CR/_  height: 150px;_CR/_}_CR/__CR/_.clr-large .clr-swatches button {_CR/_  width: 22px;_CR/_  height: 22px;_CR/_}_CR/__CR/_/** Pill (horizontal) theme **/_CR/__CR/_.clr-picker.clr-pill {_CR/_  width: 380px;_CR/_  padding-left: 180px;_CR/_  box-sizing: border-box;_CR/_}_CR/__CR/_.clr-pill .clr-gradient {_CR/_  position: absolute;_CR/_  width: 180px;_CR/_  height: 100%;_CR/_  left: 0;_CR/_  top: 0;_CR/_  margin-bottom: 0;_CR/_  border-radius: 3px 0 0 3px;_CR/_}_CR/__CR/_.clr-pill .clr-hue {_CR/_  margin-top: 20px;_CR/_}_CR/__CR/_    body {_CR/__TAB/_  overflow: hidden;_CR/_      height: 120vh;_CR/_      margin: 0px;_CR/_      color: #444;_CR/_      background-color: #fff;_CR/_      font-family: &apos;Arial&apos;, sans-serif;_CR/_    }_CR/__TAB/__CR/__TAB/_.clr-picker {_CR/__TAB/__TAB/_left: 0px !important;_CR/__TAB/__TAB/_box-shadow: none ;_CR/__TAB/__TAB/_top: 0px;_CR/__TAB/__TAB/_right: 0px;_CR/__TAB/_}_TAB/__CR/__CR/_    h1 {_CR/_      margin-bottom: 1.5em;_CR/_    }_CR/__CR/_    input {_CR/__TAB/__CR/_      width: 150px;_CR/_      height: 28px;_CR/_      padding: 0 10px;_CR/_      border: 1px solid #ccc;_CR/_      font-family: inherit;_CR/_      font-size: inherit;_CR/_      font-weight: inherit;_CR/_      box-sizing: border-box;_CR/_    }_CR/__TAB/__CR/__TAB/_input[data-coloris]{_CR/_    display:none;_CR/__TAB/_}_CR/_      _CR/_    .examples {_CR/_      display: flex;_CR/_      flex-wrap: wrap;_CR/_    }_CR/__CR/_    .example {_CR/_      flex-shrink: 1;_CR/_      width: 160px;_CR/_      margin-bottom: 8px;_CR/_    }_CR/__CR/_    .square .clr-field button,_CR/_    .circle .clr-field button {_CR/_      width: 22px;_CR/_      height: 22px;_CR/_      left: 5px;_CR/_      right: auto;_CR/_      border-radius: 5px;_CR/_    }_CR/__CR/_    .square .clr-field input,_CR/_    .circle .clr-field input {_CR/_      padding-left: 36px;_CR/_    }_CR/__CR/_    .circle .clr-field button {_CR/_      border-radius: 50%;_CR/_    }_CR/__CR/_    .full .clr-field button {_CR/_      width: 100%;_CR/_      height: 100%;_CR/_      border-radius: 5px;_CR/_    }_CR/__CR/_    &lt;/style&gt;_CR/_  &lt;/head&gt;_CR/_  &lt;body&gt;_CR/__CR/_      &lt;div class=\&quot;example\&quot;&gt;_CR/_        &lt;input type=\&quot;text\&quot; value=\&quot;green\&quot; data-coloris&gt;_CR/_      &lt;/div&gt;_CR/__CR/_    &lt;script type=&apos;text/javascript&apos;&gt;_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.E52B3134279C7919142445DAA00E3719</StringID>
	<SourceText>wv_colorPicker_</SourceText>
	<TargetText>wv_colorPicker_</TargetText>
	<Comment>com.fmi.calculation.text.wv_colorPicker_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.E89E97058A920A0C86F773F018C38002</StringID>
	<SourceText> on the remainder using a &quot;fromBase&quot; of 10.<CR/></SourceText>
	<TargetText> on the remainder using a &quot;fromBase&quot; of 10.<CR/></TargetText>
	<Comment>com.fmi.calculation.text. on the remainder using a &quot;fromBase&quot; of 10._CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.E937F79975FE6AB11D033154F6F9B3E2</StringID>
	<SourceText> Make sure to have supporting custom function installed (coloris.js).<CR/></SourceText>
	<TargetText> Make sure to have supporting custom function installed (coloris.js).<CR/></TargetText>
	<Comment>com.fmi.calculation.text. Make sure to have supporting custom function installed (coloris.js)._CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.EDED56A2757E0FA3848F91D8AD1E4BC6</StringID>
	<SourceText> Params: Name<CR/></SourceText>
	<TargetText> Params: Name<CR/></TargetText>
	<Comment>com.fmi.calculation.text. Params: Name_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.EECE2E542B0CDCE586A27B7931BA8BF0</StringID>
	<SourceText>¶</SourceText>
	<TargetText>¶</TargetText>
	<Comment>com.fmi.calculation.text.¶</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.F0A221D97D5F26889A0878DDE4560D39</StringID>
	<SourceText> Function Name : colorContrast<CR/></SourceText>
	<TargetText> Function Name : colorContrast<CR/></TargetText>
	<Comment>com.fmi.calculation.text. Function Name : colorContrast_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.F415E4E6B517A09D76061BDA97104AE5</StringID>
	<SourceText><CR/><CR/>1 : Set name of global var or field depending on state of isVar (do not include $$)<CR/>2 : Target can be a field or global variable. isVar = True will target a global var, isVar = False will target a field <CR/>3 : This can be a reference to a field or global var with the intent to grab and set currently selected colour<CR/><CR/><CR/><CR/>STORING COLOUR DATA IN A GLOBAL VAR<CR/><CR/>JSONSetElement ( &quot;&quot; ; <CR/><CR/><TAB/>[ &quot;coloris.target&quot; ; &quot;MYTARGET&quot; ; 1 ] ;<CR/><TAB/>[ &quot;coloris.key&quot; ; &quot;dim&quot; ; 1 ] ;<CR/><TAB/>[ &quot;coloris.isVar&quot; ; True ; 5 ] ;<CR/><TAB/>[ &quot;coloris.defaultColor&quot; ; $$MYTARGET ; 1 ]<CR/><CR/>)<CR/><CR/><CR/><CR/>STORING COLOUR DATA IN A FIELD<CR/><CR/>JSONSetElement ( &quot;&quot; ; <CR/><CR/><TAB/>[ &quot;coloris.target&quot; ; &quot;myTable::myField&quot; ; 1 ] ;<CR/><TAB/>[ &quot;coloris.key&quot; ; &quot;dim&quot; ; 1 ] ;<CR/><TAB/>[ &quot;coloris.isVar&quot; ; True ; 5 ] ;<CR/><TAB/>[ &quot;coloris.defaultColor&quot; ; GetField ( &quot;myTable::myField&quot; ) ; 1 ]<CR/><CR/>)<CR/><CR/></SourceText>
	<TargetText><CR/><CR/>1 : Set name of global var or field depending on state of isVar (do not include $$)<CR/>2 : Target can be a field or global variable. isVar = True will target a global var, isVar = False will target a field <CR/>3 : This can be a reference to a field or global var with the intent to grab and set currently selected colour<CR/><CR/><CR/><CR/>STORING COLOUR DATA IN A GLOBAL VAR<CR/><CR/>JSONSetElement ( &quot;&quot; ; <CR/><CR/><TAB/>[ &quot;coloris.target&quot; ; &quot;MYTARGET&quot; ; 1 ] ;<CR/><TAB/>[ &quot;coloris.key&quot; ; &quot;dim&quot; ; 1 ] ;<CR/><TAB/>[ &quot;coloris.isVar&quot; ; True ; 5 ] ;<CR/><TAB/>[ &quot;coloris.defaultColor&quot; ; $$MYTARGET ; 1 ]<CR/><CR/>)<CR/><CR/><CR/><CR/>STORING COLOUR DATA IN A FIELD<CR/><CR/>JSONSetElement ( &quot;&quot; ; <CR/><CR/><TAB/>[ &quot;coloris.target&quot; ; &quot;myTable::myField&quot; ; 1 ] ;<CR/><TAB/>[ &quot;coloris.key&quot; ; &quot;dim&quot; ; 1 ] ;<CR/><TAB/>[ &quot;coloris.isVar&quot; ; True ; 5 ] ;<CR/><TAB/>[ &quot;coloris.defaultColor&quot; ; GetField ( &quot;myTable::myField&quot; ) ; 1 ]<CR/><CR/>)<CR/><CR/></TargetText>
	<Comment>com.fmi.calculation.text._CR/__CR/_1 : Set name of global var or field depending on state of isVar (do not include $$)_CR/_2 : Target can be a field or global variable. isVar = True will target a global var, isVar = False will target a field _CR/_3 : This can be a reference to a field or global var with the intent to grab and set currently selected colour_CR/__CR/__CR/__CR/_STORING COLOUR DATA IN A GLOBAL VAR_CR/__CR/_JSONSetElement ( &quot;&quot; ; _CR/__CR/__TAB/_[ &quot;coloris.target&quot; ; &quot;MYTARGET&quot; ; 1 ] ;_CR/__TAB/_[ &quot;coloris.key&quot; ; &quot;dim&quot; ; 1 ] ;_CR/__TAB/_[ &quot;coloris.isVar&quot; ; True ; 5 ] ;_CR/__TAB/_[ &quot;coloris.defaultColor&quot; ; $$MYTARGET ; 1 ]_CR/__CR/_)_CR/__CR/__CR/__CR/_STORING COLOUR DATA IN A FIELD_CR/__CR/_JSONSetElement ( &quot;&quot; ; _CR/__CR/__TAB/_[ &quot;coloris.target&quot; ; &quot;myTable::myField&quot; ; 1 ] ;_CR/__TAB/_[ &quot;coloris.key&quot; ; &quot;dim&quot; ; 1 ] ;_CR/__TAB/_[ &quot;coloris.isVar&quot; ; True ; 5 ] ;_CR/__TAB/_[ &quot;coloris.defaultColor&quot; ; GetField ( &quot;myTable::myField&quot; ) ; 1 ]_CR/__CR/_)_CR/__CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.F54E80EA26758D73553CFBC2D969B8B1</StringID>
	<SourceText> Function Name : coloris<CR/></SourceText>
	<TargetText> Function Name : coloris<CR/></TargetText>
	<Comment>com.fmi.calculation.text. Function Name : coloris_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.F721DE06AF414EE27451621512EAC624</StringID>
	<SourceText>  contains characters other than the digits for BaseFrom<CR/></SourceText>
	<TargetText>  contains characters other than the digits for BaseFrom<CR/></TargetText>
	<Comment>com.fmi.calculation.text.  contains characters other than the digits for BaseFrom_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.F829E5DEEF3CE4971044C8C1E4858BF0</StringID>
	<SourceText> calling the function again on the postive version of the string.<CR/></SourceText>
	<TargetText> calling the function again on the postive version of the string.<CR/></TargetText>
	<Comment>com.fmi.calculation.text. calling the function again on the postive version of the string._CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.F83BA479F0A70EE12B70772D6DA8AE7B</StringID>
	<SourceText>=</SourceText>
	<TargetText>=</TargetText>
	<Comment>com.fmi.calculation.text.=</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.FA468AADF6FB7738BD32A9C85AD89693</StringID>
	<SourceText>e+</SourceText>
	<TargetText>e+</TargetText>
	<Comment>com.fmi.calculation.text.e+</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.FAAD8AD7BEF427AE730361D791C3CC3F</StringID>
	<SourceText> Extract RGB components from hex color<CR/></SourceText>
	<TargetText> Extract RGB components from hex color<CR/></TargetText>
	<Comment>com.fmi.calculation.text. Extract RGB components from hex color_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.FDCA636433FD410642DB310520B4ABF1</StringID>
	<SourceText> Calculates and returns a colour tint or chroma of given colour in HEX format. Tint is passed as a percentage value for the colour chroma to be returned with valid range between 0 - 100 passed as number only value.<CR/></SourceText>
	<TargetText> Calculates and returns a colour tint or chroma of given colour in HEX format. Tint is passed as a percentage value for the colour chroma to be returned with valid range between 0 - 100 passed as number only value.<CR/></TargetText>
	<Comment>com.fmi.calculation.text. Calculates and returns a colour tint or chroma of given colour in HEX format. Tint is passed as a percentage value for the colour chroma to be returned with valid range between 0 - 100 passed as number only value._CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.calculation.text.FF6F0CB82754796CBE08197D36A84155</StringID>
	<SourceText> Suits a WebViewer of 200x320px<CR/></SourceText>
	<TargetText> Suits a WebViewer of 200x320px<CR/></TargetText>
	<Comment>com.fmi.calculation.text. Suits a WebViewer of 200x320px_CR/_</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.layoutobject.3AC3FB8921BE8E8473A030389A406312</StringID>
	<SourceText>wv_colorPicker_[&lt;^FMXML_AddonInstanceUUID&gt;]</SourceText>
	<TargetText>wv_colorPicker_[&lt;^FMXML_AddonInstanceUUID&gt;]</TargetText>
	<Comment>com.fmi.layoutobject.wv_colorPicker_[&lt;^FMXML_AddonInstanceUUID&gt;]</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.layoutobject.63762CDDDCCA448C6CB84BF515C4FFA6</StringID>
	<SourceText>content_colorPicker_[&lt;^FMXML_AddonInstanceUUID&gt;]</SourceText>
	<TargetText>content_colorPicker_[&lt;^FMXML_AddonInstanceUUID&gt;]</TargetText>
	<Comment>com.fmi.layoutobject.content_colorPicker_[&lt;^FMXML_AddonInstanceUUID&gt;]</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.layoutobject.77775DA0387734A6965559FA2AF483FC</StringID>
	<SourceText>bb__colorPicker_[&lt;^FMXML_AddonInstanceUUID&gt;]</SourceText>
	<TargetText>bb__colorPicker_[&lt;^FMXML_AddonInstanceUUID&gt;]</TargetText>
	<Comment>com.fmi.layoutobject.bb__colorPicker_[&lt;^FMXML_AddonInstanceUUID&gt;]</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.layoutobject.A271A007AA51F90AA1E32663CCEAE54E</StringID>
	<SourceText>colorPicker_[&lt;^FMXML_AddonInstanceUUID&gt;]</SourceText>
	<TargetText>colorPicker_[&lt;^FMXML_AddonInstanceUUID&gt;]</TargetText>
	<Comment>com.fmi.layoutobject.colorPicker_[&lt;^FMXML_AddonInstanceUUID&gt;]</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.layoutobject.F9890EEE7686A29DE38BFFC37CDE70B0</StringID>
	<SourceText>pop_colorPicker_[&lt;^FMXML_AddonInstanceUUID&gt;]</SourceText>
	<TargetText>pop_colorPicker_[&lt;^FMXML_AddonInstanceUUID&gt;]</TargetText>
	<Comment>com.fmi.layoutobject.pop_colorPicker_[&lt;^FMXML_AddonInstanceUUID&gt;]</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.script.45D123AC18A991F57107899B6766EB8F</StringID>
	<SourceText>setColorisTarget</SourceText>
	<TargetText>setColorisTarget</TargetText>
	<Comment>com.fmi.script.setColorisTarget</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.script.6DC07D721794A78361289F92FC37B72E</StringID>
	<SourceText>setColorisColor</SourceText>
	<TargetText>setColorisColor</TargetText>
	<Comment>com.fmi.script.setColorisColor</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.script.folder.9AF647119B21F25D0D14E49F9778F383</StringID>
	<SourceText>Coloris</SourceText>
	<TargetText>Coloris</TargetText>
	<Comment>com.fmi.script.folder.Coloris</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.scriptstep.text.111839C0417DE18B8CF74F955F50BD29</StringID>
	<SourceText>Dependencies: <TAB/><TAB/>Script Parameter Payload</SourceText>
	<TargetText>Dependencies: <TAB/><TAB/>Script Parameter Payload</TargetText>
	<Comment>com.fmi.scriptstep.text.Dependencies: _TAB/__TAB/_Script Parameter Payload</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.scriptstep.text.1E622B64AA3747AC677BAA2C14E7B354</StringID>
	<SourceText>SET TARGET</SourceText>
	<TargetText>SET TARGET</TargetText>
	<Comment>com.fmi.scriptstep.text.SET TARGET</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.scriptstep.text.2E657D4A040A267E3EB0A0A150840AB8</StringID>
	<SourceText>Compatibility: <TAB/><TAB/>All platforms</SourceText>
	<TargetText>Compatibility: <TAB/><TAB/>All platforms</TargetText>
	<Comment>com.fmi.scriptstep.text.Compatibility: _TAB/__TAB/_All platforms</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.scriptstep.text.38A14C5C84DF32208AD0DBC3527C6573</StringID>
	<SourceText>#FFFFFF<CR/><CR/>Any Hexadecimal colour selected in the Coloris WebWidget</SourceText>
	<TargetText>#FFFFFF<CR/><CR/>Any Hexadecimal colour selected in the Coloris WebWidget</TargetText>
	<Comment>com.fmi.scriptstep.text.#FFFFFF_CR/__CR/_Any Hexadecimal colour selected in the Coloris WebWidget</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.scriptstep.text.5C3B710BF05F018BD9D7E697BAD82AB2</StringID>
	<SourceText>SET COLORIS COLOUR</SourceText>
	<TargetText>SET COLORIS COLOUR</TargetText>
	<Comment>com.fmi.scriptstep.text.SET COLORIS COLOUR</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.scriptstep.text.6E93D27030534AD82F0364250B306C64</StringID>
	<SourceText>Subscripts Called: <TAB/>None</SourceText>
	<TargetText>Subscripts Called: <TAB/>None</TargetText>
	<Comment>com.fmi.scriptstep.text.Subscripts Called: _TAB/_None</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.scriptstep.text.8893EE99B40FF85D8A64558693DDD026</StringID>
	<SourceText>Written on 30.09.2024 |  Updated: 00.00.0000  | Valid: Yes</SourceText>
	<TargetText>Written on 30.09.2024 |  Updated: 00.00.0000  | Valid: Yes</TargetText>
	<Comment>com.fmi.scriptstep.text.Written on 30.09.2024 |  Updated: 00.00.0000  | Valid: Yes</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.scriptstep.text.88F75CD25C720D0EF4655B0DBC725B3D</StringID>
	<SourceText>Sets target for Coloris WebWidget</SourceText>
	<TargetText>Sets target for Coloris WebWidget</TargetText>
	<Comment>com.fmi.scriptstep.text.Sets target for Coloris WebWidget</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.scriptstep.text.94E0F4A9CFBCB8FBD941975082FFC115</StringID>
	<SourceText>Receives and populates values from coloris <CR/>webWidget</SourceText>
	<TargetText>Receives and populates values from coloris <CR/>webWidget</TargetText>
	<Comment>com.fmi.scriptstep.text.Receives and populates values from coloris _CR/_webWidget</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.scriptstep.text.ABA09ABEAE968FCB2D7635E45EE3A6A6</StringID>
	<SourceText>Scripts Called: <TAB/><TAB/>None</SourceText>
	<TargetText>Scripts Called: <TAB/><TAB/>None</TargetText>
	<Comment>com.fmi.scriptstep.text.Scripts Called: _TAB/__TAB/_None</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.scriptstep.text.CDFDD882E2FC15C7EB360422FE24AC03</StringID>
	<SourceText>++++++++++++++++++++++++++++++++++++++++++++++++</SourceText>
	<TargetText>++++++++++++++++++++++++++++++++++++++++++++++++</TargetText>
	<Comment>com.fmi.scriptstep.text.++++++++++++++++++++++++++++++++++++++++++++++++</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.scriptstep.text.E9F886B04A084FD7228EF2E0BC9822E7</StringID>
	<SourceText>Activation: <TAB/><TAB/><TAB/>User action, script or trigger</SourceText>
	<TargetText>Activation: <TAB/><TAB/><TAB/>User action, script or trigger</TargetText>
	<Comment>com.fmi.scriptstep.text.Activation: _TAB/__TAB/__TAB/_User action, script or trigger</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.scriptstep.text.EA2B3EA44102BEE00BF1C622DEC79693</StringID>
	<SourceText>JSONSetElement ( &quot;&quot; ; <CR/><CR/><TAB/>[ &quot;coloris.target&quot; ; &quot;$$MYTARGET&quot; ; 1 ] ; // *1<CR/><TAB/>[ &quot;coloris.key&quot; ; &quot;dim&quot; ; 1 ] ;<CR/><TAB/>[ &quot;coloris.isVar&quot; ; True ; 5 ] ; // *2<CR/><TAB/>[ &quot;coloris.defaultColor&quot; ; $$MYTARGET ; 1 ] // *3<CR/><CR/>)<CR/><CR/>// *1 : Set name of global var or field depending on state of isVar<CR/>// *2 : Target can be a field or global variable. isVar = True will target a global var, isVar = False will target a field <CR/>// *3 : This can be a reference to a field or global var with the intent to grab and set currently selected colour</SourceText>
	<TargetText>JSONSetElement ( &quot;&quot; ; <CR/><CR/><TAB/>[ &quot;coloris.target&quot; ; &quot;$$MYTARGET&quot; ; 1 ] ; // *1<CR/><TAB/>[ &quot;coloris.key&quot; ; &quot;dim&quot; ; 1 ] ;<CR/><TAB/>[ &quot;coloris.isVar&quot; ; True ; 5 ] ; // *2<CR/><TAB/>[ &quot;coloris.defaultColor&quot; ; $$MYTARGET ; 1 ] // *3<CR/><CR/>)<CR/><CR/>// *1 : Set name of global var or field depending on state of isVar<CR/>// *2 : Target can be a field or global variable. isVar = True will target a global var, isVar = False will target a field <CR/>// *3 : This can be a reference to a field or global var with the intent to grab and set currently selected colour</TargetText>
	<Comment>com.fmi.scriptstep.text.JSONSetElement ( &quot;&quot; ; _CR/__CR/__TAB/_[ &quot;coloris.target&quot; ; &quot;$$MYTARGET&quot; ; 1 ] ; // *1_CR/__TAB/_[ &quot;coloris.key&quot; ; &quot;dim&quot; ; 1 ] ;_CR/__TAB/_[ &quot;coloris.isVar&quot; ; True ; 5 ] ; // *2_CR/__TAB/_[ &quot;coloris.defaultColor&quot; ; $$MYTARGET ; 1 ] // *3_CR/__CR/_)_CR/__CR/_// *1 : Set name of global var or field depending on state of isVar_CR/_// *2 : Target can be a field or global variable. isVar = True will target a global var, isVar = False will target a field _CR/_// *3 : This can be a reference to a field or global var with the intent to grab and set currently selected colour</Comment>
</DynamicTemplateString>

<DynamicTemplateString>
	<StringID>com.fmi.scriptstep.text.F8C692C443F93C94F89751BC18D8150A</StringID>
	<SourceText>Expected Payload Syntax</SourceText>
	<TargetText>Expected Payload Syntax</TargetText>
	<Comment>com.fmi.scriptstep.text.Expected Payload Syntax</Comment>
</DynamicTemplateString>
